
Special01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f50  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004148  08004148  00005148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b0  080041b0  00006074  2**0
                  CONTENTS
  4 .ARM          00000008  080041b0  080041b0  000051b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041b8  080041b8  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b8  080041b8  000051b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041bc  080041bc  000051bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080041c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000074  08004234  00006074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08004234  000063c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a839  00000000  00000000  000060a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b36  00000000  00000000  000108db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  00012418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005eb  00000000  00000000  00012bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026cc6  00000000  00000000  000131c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b55f  00000000  00000000  00039e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0d79  00000000  00000000  000453e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136161  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e48  00000000  00000000  001361a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00137fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000074 	.word	0x20000074
 8000214:	00000000 	.word	0x00000000
 8000218:	08004130 	.word	0x08004130

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000078 	.word	0x20000078
 8000234:	08004130 	.word	0x08004130

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96a 	b.w	8000534 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	460c      	mov	r4, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14e      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000284:	4694      	mov	ip, r2
 8000286:	458c      	cmp	ip, r1
 8000288:	4686      	mov	lr, r0
 800028a:	fab2 f282 	clz	r2, r2
 800028e:	d962      	bls.n	8000356 <__udivmoddi4+0xde>
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0320 	rsb	r3, r2, #32
 8000296:	4091      	lsls	r1, r2
 8000298:	fa20 f303 	lsr.w	r3, r0, r3
 800029c:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a0:	4319      	orrs	r1, r3
 80002a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f f68c 	uxth.w	r6, ip
 80002ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb07 1114 	mls	r1, r7, r4, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb04 f106 	mul.w	r1, r4, r6
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ce:	f080 8112 	bcs.w	80004f6 <__udivmoddi4+0x27e>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 810f 	bls.w	80004f6 <__udivmoddi4+0x27e>
 80002d8:	3c02      	subs	r4, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a59      	subs	r1, r3, r1
 80002de:	fa1f f38e 	uxth.w	r3, lr
 80002e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ee:	fb00 f606 	mul.w	r6, r0, r6
 80002f2:	429e      	cmp	r6, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x94>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fe:	f080 80fc 	bcs.w	80004fa <__udivmoddi4+0x282>
 8000302:	429e      	cmp	r6, r3
 8000304:	f240 80f9 	bls.w	80004fa <__udivmoddi4+0x282>
 8000308:	4463      	add	r3, ip
 800030a:	3802      	subs	r0, #2
 800030c:	1b9b      	subs	r3, r3, r6
 800030e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000312:	2100      	movs	r1, #0
 8000314:	b11d      	cbz	r5, 800031e <__udivmoddi4+0xa6>
 8000316:	40d3      	lsrs	r3, r2
 8000318:	2200      	movs	r2, #0
 800031a:	e9c5 3200 	strd	r3, r2, [r5]
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d905      	bls.n	8000332 <__udivmoddi4+0xba>
 8000326:	b10d      	cbz	r5, 800032c <__udivmoddi4+0xb4>
 8000328:	e9c5 0100 	strd	r0, r1, [r5]
 800032c:	2100      	movs	r1, #0
 800032e:	4608      	mov	r0, r1
 8000330:	e7f5      	b.n	800031e <__udivmoddi4+0xa6>
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d146      	bne.n	80003c8 <__udivmoddi4+0x150>
 800033a:	42a3      	cmp	r3, r4
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xcc>
 800033e:	4290      	cmp	r0, r2
 8000340:	f0c0 80f0 	bcc.w	8000524 <__udivmoddi4+0x2ac>
 8000344:	1a86      	subs	r6, r0, r2
 8000346:	eb64 0303 	sbc.w	r3, r4, r3
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d0e6      	beq.n	800031e <__udivmoddi4+0xa6>
 8000350:	e9c5 6300 	strd	r6, r3, [r5]
 8000354:	e7e3      	b.n	800031e <__udivmoddi4+0xa6>
 8000356:	2a00      	cmp	r2, #0
 8000358:	f040 8090 	bne.w	800047c <__udivmoddi4+0x204>
 800035c:	eba1 040c 	sub.w	r4, r1, ip
 8000360:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000364:	fa1f f78c 	uxth.w	r7, ip
 8000368:	2101      	movs	r1, #1
 800036a:	fbb4 f6f8 	udiv	r6, r4, r8
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb08 4416 	mls	r4, r8, r6, r4
 8000376:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037a:	fb07 f006 	mul.w	r0, r7, r6
 800037e:	4298      	cmp	r0, r3
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x11c>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f106 34ff 	add.w	r4, r6, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x11a>
 800038c:	4298      	cmp	r0, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2b4>
 8000392:	4626      	mov	r6, r4
 8000394:	1a1c      	subs	r4, r3, r0
 8000396:	fa1f f38e 	uxth.w	r3, lr
 800039a:	fbb4 f0f8 	udiv	r0, r4, r8
 800039e:	fb08 4410 	mls	r4, r8, r0, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb00 f707 	mul.w	r7, r0, r7
 80003aa:	429f      	cmp	r7, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x148>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x146>
 80003b8:	429f      	cmp	r7, r3
 80003ba:	f200 80b0 	bhi.w	800051e <__udivmoddi4+0x2a6>
 80003be:	4620      	mov	r0, r4
 80003c0:	1bdb      	subs	r3, r3, r7
 80003c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c6:	e7a5      	b.n	8000314 <__udivmoddi4+0x9c>
 80003c8:	f1c1 0620 	rsb	r6, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	431f      	orrs	r7, r3
 80003d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d8:	fa04 f301 	lsl.w	r3, r4, r1
 80003dc:	ea43 030c 	orr.w	r3, r3, ip
 80003e0:	40f4      	lsrs	r4, r6
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	0c38      	lsrs	r0, r7, #16
 80003e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ec:	fbb4 fef0 	udiv	lr, r4, r0
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	fb00 441e 	mls	r4, r0, lr, r4
 80003f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000400:	45a1      	cmp	r9, r4
 8000402:	fa02 f201 	lsl.w	r2, r2, r1
 8000406:	d90a      	bls.n	800041e <__udivmoddi4+0x1a6>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800040e:	f080 8084 	bcs.w	800051a <__udivmoddi4+0x2a2>
 8000412:	45a1      	cmp	r9, r4
 8000414:	f240 8081 	bls.w	800051a <__udivmoddi4+0x2a2>
 8000418:	f1ae 0e02 	sub.w	lr, lr, #2
 800041c:	443c      	add	r4, r7
 800041e:	eba4 0409 	sub.w	r4, r4, r9
 8000422:	fa1f f983 	uxth.w	r9, r3
 8000426:	fbb4 f3f0 	udiv	r3, r4, r0
 800042a:	fb00 4413 	mls	r4, r0, r3, r4
 800042e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000432:	fb03 fc0c 	mul.w	ip, r3, ip
 8000436:	45a4      	cmp	ip, r4
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x1d2>
 800043a:	193c      	adds	r4, r7, r4
 800043c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000440:	d267      	bcs.n	8000512 <__udivmoddi4+0x29a>
 8000442:	45a4      	cmp	ip, r4
 8000444:	d965      	bls.n	8000512 <__udivmoddi4+0x29a>
 8000446:	3b02      	subs	r3, #2
 8000448:	443c      	add	r4, r7
 800044a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800044e:	fba0 9302 	umull	r9, r3, r0, r2
 8000452:	eba4 040c 	sub.w	r4, r4, ip
 8000456:	429c      	cmp	r4, r3
 8000458:	46ce      	mov	lr, r9
 800045a:	469c      	mov	ip, r3
 800045c:	d351      	bcc.n	8000502 <__udivmoddi4+0x28a>
 800045e:	d04e      	beq.n	80004fe <__udivmoddi4+0x286>
 8000460:	b155      	cbz	r5, 8000478 <__udivmoddi4+0x200>
 8000462:	ebb8 030e 	subs.w	r3, r8, lr
 8000466:	eb64 040c 	sbc.w	r4, r4, ip
 800046a:	fa04 f606 	lsl.w	r6, r4, r6
 800046e:	40cb      	lsrs	r3, r1
 8000470:	431e      	orrs	r6, r3
 8000472:	40cc      	lsrs	r4, r1
 8000474:	e9c5 6400 	strd	r6, r4, [r5]
 8000478:	2100      	movs	r1, #0
 800047a:	e750      	b.n	800031e <__udivmoddi4+0xa6>
 800047c:	f1c2 0320 	rsb	r3, r2, #32
 8000480:	fa20 f103 	lsr.w	r1, r0, r3
 8000484:	fa0c fc02 	lsl.w	ip, ip, r2
 8000488:	fa24 f303 	lsr.w	r3, r4, r3
 800048c:	4094      	lsls	r4, r2
 800048e:	430c      	orrs	r4, r1
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	fa00 fe02 	lsl.w	lr, r0, r2
 8000498:	fa1f f78c 	uxth.w	r7, ip
 800049c:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a0:	fb08 3110 	mls	r1, r8, r0, r3
 80004a4:	0c23      	lsrs	r3, r4, #16
 80004a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004aa:	fb00 f107 	mul.w	r1, r0, r7
 80004ae:	4299      	cmp	r1, r3
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x24c>
 80004b2:	eb1c 0303 	adds.w	r3, ip, r3
 80004b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ba:	d22c      	bcs.n	8000516 <__udivmoddi4+0x29e>
 80004bc:	4299      	cmp	r1, r3
 80004be:	d92a      	bls.n	8000516 <__udivmoddi4+0x29e>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004cc:	fb08 3311 	mls	r3, r8, r1, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb01 f307 	mul.w	r3, r1, r7
 80004d8:	42a3      	cmp	r3, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x276>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e4:	d213      	bcs.n	800050e <__udivmoddi4+0x296>
 80004e6:	42a3      	cmp	r3, r4
 80004e8:	d911      	bls.n	800050e <__udivmoddi4+0x296>
 80004ea:	3902      	subs	r1, #2
 80004ec:	4464      	add	r4, ip
 80004ee:	1ae4      	subs	r4, r4, r3
 80004f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f4:	e739      	b.n	800036a <__udivmoddi4+0xf2>
 80004f6:	4604      	mov	r4, r0
 80004f8:	e6f0      	b.n	80002dc <__udivmoddi4+0x64>
 80004fa:	4608      	mov	r0, r1
 80004fc:	e706      	b.n	800030c <__udivmoddi4+0x94>
 80004fe:	45c8      	cmp	r8, r9
 8000500:	d2ae      	bcs.n	8000460 <__udivmoddi4+0x1e8>
 8000502:	ebb9 0e02 	subs.w	lr, r9, r2
 8000506:	eb63 0c07 	sbc.w	ip, r3, r7
 800050a:	3801      	subs	r0, #1
 800050c:	e7a8      	b.n	8000460 <__udivmoddi4+0x1e8>
 800050e:	4631      	mov	r1, r6
 8000510:	e7ed      	b.n	80004ee <__udivmoddi4+0x276>
 8000512:	4603      	mov	r3, r0
 8000514:	e799      	b.n	800044a <__udivmoddi4+0x1d2>
 8000516:	4630      	mov	r0, r6
 8000518:	e7d4      	b.n	80004c4 <__udivmoddi4+0x24c>
 800051a:	46d6      	mov	lr, sl
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1a6>
 800051e:	4463      	add	r3, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e74d      	b.n	80003c0 <__udivmoddi4+0x148>
 8000524:	4606      	mov	r6, r0
 8000526:	4623      	mov	r3, r4
 8000528:	4608      	mov	r0, r1
 800052a:	e70f      	b.n	800034c <__udivmoddi4+0xd4>
 800052c:	3e02      	subs	r6, #2
 800052e:	4463      	add	r3, ip
 8000530:	e730      	b.n	8000394 <__udivmoddi4+0x11c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b1e      	ldr	r3, [pc, #120]	@ (80005c8 <MX_GPIO_Init+0x90>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	4a1d      	ldr	r2, [pc, #116]	@ (80005c8 <MX_GPIO_Init+0x90>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6313      	str	r3, [r2, #48]	@ 0x30
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_GPIO_Init+0x90>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <MX_GPIO_Init+0x90>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	4a17      	ldr	r2, [pc, #92]	@ (80005c8 <MX_GPIO_Init+0x90>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	6313      	str	r3, [r2, #48]	@ 0x30
 8000572:	4b15      	ldr	r3, [pc, #84]	@ (80005c8 <MX_GPIO_Init+0x90>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <MX_GPIO_Init+0x90>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	4a11      	ldr	r2, [pc, #68]	@ (80005c8 <MX_GPIO_Init+0x90>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	@ 0x30
 800058a:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <MX_GPIO_Init+0x90>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f244 0181 	movw	r1, #16513	@ 0x4081
 800059c:	480b      	ldr	r0, [pc, #44]	@ (80005cc <MX_GPIO_Init+0x94>)
 800059e:	f001 f949 	bl	8001834 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80005a2:	f244 0381 	movw	r3, #16513	@ 0x4081
 80005a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	4619      	mov	r1, r3
 80005ba:	4804      	ldr	r0, [pc, #16]	@ (80005cc <MX_GPIO_Init+0x94>)
 80005bc:	f000 ff8e 	bl	80014dc <HAL_GPIO_Init>

}
 80005c0:	bf00      	nop
 80005c2:	3720      	adds	r7, #32
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40020400 	.word	0x40020400

080005d0 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    if (status == 1) {
 80005d8:	4b24      	ldr	r3, [pc, #144]	@ (800066c <HAL_UART_RxCpltCallback+0x9c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d141      	bne.n	8000664 <HAL_UART_RxCpltCallback+0x94>
        if (recive_status == 1 && transmit_status == 0) {
 80005e0:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <HAL_UART_RxCpltCallback+0xa0>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d12b      	bne.n	8000640 <HAL_UART_RxCpltCallback+0x70>
 80005e8:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <HAL_UART_RxCpltCallback+0xa4>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d127      	bne.n	8000640 <HAL_UART_RxCpltCallback+0x70>
            if (HAL_UART_Receive_IT(&huart1, RxData, 100) == HAL_OK) {
 80005f0:	2264      	movs	r2, #100	@ 0x64
 80005f2:	4921      	ldr	r1, [pc, #132]	@ (8000678 <HAL_UART_RxCpltCallback+0xa8>)
 80005f4:	4821      	ldr	r0, [pc, #132]	@ (800067c <HAL_UART_RxCpltCallback+0xac>)
 80005f6:	f002 faca 	bl	8002b8e <HAL_UART_Receive_IT>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d131      	bne.n	8000664 <HAL_UART_RxCpltCallback+0x94>
                if (strncmp((char *)RxData, "QUIT", 4) == 0) {  // ตรวจสอบว่าได้รับ "QUIT"
 8000600:	2204      	movs	r2, #4
 8000602:	491f      	ldr	r1, [pc, #124]	@ (8000680 <HAL_UART_RxCpltCallback+0xb0>)
 8000604:	481c      	ldr	r0, [pc, #112]	@ (8000678 <HAL_UART_RxCpltCallback+0xa8>)
 8000606:	f003 fd4f 	bl	80040a8 <strncmp>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d10a      	bne.n	8000626 <HAL_UART_RxCpltCallback+0x56>
                    status = 0;  // ออกจากลูป
 8000610:	4b16      	ldr	r3, [pc, #88]	@ (800066c <HAL_UART_RxCpltCallback+0x9c>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
                    HAL_UART_Transmit(&huart3,"QUIT", 4, 1000);
 8000616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800061a:	2204      	movs	r2, #4
 800061c:	4918      	ldr	r1, [pc, #96]	@ (8000680 <HAL_UART_RxCpltCallback+0xb0>)
 800061e:	4819      	ldr	r0, [pc, #100]	@ (8000684 <HAL_UART_RxCpltCallback+0xb4>)
 8000620:	f002 fa2c 	bl	8002a7c <HAL_UART_Transmit>
                    return;
 8000624:	e01e      	b.n	8000664 <HAL_UART_RxCpltCallback+0x94>
                }
                recive_status = 0;
 8000626:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <HAL_UART_RxCpltCallback+0xa0>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
                transmit_status = 1;
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <HAL_UART_RxCpltCallback+0xa4>)
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
                setyourname_status += 1;
 8000632:	4b15      	ldr	r3, [pc, #84]	@ (8000688 <HAL_UART_RxCpltCallback+0xb8>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <HAL_UART_RxCpltCallback+0xb8>)
 800063c:	701a      	strb	r2, [r3, #0]
            if (HAL_UART_Receive_IT(&huart1, RxData, 100) == HAL_OK) {
 800063e:	e011      	b.n	8000664 <HAL_UART_RxCpltCallback+0x94>
            }
        } else if (recive_status == 1 && transmit_status == 1) {
 8000640:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <HAL_UART_RxCpltCallback+0xa0>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d10d      	bne.n	8000664 <HAL_UART_RxCpltCallback+0x94>
 8000648:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <HAL_UART_RxCpltCallback+0xa4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d109      	bne.n	8000664 <HAL_UART_RxCpltCallback+0x94>
            if (HAL_UART_Receive_IT(&huart3, inputstr, 1) == HAL_OK) {
 8000650:	2201      	movs	r2, #1
 8000652:	490e      	ldr	r1, [pc, #56]	@ (800068c <HAL_UART_RxCpltCallback+0xbc>)
 8000654:	480b      	ldr	r0, [pc, #44]	@ (8000684 <HAL_UART_RxCpltCallback+0xb4>)
 8000656:	f002 fa9a 	bl	8002b8e <HAL_UART_Receive_IT>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d101      	bne.n	8000664 <HAL_UART_RxCpltCallback+0x94>
                Inputstr();
 8000660:	f000 f816 	bl	8000690 <Inputstr>
            }
        }
    }
}
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000000 	.word	0x20000000
 8000670:	20000001 	.word	0x20000001
 8000674:	20000002 	.word	0x20000002
 8000678:	20000094 	.word	0x20000094
 800067c:	2000022c 	.word	0x2000022c
 8000680:	08004148 	.word	0x08004148
 8000684:	2000033c 	.word	0x2000033c
 8000688:	20000161 	.word	0x20000161
 800068c:	200000f8 	.word	0x200000f8

08000690 <Inputstr>:


void Inputstr(){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3,"\r", 2, 1000);
 8000694:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000698:	2202      	movs	r2, #2
 800069a:	4940      	ldr	r1, [pc, #256]	@ (800079c <Inputstr+0x10c>)
 800069c:	4840      	ldr	r0, [pc, #256]	@ (80007a0 <Inputstr+0x110>)
 800069e:	f002 f9ed 	bl	8002a7c <HAL_UART_Transmit>
	showstatus();
 80006a2:	f000 f893 	bl	80007cc <showstatus>
	HAL_UART_Transmit(&huart3, showstr, 100, 1000);
 80006a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006aa:	2264      	movs	r2, #100	@ 0x64
 80006ac:	493d      	ldr	r1, [pc, #244]	@ (80007a4 <Inputstr+0x114>)
 80006ae:	483c      	ldr	r0, [pc, #240]	@ (80007a0 <Inputstr+0x110>)
 80006b0:	f002 f9e4 	bl	8002a7c <HAL_UART_Transmit>
	if(inputstr[0] == '\b'){
 80006b4:	4b3c      	ldr	r3, [pc, #240]	@ (80007a8 <Inputstr+0x118>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b08      	cmp	r3, #8
 80006ba:	d108      	bne.n	80006ce <Inputstr+0x3e>
		showstr[strlen(showstr)-1] = '\000';
 80006bc:	4839      	ldr	r0, [pc, #228]	@ (80007a4 <Inputstr+0x114>)
 80006be:	f7ff fdbb 	bl	8000238 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	3b01      	subs	r3, #1
 80006c6:	4a37      	ldr	r2, [pc, #220]	@ (80007a4 <Inputstr+0x114>)
 80006c8:	2100      	movs	r1, #0
 80006ca:	54d1      	strb	r1, [r2, r3]
 80006cc:	e060      	b.n	8000790 <Inputstr+0x100>
	}
	else if(inputstr[0] == '\r'){
 80006ce:	4b36      	ldr	r3, [pc, #216]	@ (80007a8 <Inputstr+0x118>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b0d      	cmp	r3, #13
 80006d4:	d131      	bne.n	800073a <Inputstr+0xaa>
		showstr[strlen(showstr)] = '\0';
 80006d6:	4833      	ldr	r0, [pc, #204]	@ (80007a4 <Inputstr+0x114>)
 80006d8:	f7ff fdae 	bl	8000238 <strlen>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a31      	ldr	r2, [pc, #196]	@ (80007a4 <Inputstr+0x114>)
 80006e0:	2100      	movs	r1, #0
 80006e2:	54d1      	strb	r1, [r2, r3]
		if(setmyname_status == 0){
 80006e4:	4b31      	ldr	r3, [pc, #196]	@ (80007ac <Inputstr+0x11c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d10a      	bne.n	8000702 <Inputstr+0x72>
			memcpy(Myname, showstr, sizeof(Myname));
 80006ec:	4a30      	ldr	r2, [pc, #192]	@ (80007b0 <Inputstr+0x120>)
 80006ee:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <Inputstr+0x114>)
 80006f0:	4610      	mov	r0, r2
 80006f2:	4619      	mov	r1, r3
 80006f4:	2364      	movs	r3, #100	@ 0x64
 80006f6:	461a      	mov	r2, r3
 80006f8:	f003 fd0c 	bl	8004114 <memcpy>
			setmyname_status = 1;
 80006fc:	4b2b      	ldr	r3, [pc, #172]	@ (80007ac <Inputstr+0x11c>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Transmit(&huart1,&showstr, 100, 100);
 8000702:	2364      	movs	r3, #100	@ 0x64
 8000704:	2264      	movs	r2, #100	@ 0x64
 8000706:	4927      	ldr	r1, [pc, #156]	@ (80007a4 <Inputstr+0x114>)
 8000708:	482a      	ldr	r0, [pc, #168]	@ (80007b4 <Inputstr+0x124>)
 800070a:	f002 f9b7 	bl	8002a7c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3,"\n\r", 2, 1000);
 800070e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000712:	2202      	movs	r2, #2
 8000714:	4928      	ldr	r1, [pc, #160]	@ (80007b8 <Inputstr+0x128>)
 8000716:	4822      	ldr	r0, [pc, #136]	@ (80007a0 <Inputstr+0x110>)
 8000718:	f002 f9b0 	bl	8002a7c <HAL_UART_Transmit>
		memset(showstr, 0, sizeof(showstr));
 800071c:	2264      	movs	r2, #100	@ 0x64
 800071e:	2100      	movs	r1, #0
 8000720:	4820      	ldr	r0, [pc, #128]	@ (80007a4 <Inputstr+0x114>)
 8000722:	f003 fcb9 	bl	8004098 <memset>
		transmit_status = 0;
 8000726:	4b25      	ldr	r3, [pc, #148]	@ (80007bc <Inputstr+0x12c>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
		show_status += 1;
 800072c:	4b24      	ldr	r3, [pc, #144]	@ (80007c0 <Inputstr+0x130>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b22      	ldr	r3, [pc, #136]	@ (80007c0 <Inputstr+0x130>)
 8000736:	701a      	strb	r2, [r3, #0]
 8000738:	e02a      	b.n	8000790 <Inputstr+0x100>

	}
	else{
		HAL_UART_Transmit(&huart3,inputstr, 1, 1000);
 800073a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800073e:	2201      	movs	r2, #1
 8000740:	4919      	ldr	r1, [pc, #100]	@ (80007a8 <Inputstr+0x118>)
 8000742:	4817      	ldr	r0, [pc, #92]	@ (80007a0 <Inputstr+0x110>)
 8000744:	f002 f99a 	bl	8002a7c <HAL_UART_Transmit>
		showstr[strlen(showstr)] = inputstr[0];
 8000748:	4816      	ldr	r0, [pc, #88]	@ (80007a4 <Inputstr+0x114>)
 800074a:	f7ff fd75 	bl	8000238 <strlen>
 800074e:	4603      	mov	r3, r0
 8000750:	4a15      	ldr	r2, [pc, #84]	@ (80007a8 <Inputstr+0x118>)
 8000752:	7811      	ldrb	r1, [r2, #0]
 8000754:	4a13      	ldr	r2, [pc, #76]	@ (80007a4 <Inputstr+0x114>)
 8000756:	54d1      	strb	r1, [r2, r3]
		if(showstr[0] == 'q'){
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <Inputstr+0x114>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b71      	cmp	r3, #113	@ 0x71
 800075e:	d117      	bne.n	8000790 <Inputstr+0x100>
				HAL_UART_Transmit(&huart3,"\n\r", 2, 1000);
 8000760:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000764:	2202      	movs	r2, #2
 8000766:	4914      	ldr	r1, [pc, #80]	@ (80007b8 <Inputstr+0x128>)
 8000768:	480d      	ldr	r0, [pc, #52]	@ (80007a0 <Inputstr+0x110>)
 800076a:	f002 f987 	bl	8002a7c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3,quit_mass,4, 1000);
 800076e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000772:	2204      	movs	r2, #4
 8000774:	4913      	ldr	r1, [pc, #76]	@ (80007c4 <Inputstr+0x134>)
 8000776:	480a      	ldr	r0, [pc, #40]	@ (80007a0 <Inputstr+0x110>)
 8000778:	f002 f980 	bl	8002a7c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1,quit_mass,100, 1000);
 800077c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000780:	2264      	movs	r2, #100	@ 0x64
 8000782:	4910      	ldr	r1, [pc, #64]	@ (80007c4 <Inputstr+0x134>)
 8000784:	480b      	ldr	r0, [pc, #44]	@ (80007b4 <Inputstr+0x124>)
 8000786:	f002 f979 	bl	8002a7c <HAL_UART_Transmit>
				status = 0;
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <Inputstr+0x138>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
		}
	//  HAL_UART_Transmit(&huart2, (uint8_t )&showstr, 1, 100);
	}


	memset(inputstr, 0, sizeof(inputstr));
 8000790:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <Inputstr+0x118>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	08004150 	.word	0x08004150
 80007a0:	2000033c 	.word	0x2000033c
 80007a4:	200000fc 	.word	0x200000fc
 80007a8:	200000f8 	.word	0x200000f8
 80007ac:	20000160 	.word	0x20000160
 80007b0:	20000164 	.word	0x20000164
 80007b4:	2000022c 	.word	0x2000022c
 80007b8:	08004154 	.word	0x08004154
 80007bc:	20000002 	.word	0x20000002
 80007c0:	20000090 	.word	0x20000090
 80007c4:	20000004 	.word	0x20000004
 80007c8:	20000000 	.word	0x20000000

080007cc <showstatus>:

void showstatus(){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	if(show_status == 0){
 80007d0:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <showstatus+0x88>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d10a      	bne.n	80007ee <showstatus+0x22>
			HAL_UART_Transmit(&huart3,"Man From U.A.R.T.1!\n\r"
 80007d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007dc:	2223      	movs	r2, #35	@ 0x23
 80007de:	491e      	ldr	r1, [pc, #120]	@ (8000858 <showstatus+0x8c>)
 80007e0:	481e      	ldr	r0, [pc, #120]	@ (800085c <showstatus+0x90>)
 80007e2:	f002 f94b 	bl	8002a7c <HAL_UART_Transmit>
					  	  	  	  	  "Quit PRESS q \n\r", 35, 1000);
			show_status =1;
 80007e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <showstatus+0x88>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	701a      	strb	r2, [r3, #0]
	else if(show_status == 3){
			HAL_UART_Transmit(&huart3,Yourname,100, 1000);
			HAL_UART_Transmit(&huart3," :", 2, 1000);

	}
}
 80007ec:	e030      	b.n	8000850 <showstatus+0x84>
	else if(show_status == 1){
 80007ee:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <showstatus+0x88>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d107      	bne.n	8000806 <showstatus+0x3a>
			HAL_UART_Transmit(&huart3,"Name :", 6, 1000);
 80007f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007fa:	2206      	movs	r2, #6
 80007fc:	4918      	ldr	r1, [pc, #96]	@ (8000860 <showstatus+0x94>)
 80007fe:	4817      	ldr	r0, [pc, #92]	@ (800085c <showstatus+0x90>)
 8000800:	f002 f93c 	bl	8002a7c <HAL_UART_Transmit>
}
 8000804:	e024      	b.n	8000850 <showstatus+0x84>
	else if(show_status == 2){
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <showstatus+0x88>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b02      	cmp	r3, #2
 800080c:	d10e      	bne.n	800082c <showstatus+0x60>
			HAL_UART_Transmit(&huart3,Myname,100, 1000);
 800080e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000812:	2264      	movs	r2, #100	@ 0x64
 8000814:	4913      	ldr	r1, [pc, #76]	@ (8000864 <showstatus+0x98>)
 8000816:	4811      	ldr	r0, [pc, #68]	@ (800085c <showstatus+0x90>)
 8000818:	f002 f930 	bl	8002a7c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3," :", 2, 1000);
 800081c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000820:	2202      	movs	r2, #2
 8000822:	4911      	ldr	r1, [pc, #68]	@ (8000868 <showstatus+0x9c>)
 8000824:	480d      	ldr	r0, [pc, #52]	@ (800085c <showstatus+0x90>)
 8000826:	f002 f929 	bl	8002a7c <HAL_UART_Transmit>
}
 800082a:	e011      	b.n	8000850 <showstatus+0x84>
	else if(show_status == 3){
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <showstatus+0x88>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b03      	cmp	r3, #3
 8000832:	d10d      	bne.n	8000850 <showstatus+0x84>
			HAL_UART_Transmit(&huart3,Yourname,100, 1000);
 8000834:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000838:	2264      	movs	r2, #100	@ 0x64
 800083a:	490c      	ldr	r1, [pc, #48]	@ (800086c <showstatus+0xa0>)
 800083c:	4807      	ldr	r0, [pc, #28]	@ (800085c <showstatus+0x90>)
 800083e:	f002 f91d 	bl	8002a7c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3," :", 2, 1000);
 8000842:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000846:	2202      	movs	r2, #2
 8000848:	4907      	ldr	r1, [pc, #28]	@ (8000868 <showstatus+0x9c>)
 800084a:	4804      	ldr	r0, [pc, #16]	@ (800085c <showstatus+0x90>)
 800084c:	f002 f916 	bl	8002a7c <HAL_UART_Transmit>
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000090 	.word	0x20000090
 8000858:	08004158 	.word	0x08004158
 800085c:	2000033c 	.word	0x2000033c
 8000860:	08004180 	.word	0x08004180
 8000864:	20000164 	.word	0x20000164
 8000868:	08004188 	.word	0x08004188
 800086c:	200001c8 	.word	0x200001c8

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000874:	f000 f912 	bl	8000a9c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f000 fbb7 	bl	8000fea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087c:	f000 f8b2 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000880:	f7ff fe5a 	bl	8000538 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000884:	f000 f9c0 	bl	8000c08 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000888:	f000 f9ee 	bl	8000c68 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800088c:	f000 fa1c 	bl	8000cc8 <MX_USART3_UART_Init>
  HAL_UART_Receive_IT(&huart1,RxData, 100);
 8000890:	2264      	movs	r2, #100	@ 0x64
 8000892:	4948      	ldr	r1, [pc, #288]	@ (80009b4 <main+0x144>)
 8000894:	4848      	ldr	r0, [pc, #288]	@ (80009b8 <main+0x148>)
 8000896:	f002 f97a 	bl	8002b8e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3,inputstr, 1);
 800089a:	2201      	movs	r2, #1
 800089c:	4947      	ldr	r1, [pc, #284]	@ (80009bc <main+0x14c>)
 800089e:	4848      	ldr	r0, [pc, #288]	@ (80009c0 <main+0x150>)
 80008a0:	f002 f975 	bl	8002b8e <HAL_UART_Receive_IT>

//	  HAL_UART_Receive(&huart1, RxData, 100, HAL_MAX_DELAY);
//	  HAL_UART_Transmit(&huart3, RxData, 100, HAL_MAX_DELAY);

//	  HAL_UART_Transmit(&huart1, (uint8_t *)".", 1, 100);
	  if(show_status == 0){
 80008a4:	4b47      	ldr	r3, [pc, #284]	@ (80009c4 <main+0x154>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d107      	bne.n	80008bc <main+0x4c>
		  showstatus();
 80008ac:	f7ff ff8e 	bl	80007cc <showstatus>
		  if(transmit_status == 1){
 80008b0:	4b45      	ldr	r3, [pc, #276]	@ (80009c8 <main+0x158>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d101      	bne.n	80008bc <main+0x4c>
			  Inputstr();
 80008b8:	f7ff feea 	bl	8000690 <Inputstr>
		  }
	  }
	  if (recive_status == 0){
 80008bc:	4b43      	ldr	r3, [pc, #268]	@ (80009cc <main+0x15c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d165      	bne.n	8000990 <main+0x120>
		  if(setyourname_status == 1){
 80008c4:	4b42      	ldr	r3, [pc, #264]	@ (80009d0 <main+0x160>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d132      	bne.n	8000932 <main+0xc2>
			  memcpy(Yourname, RxData, sizeof(Yourname));
 80008cc:	4a41      	ldr	r2, [pc, #260]	@ (80009d4 <main+0x164>)
 80008ce:	4b39      	ldr	r3, [pc, #228]	@ (80009b4 <main+0x144>)
 80008d0:	4610      	mov	r0, r2
 80008d2:	4619      	mov	r1, r3
 80008d4:	2364      	movs	r3, #100	@ 0x64
 80008d6:	461a      	mov	r2, r3
 80008d8:	f003 fc1c 	bl	8004114 <memcpy>
			  HAL_UART_Transmit(&huart3,"\r", 2, 1000);
 80008dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e0:	2202      	movs	r2, #2
 80008e2:	493d      	ldr	r1, [pc, #244]	@ (80009d8 <main+0x168>)
 80008e4:	4836      	ldr	r0, [pc, #216]	@ (80009c0 <main+0x150>)
 80008e6:	f002 f8c9 	bl	8002a7c <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart3, Yourname, 100, 1000);
 80008ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ee:	2264      	movs	r2, #100	@ 0x64
 80008f0:	4938      	ldr	r1, [pc, #224]	@ (80009d4 <main+0x164>)
 80008f2:	4833      	ldr	r0, [pc, #204]	@ (80009c0 <main+0x150>)
 80008f4:	f002 f8c2 	bl	8002a7c <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart3, " is ready", 9, 1000);
 80008f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008fc:	2209      	movs	r2, #9
 80008fe:	4937      	ldr	r1, [pc, #220]	@ (80009dc <main+0x16c>)
 8000900:	482f      	ldr	r0, [pc, #188]	@ (80009c0 <main+0x150>)
 8000902:	f002 f8bb 	bl	8002a7c <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart3,"\n\r", 2, 1000);
 8000906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800090a:	2202      	movs	r2, #2
 800090c:	4934      	ldr	r1, [pc, #208]	@ (80009e0 <main+0x170>)
 800090e:	482c      	ldr	r0, [pc, #176]	@ (80009c0 <main+0x150>)
 8000910:	f002 f8b4 	bl	8002a7c <HAL_UART_Transmit>
			  setyourname_status += 1;
 8000914:	4b2e      	ldr	r3, [pc, #184]	@ (80009d0 <main+0x160>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	3301      	adds	r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b2c      	ldr	r3, [pc, #176]	@ (80009d0 <main+0x160>)
 800091e:	701a      	strb	r2, [r3, #0]
			  show_status = 2;
 8000920:	4b28      	ldr	r3, [pc, #160]	@ (80009c4 <main+0x154>)
 8000922:	2202      	movs	r2, #2
 8000924:	701a      	strb	r2, [r3, #0]
			  memset(RxData, 0, sizeof(RxData));
 8000926:	2264      	movs	r2, #100	@ 0x64
 8000928:	2100      	movs	r1, #0
 800092a:	4822      	ldr	r0, [pc, #136]	@ (80009b4 <main+0x144>)
 800092c:	f003 fbb4 	bl	8004098 <memset>
 8000930:	e025      	b.n	800097e <main+0x10e>

		  }
		  else if(setyourname_status > 1){
 8000932:	4b27      	ldr	r3, [pc, #156]	@ (80009d0 <main+0x160>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d921      	bls.n	800097e <main+0x10e>
			  HAL_UART_Transmit(&huart3,"\r", 2, 1000);
 800093a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800093e:	2202      	movs	r2, #2
 8000940:	4925      	ldr	r1, [pc, #148]	@ (80009d8 <main+0x168>)
 8000942:	481f      	ldr	r0, [pc, #124]	@ (80009c0 <main+0x150>)
 8000944:	f002 f89a 	bl	8002a7c <HAL_UART_Transmit>
			  showstatus();
 8000948:	f7ff ff40 	bl	80007cc <showstatus>
			  HAL_UART_Transmit(&huart3, RxData, 100, 1000);
 800094c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000950:	2264      	movs	r2, #100	@ 0x64
 8000952:	4918      	ldr	r1, [pc, #96]	@ (80009b4 <main+0x144>)
 8000954:	481a      	ldr	r0, [pc, #104]	@ (80009c0 <main+0x150>)
 8000956:	f002 f891 	bl	8002a7c <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart3,"\n\r", 2, 1000);
 800095a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800095e:	2202      	movs	r2, #2
 8000960:	491f      	ldr	r1, [pc, #124]	@ (80009e0 <main+0x170>)
 8000962:	4817      	ldr	r0, [pc, #92]	@ (80009c0 <main+0x150>)
 8000964:	f002 f88a 	bl	8002a7c <HAL_UART_Transmit>
			  memset(RxData, 0, sizeof(RxData));
 8000968:	2264      	movs	r2, #100	@ 0x64
 800096a:	2100      	movs	r1, #0
 800096c:	4811      	ldr	r0, [pc, #68]	@ (80009b4 <main+0x144>)
 800096e:	f003 fb93 	bl	8004098 <memset>
			  show_status -= 1;
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <main+0x154>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	3b01      	subs	r3, #1
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <main+0x154>)
 800097c:	701a      	strb	r2, [r3, #0]

		  }
		  if(transmit_status == 1){
 800097e:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <main+0x158>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d101      	bne.n	800098a <main+0x11a>
			  Inputstr();
 8000986:	f7ff fe83 	bl	8000690 <Inputstr>
		  }
		  recive_status = 1;
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <main+0x15c>)
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]


	  }

	  if(transmit_status == 2){
 8000990:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <main+0x158>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b02      	cmp	r3, #2
 8000996:	d185      	bne.n	80008a4 <main+0x34>
	  		  HAL_UART_Transmit(&huart3,"\n\r", 2, 1000);
 8000998:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099c:	2202      	movs	r2, #2
 800099e:	4910      	ldr	r1, [pc, #64]	@ (80009e0 <main+0x170>)
 80009a0:	4807      	ldr	r0, [pc, #28]	@ (80009c0 <main+0x150>)
 80009a2:	f002 f86b 	bl	8002a7c <HAL_UART_Transmit>
	  		  transmit_status = 0;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <main+0x158>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
	  		  recive_status = 0;
 80009ac:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <main+0x15c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
	  if(show_status == 0){
 80009b2:	e777      	b.n	80008a4 <main+0x34>
 80009b4:	20000094 	.word	0x20000094
 80009b8:	2000022c 	.word	0x2000022c
 80009bc:	200000f8 	.word	0x200000f8
 80009c0:	2000033c 	.word	0x2000033c
 80009c4:	20000090 	.word	0x20000090
 80009c8:	20000002 	.word	0x20000002
 80009cc:	20000001 	.word	0x20000001
 80009d0:	20000161 	.word	0x20000161
 80009d4:	200001c8 	.word	0x200001c8
 80009d8:	08004150 	.word	0x08004150
 80009dc:	0800418c 	.word	0x0800418c
 80009e0:	08004154 	.word	0x08004154

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b094      	sub	sp, #80	@ 0x50
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	2234      	movs	r2, #52	@ 0x34
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f003 fb50 	bl	8004098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a08:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <SystemClock_Config+0xb0>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	4a21      	ldr	r2, [pc, #132]	@ (8000a94 <SystemClock_Config+0xb0>)
 8000a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a14:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <SystemClock_Config+0xb0>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a20:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <SystemClock_Config+0xb4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a28:	4a1b      	ldr	r2, [pc, #108]	@ (8000a98 <SystemClock_Config+0xb4>)
 8000a2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <SystemClock_Config+0xb4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a40:	2301      	movs	r3, #1
 8000a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a44:	2310      	movs	r3, #16
 8000a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 ff09 	bl	8001868 <HAL_RCC_OscConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000a5c:	f000 f84a 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a60:	230f      	movs	r3, #15
 8000a62:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 f9a2 	bl	8001dc4 <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a86:	f000 f835 	bl	8000af4 <Error_Handler>
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3750      	adds	r7, #80	@ 0x50
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000aae:	f000 fc0b 	bl	80012c8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000abe:	231f      	movs	r3, #31
 8000ac0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ac2:	2387      	movs	r3, #135	@ 0x87
 8000ac4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000aca:	2300      	movs	r3, #0
 8000acc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 fc29 	bl	8001338 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ae6:	2004      	movs	r0, #4
 8000ae8:	f000 fc06 	bl	80012f8 <HAL_MPU_Enable>

}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <Error_Handler+0x8>

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <NMI_Handler+0x4>

08000b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <MemManage_Handler+0x4>

08000b60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9e:	f000 fa61 	bl	8001064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bac:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <USART1_IRQHandler+0x10>)
 8000bae:	f002 f833 	bl	8002c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000022c 	.word	0x2000022c

08000bbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bc0:	4802      	ldr	r0, [pc, #8]	@ (8000bcc <USART2_IRQHandler+0x10>)
 8000bc2:	f002 f829 	bl	8002c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200002b4 	.word	0x200002b4

08000bd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <USART3_IRQHandler+0x10>)
 8000bd6:	f002 f81f 	bl	8002c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000033c 	.word	0x2000033c

08000be4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	@ (8000c60 <MX_USART1_UART_Init+0x58>)
 8000c0e:	4a15      	ldr	r2, [pc, #84]	@ (8000c64 <MX_USART1_UART_Init+0x5c>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c12:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <MX_USART1_UART_Init+0x58>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <MX_USART1_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <MX_USART1_UART_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <MX_USART1_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <MX_USART1_UART_Init+0x58>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <MX_USART1_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <MX_USART1_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <MX_USART1_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <MX_USART1_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_USART1_UART_Init+0x58>)
 8000c4c:	f001 fec8 	bl	80029e0 <HAL_UART_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c56:	f7ff ff4d 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000022c 	.word	0x2000022c
 8000c64:	40011000 	.word	0x40011000

08000c68 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c6e:	4a15      	ldr	r2, [pc, #84]	@ (8000cc4 <MX_USART2_UART_Init+0x5c>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c72:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000cac:	f001 fe98 	bl	80029e0 <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cb6:	f7ff ff1d 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200002b4 	.word	0x200002b4
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_USART3_UART_Init+0x58>)
 8000cce:	4a15      	ldr	r2, [pc, #84]	@ (8000d24 <MX_USART3_UART_Init+0x5c>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <MX_USART3_UART_Init+0x58>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_USART3_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_USART3_UART_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_USART3_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_USART3_UART_Init+0x58>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <MX_USART3_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_USART3_UART_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <MX_USART3_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_USART3_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_USART3_UART_Init+0x58>)
 8000d0c:	f001 fe68 	bl	80029e0 <HAL_UART_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d16:	f7ff feed 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000033c 	.word	0x2000033c
 8000d24:	40004800 	.word	0x40004800

08000d28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0b2      	sub	sp, #200	@ 0xc8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d44:	2290      	movs	r2, #144	@ 0x90
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 f9a5 	bl	8004098 <memset>
  if(uartHandle->Instance==USART1)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a8a      	ldr	r2, [pc, #552]	@ (8000f7c <HAL_UART_MspInit+0x254>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d159      	bne.n	8000e0c <HAL_UART_MspInit+0xe4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d58:	2340      	movs	r3, #64	@ 0x40
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d64:	4618      	mov	r0, r3
 8000d66:	f001 fa13 	bl	8002190 <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d70:	f7ff fec0 	bl	8000af4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d74:	4b82      	ldr	r3, [pc, #520]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d78:	4a81      	ldr	r2, [pc, #516]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d80:	4b7f      	ldr	r3, [pc, #508]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d84:	f003 0310 	and.w	r3, r3, #16
 8000d88:	623b      	str	r3, [r7, #32]
 8000d8a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	4b7c      	ldr	r3, [pc, #496]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d90:	4a7b      	ldr	r2, [pc, #492]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000d92:	f043 0302 	orr.w	r3, r3, #2
 8000d96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d98:	4b79      	ldr	r3, [pc, #484]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000da4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000dc8:	4619      	mov	r1, r3
 8000dca:	486e      	ldr	r0, [pc, #440]	@ (8000f84 <HAL_UART_MspInit+0x25c>)
 8000dcc:	f000 fb86 	bl	80014dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dd0:	2340      	movs	r3, #64	@ 0x40
 8000dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000de8:	2307      	movs	r3, #7
 8000dea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000df2:	4619      	mov	r1, r3
 8000df4:	4863      	ldr	r0, [pc, #396]	@ (8000f84 <HAL_UART_MspInit+0x25c>)
 8000df6:	f000 fb71 	bl	80014dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2025      	movs	r0, #37	@ 0x25
 8000e00:	f000 fa2b 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e04:	2025      	movs	r0, #37	@ 0x25
 8000e06:	f000 fa44 	bl	8001292 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e0a:	e0b3      	b.n	8000f74 <HAL_UART_MspInit+0x24c>
  else if(uartHandle->Instance==USART2)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a5d      	ldr	r2, [pc, #372]	@ (8000f88 <HAL_UART_MspInit+0x260>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d164      	bne.n	8000ee0 <HAL_UART_MspInit+0x1b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e16:	2380      	movs	r3, #128	@ 0x80
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 f9b4 	bl	8002190 <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_UART_MspInit+0x10a>
      Error_Handler();
 8000e2e:	f7ff fe61 	bl	8000af4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e32:	4b53      	ldr	r3, [pc, #332]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	4a52      	ldr	r2, [pc, #328]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3e:	4b50      	ldr	r3, [pc, #320]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a4c      	ldr	r2, [pc, #304]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b4a      	ldr	r3, [pc, #296]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e62:	4b47      	ldr	r3, [pc, #284]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a46      	ldr	r2, [pc, #280]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b44      	ldr	r3, [pc, #272]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e92:	2307      	movs	r3, #7
 8000e94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	483b      	ldr	r0, [pc, #236]	@ (8000f8c <HAL_UART_MspInit+0x264>)
 8000ea0:	f000 fb1c 	bl	80014dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ea4:	2320      	movs	r3, #32
 8000ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ebc:	2307      	movs	r3, #7
 8000ebe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4831      	ldr	r0, [pc, #196]	@ (8000f90 <HAL_UART_MspInit+0x268>)
 8000eca:	f000 fb07 	bl	80014dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2026      	movs	r0, #38	@ 0x26
 8000ed4:	f000 f9c1 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ed8:	2026      	movs	r0, #38	@ 0x26
 8000eda:	f000 f9da 	bl	8001292 <HAL_NVIC_EnableIRQ>
}
 8000ede:	e049      	b.n	8000f74 <HAL_UART_MspInit+0x24c>
  else if(uartHandle->Instance==USART3)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a2b      	ldr	r2, [pc, #172]	@ (8000f94 <HAL_UART_MspInit+0x26c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d144      	bne.n	8000f74 <HAL_UART_MspInit+0x24c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 f949 	bl	8002190 <HAL_RCCEx_PeriphCLKConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8000f04:	f7ff fdf6 	bl	8000af4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f08:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000f0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f14:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f20:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f24:	4a16      	ldr	r2, [pc, #88]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000f26:	f043 0308 	orr.w	r3, r3, #8
 8000f2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2c:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <HAL_UART_MspInit+0x258>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f38:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f52:	2307      	movs	r3, #7
 8000f54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f58:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480c      	ldr	r0, [pc, #48]	@ (8000f90 <HAL_UART_MspInit+0x268>)
 8000f60:	f000 fabc 	bl	80014dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2100      	movs	r1, #0
 8000f68:	2027      	movs	r0, #39	@ 0x27
 8000f6a:	f000 f976 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f6e:	2027      	movs	r0, #39	@ 0x27
 8000f70:	f000 f98f 	bl	8001292 <HAL_NVIC_EnableIRQ>
}
 8000f74:	bf00      	nop
 8000f76:	37c8      	adds	r7, #200	@ 0xc8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40011000 	.word	0x40011000
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40004400 	.word	0x40004400
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020c00 	.word	0x40020c00
 8000f94:	40004800 	.word	0x40004800

08000f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f9c:	f7ff fe22 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa0:	480c      	ldr	r0, [pc, #48]	@ (8000fd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fa2:	490d      	ldr	r1, [pc, #52]	@ (8000fd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f003 f881 	bl	80040cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fca:	f7ff fc51 	bl	8000870 <main>
  bx  lr    
 8000fce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fd0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fdc:	080041c0 	.word	0x080041c0
  ldr r2, =_sbss
 8000fe0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fe4:	200003c8 	.word	0x200003c8

08000fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC_IRQHandler>

08000fea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fee:	2003      	movs	r0, #3
 8000ff0:	f000 f928 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff4:	200f      	movs	r0, #15
 8000ff6:	f000 f805 	bl	8001004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffa:	f7ff fd81 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_InitTick+0x54>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_InitTick+0x58>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101a:	fbb3 f3f1 	udiv	r3, r3, r1
 800101e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f943 	bl	80012ae <HAL_SYSTICK_Config>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e00e      	b.n	8001050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d80a      	bhi.n	800104e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001038:	2200      	movs	r2, #0
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f000 f90b 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001044:	4a06      	ldr	r2, [pc, #24]	@ (8001060 <HAL_InitTick+0x5c>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000068 	.word	0x20000068
 800105c:	20000070 	.word	0x20000070
 8001060:	2000006c 	.word	0x2000006c

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	@ (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000070 	.word	0x20000070
 8001088:	200003c4 	.word	0x200003c4

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	200003c4 	.word	0x200003c4

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <__NVIC_SetPriorityGrouping+0x40>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <__NVIC_SetPriorityGrouping+0x40>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00
 80010e8:	05fa0000 	.word	0x05fa0000

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4907      	ldr	r1, [pc, #28]	@ (8001140 <__NVIC_EnableIRQ+0x38>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	@ (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	@ (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	@ 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	@ 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff29 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff3e 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff8e 	bl	8001198 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff31 	bl	8001108 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa2 	bl	8001200 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012cc:	f3bf 8f5f 	dmb	sy
}
 80012d0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012d2:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <HAL_MPU_Disable+0x28>)
 80012d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d6:	4a06      	ldr	r2, [pc, #24]	@ (80012f0 <HAL_MPU_Disable+0x28>)
 80012d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012dc:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012de:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_MPU_Disable+0x2c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00
 80012f4:	e000ed90 	.word	0xe000ed90

080012f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001300:	4a0b      	ldr	r2, [pc, #44]	@ (8001330 <HAL_MPU_Enable+0x38>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800130a:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <HAL_MPU_Enable+0x3c>)
 800130c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130e:	4a09      	ldr	r2, [pc, #36]	@ (8001334 <HAL_MPU_Enable+0x3c>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001314:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001316:	f3bf 8f4f 	dsb	sy
}
 800131a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800131c:	f3bf 8f6f 	isb	sy
}
 8001320:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed90 	.word	0xe000ed90
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	785a      	ldrb	r2, [r3, #1]
 8001344:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <HAL_MPU_ConfigRegion+0x7c>)
 8001346:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001348:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <HAL_MPU_ConfigRegion+0x7c>)
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	4a19      	ldr	r2, [pc, #100]	@ (80013b4 <HAL_MPU_ConfigRegion+0x7c>)
 800134e:	f023 0301 	bic.w	r3, r3, #1
 8001352:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001354:	4a17      	ldr	r2, [pc, #92]	@ (80013b4 <HAL_MPU_ConfigRegion+0x7c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7b1b      	ldrb	r3, [r3, #12]
 8001360:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7adb      	ldrb	r3, [r3, #11]
 8001366:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001368:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7a9b      	ldrb	r3, [r3, #10]
 800136e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001370:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7b5b      	ldrb	r3, [r3, #13]
 8001376:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001378:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7b9b      	ldrb	r3, [r3, #14]
 800137e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001380:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7bdb      	ldrb	r3, [r3, #15]
 8001386:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001388:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7a5b      	ldrb	r3, [r3, #9]
 800138e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001390:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	7a1b      	ldrb	r3, [r3, #8]
 8001396:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001398:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	7812      	ldrb	r2, [r2, #0]
 800139e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013a0:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013a2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013a4:	6113      	str	r3, [r2, #16]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed90 	.word	0xe000ed90

080013b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013c6:	f7ff fe61 	bl	800108c <HAL_GetTick>
 80013ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d008      	beq.n	80013ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2280      	movs	r2, #128	@ 0x80
 80013dc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e052      	b.n	8001490 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0216 	bic.w	r2, r2, #22
 80013f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	695a      	ldr	r2, [r3, #20]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001408:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	2b00      	cmp	r3, #0
 8001410:	d103      	bne.n	800141a <HAL_DMA_Abort+0x62>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0208 	bic.w	r2, r2, #8
 8001428:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0201 	bic.w	r2, r2, #1
 8001438:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800143a:	e013      	b.n	8001464 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800143c:	f7ff fe26 	bl	800108c <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b05      	cmp	r3, #5
 8001448:	d90c      	bls.n	8001464 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2220      	movs	r2, #32
 800144e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2203      	movs	r2, #3
 8001454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e015      	b.n	8001490 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1e4      	bne.n	800143c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001476:	223f      	movs	r2, #63	@ 0x3f
 8001478:	409a      	lsls	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d004      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2280      	movs	r2, #128	@ 0x80
 80014b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00c      	b.n	80014d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2205      	movs	r2, #5
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0201 	bic.w	r2, r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	@ 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	e175      	b.n	80017e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014fc:	2201      	movs	r2, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	429a      	cmp	r2, r3
 8001516:	f040 8164 	bne.w	80017e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b01      	cmp	r3, #1
 8001524:	d005      	beq.n	8001532 <HAL_GPIO_Init+0x56>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d130      	bne.n	8001594 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	2203      	movs	r2, #3
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	f003 0201 	and.w	r2, r3, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b03      	cmp	r3, #3
 800159e:	d017      	beq.n	80015d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d123      	bne.n	8001624 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	08da      	lsrs	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3208      	adds	r2, #8
 80015e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	08da      	lsrs	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3208      	adds	r2, #8
 800161e:	69b9      	ldr	r1, [r7, #24]
 8001620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0203 	and.w	r2, r3, #3
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80be 	beq.w	80017e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	4b66      	ldr	r3, [pc, #408]	@ (8001800 <HAL_GPIO_Init+0x324>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	4a65      	ldr	r2, [pc, #404]	@ (8001800 <HAL_GPIO_Init+0x324>)
 800166c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001670:	6453      	str	r3, [r2, #68]	@ 0x44
 8001672:	4b63      	ldr	r3, [pc, #396]	@ (8001800 <HAL_GPIO_Init+0x324>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800167e:	4a61      	ldr	r2, [pc, #388]	@ (8001804 <HAL_GPIO_Init+0x328>)
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3302      	adds	r3, #2
 8001686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	220f      	movs	r2, #15
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a58      	ldr	r2, [pc, #352]	@ (8001808 <HAL_GPIO_Init+0x32c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d037      	beq.n	800171a <HAL_GPIO_Init+0x23e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a57      	ldr	r2, [pc, #348]	@ (800180c <HAL_GPIO_Init+0x330>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d031      	beq.n	8001716 <HAL_GPIO_Init+0x23a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a56      	ldr	r2, [pc, #344]	@ (8001810 <HAL_GPIO_Init+0x334>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d02b      	beq.n	8001712 <HAL_GPIO_Init+0x236>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a55      	ldr	r2, [pc, #340]	@ (8001814 <HAL_GPIO_Init+0x338>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d025      	beq.n	800170e <HAL_GPIO_Init+0x232>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a54      	ldr	r2, [pc, #336]	@ (8001818 <HAL_GPIO_Init+0x33c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d01f      	beq.n	800170a <HAL_GPIO_Init+0x22e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a53      	ldr	r2, [pc, #332]	@ (800181c <HAL_GPIO_Init+0x340>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <HAL_GPIO_Init+0x22a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a52      	ldr	r2, [pc, #328]	@ (8001820 <HAL_GPIO_Init+0x344>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0x226>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a51      	ldr	r2, [pc, #324]	@ (8001824 <HAL_GPIO_Init+0x348>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00d      	beq.n	80016fe <HAL_GPIO_Init+0x222>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a50      	ldr	r2, [pc, #320]	@ (8001828 <HAL_GPIO_Init+0x34c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x21e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4f      	ldr	r2, [pc, #316]	@ (800182c <HAL_GPIO_Init+0x350>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_GPIO_Init+0x21a>
 80016f2:	2309      	movs	r3, #9
 80016f4:	e012      	b.n	800171c <HAL_GPIO_Init+0x240>
 80016f6:	230a      	movs	r3, #10
 80016f8:	e010      	b.n	800171c <HAL_GPIO_Init+0x240>
 80016fa:	2308      	movs	r3, #8
 80016fc:	e00e      	b.n	800171c <HAL_GPIO_Init+0x240>
 80016fe:	2307      	movs	r3, #7
 8001700:	e00c      	b.n	800171c <HAL_GPIO_Init+0x240>
 8001702:	2306      	movs	r3, #6
 8001704:	e00a      	b.n	800171c <HAL_GPIO_Init+0x240>
 8001706:	2305      	movs	r3, #5
 8001708:	e008      	b.n	800171c <HAL_GPIO_Init+0x240>
 800170a:	2304      	movs	r3, #4
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x240>
 800170e:	2303      	movs	r3, #3
 8001710:	e004      	b.n	800171c <HAL_GPIO_Init+0x240>
 8001712:	2302      	movs	r3, #2
 8001714:	e002      	b.n	800171c <HAL_GPIO_Init+0x240>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_GPIO_Init+0x240>
 800171a:	2300      	movs	r3, #0
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	f002 0203 	and.w	r2, r2, #3
 8001722:	0092      	lsls	r2, r2, #2
 8001724:	4093      	lsls	r3, r2
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800172c:	4935      	ldr	r1, [pc, #212]	@ (8001804 <HAL_GPIO_Init+0x328>)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173a:	4b3d      	ldr	r3, [pc, #244]	@ (8001830 <HAL_GPIO_Init+0x354>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800175e:	4a34      	ldr	r2, [pc, #208]	@ (8001830 <HAL_GPIO_Init+0x354>)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001764:	4b32      	ldr	r3, [pc, #200]	@ (8001830 <HAL_GPIO_Init+0x354>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001788:	4a29      	ldr	r2, [pc, #164]	@ (8001830 <HAL_GPIO_Init+0x354>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800178e:	4b28      	ldr	r3, [pc, #160]	@ (8001830 <HAL_GPIO_Init+0x354>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001830 <HAL_GPIO_Init+0x354>)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <HAL_GPIO_Init+0x354>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017dc:	4a14      	ldr	r2, [pc, #80]	@ (8001830 <HAL_GPIO_Init+0x354>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3301      	adds	r3, #1
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	f67f ae86 	bls.w	80014fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3724      	adds	r7, #36	@ 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40013800 	.word	0x40013800
 8001808:	40020000 	.word	0x40020000
 800180c:	40020400 	.word	0x40020400
 8001810:	40020800 	.word	0x40020800
 8001814:	40020c00 	.word	0x40020c00
 8001818:	40021000 	.word	0x40021000
 800181c:	40021400 	.word	0x40021400
 8001820:	40021800 	.word	0x40021800
 8001824:	40021c00 	.word	0x40021c00
 8001828:	40022000 	.word	0x40022000
 800182c:	40022400 	.word	0x40022400
 8001830:	40013c00 	.word	0x40013c00

08001834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
 8001840:	4613      	mov	r3, r2
 8001842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001844:	787b      	ldrb	r3, [r7, #1]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001850:	e003      	b.n	800185a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001852:	887b      	ldrh	r3, [r7, #2]
 8001854:	041a      	lsls	r2, r3, #16
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	619a      	str	r2, [r3, #24]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e29b      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 8087 	beq.w	800199a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800188c:	4b96      	ldr	r3, [pc, #600]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b04      	cmp	r3, #4
 8001896:	d00c      	beq.n	80018b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001898:	4b93      	ldr	r3, [pc, #588]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d112      	bne.n	80018ca <HAL_RCC_OscConfig+0x62>
 80018a4:	4b90      	ldr	r3, [pc, #576]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018b0:	d10b      	bne.n	80018ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b2:	4b8d      	ldr	r3, [pc, #564]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d06c      	beq.n	8001998 <HAL_RCC_OscConfig+0x130>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d168      	bne.n	8001998 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e275      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x7a>
 80018d4:	4b84      	ldr	r3, [pc, #528]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a83      	ldr	r2, [pc, #524]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	e02e      	b.n	8001940 <HAL_RCC_OscConfig+0xd8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x9c>
 80018ea:	4b7f      	ldr	r3, [pc, #508]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a7e      	ldr	r2, [pc, #504]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a7b      	ldr	r2, [pc, #492]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e01d      	b.n	8001940 <HAL_RCC_OscConfig+0xd8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0xc0>
 800190e:	4b76      	ldr	r3, [pc, #472]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a75      	ldr	r2, [pc, #468]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001914:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b73      	ldr	r3, [pc, #460]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a72      	ldr	r2, [pc, #456]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0xd8>
 8001928:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800192e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b6c      	ldr	r3, [pc, #432]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a6b      	ldr	r2, [pc, #428]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800193a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800193e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d013      	beq.n	8001970 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fba0 	bl	800108c <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fb9c 	bl	800108c <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	@ 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e229      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	4b61      	ldr	r3, [pc, #388]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0xe8>
 800196e:	e014      	b.n	800199a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff fb8c 	bl	800108c <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fb88 	bl	800108c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	@ 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e215      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	4b57      	ldr	r3, [pc, #348]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x110>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d069      	beq.n	8001a7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019a6:	4b50      	ldr	r3, [pc, #320]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b2:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d11c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x190>
 80019be:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d116      	bne.n	80019f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	4b47      	ldr	r3, [pc, #284]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_RCC_OscConfig+0x17a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e1e9      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	4b41      	ldr	r3, [pc, #260]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	493d      	ldr	r1, [pc, #244]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	e040      	b.n	8001a7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d023      	beq.n	8001a48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a00:	4b39      	ldr	r3, [pc, #228]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a38      	ldr	r2, [pc, #224]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fb3e 	bl	800108c <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff fb3a 	bl	800108c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e1c7      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a26:	4b30      	ldr	r3, [pc, #192]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4929      	ldr	r1, [pc, #164]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
 8001a46:	e018      	b.n	8001a7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a48:	4b27      	ldr	r3, [pc, #156]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a26      	ldr	r2, [pc, #152]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff fb1a 	bl	800108c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fb16 	bl	800108c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e1a3      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d038      	beq.n	8001af8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d019      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a92:	4a15      	ldr	r2, [pc, #84]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9a:	f7ff faf7 	bl	800108c <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7ff faf3 	bl	800108c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e180      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x23a>
 8001ac0:	e01a      	b.n	8001af8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ac6:	4a08      	ldr	r2, [pc, #32]	@ (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ace:	f7ff fadd 	bl	800108c <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	e00a      	b.n	8001aec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad6:	f7ff fad9 	bl	800108c <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d903      	bls.n	8001aec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e166      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
 8001ae8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	4b92      	ldr	r3, [pc, #584]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1ee      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80a4 	beq.w	8001c4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b8c      	ldr	r3, [pc, #560]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10d      	bne.n	8001b2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	4b89      	ldr	r3, [pc, #548]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	4a88      	ldr	r2, [pc, #544]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1e:	4b86      	ldr	r3, [pc, #536]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2e:	4b83      	ldr	r3, [pc, #524]	@ (8001d3c <HAL_RCC_OscConfig+0x4d4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b3a:	4b80      	ldr	r3, [pc, #512]	@ (8001d3c <HAL_RCC_OscConfig+0x4d4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7f      	ldr	r2, [pc, #508]	@ (8001d3c <HAL_RCC_OscConfig+0x4d4>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b46:	f7ff faa1 	bl	800108c <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4e:	f7ff fa9d 	bl	800108c <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b64      	cmp	r3, #100	@ 0x64
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e12a      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b60:	4b76      	ldr	r3, [pc, #472]	@ (8001d3c <HAL_RCC_OscConfig+0x4d4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x31a>
 8001b74:	4b70      	ldr	r3, [pc, #448]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b78:	4a6f      	ldr	r2, [pc, #444]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b80:	e02d      	b.n	8001bde <HAL_RCC_OscConfig+0x376>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x33c>
 8001b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8e:	4a6a      	ldr	r2, [pc, #424]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b96:	4b68      	ldr	r3, [pc, #416]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9a:	4a67      	ldr	r2, [pc, #412]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b9c:	f023 0304 	bic.w	r3, r3, #4
 8001ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba2:	e01c      	b.n	8001bde <HAL_RCC_OscConfig+0x376>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d10c      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x35e>
 8001bac:	4b62      	ldr	r3, [pc, #392]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb0:	4a61      	ldr	r2, [pc, #388]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb8:	4b5f      	ldr	r3, [pc, #380]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bbc:	4a5e      	ldr	r2, [pc, #376]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bc4:	e00b      	b.n	8001bde <HAL_RCC_OscConfig+0x376>
 8001bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bca:	4a5b      	ldr	r2, [pc, #364]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bd2:	4b59      	ldr	r3, [pc, #356]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd6:	4a58      	ldr	r2, [pc, #352]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001bd8:	f023 0304 	bic.w	r3, r3, #4
 8001bdc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d015      	beq.n	8001c12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be6:	f7ff fa51 	bl	800108c <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff fa4d 	bl	800108c <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e0d8      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	4b4c      	ldr	r3, [pc, #304]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0ee      	beq.n	8001bee <HAL_RCC_OscConfig+0x386>
 8001c10:	e014      	b.n	8001c3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c12:	f7ff fa3b 	bl	800108c <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7ff fa37 	bl	800108c <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0c2      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c30:	4b41      	ldr	r3, [pc, #260]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1ee      	bne.n	8001c1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d105      	bne.n	8001c4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c42:	4b3d      	ldr	r3, [pc, #244]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	4a3c      	ldr	r2, [pc, #240]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001c48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c4c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80ae 	beq.w	8001db4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c58:	4b37      	ldr	r3, [pc, #220]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d06d      	beq.n	8001d40 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d14b      	bne.n	8001d04 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6c:	4b32      	ldr	r3, [pc, #200]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a31      	ldr	r2, [pc, #196]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001c72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fa08 	bl	800108c <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff fa04 	bl	800108c <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e091      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c92:	4b29      	ldr	r3, [pc, #164]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69da      	ldr	r2, [r3, #28]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cac:	019b      	lsls	r3, r3, #6
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb4:	085b      	lsrs	r3, r3, #1
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	041b      	lsls	r3, r3, #16
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc0:	061b      	lsls	r3, r3, #24
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc8:	071b      	lsls	r3, r3, #28
 8001cca:	491b      	ldr	r1, [pc, #108]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd0:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a18      	ldr	r2, [pc, #96]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f9d6 	bl	800108c <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff f9d2 	bl	800108c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e05f      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x47c>
 8001d02:	e057      	b.n	8001db4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0b      	ldr	r2, [pc, #44]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff f9bc 	bl	800108c <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f9b8 	bl	800108c <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e045      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2a:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4b0>
 8001d36:	e03d      	b.n	8001db4 <HAL_RCC_OscConfig+0x54c>
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d40:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc0 <HAL_RCC_OscConfig+0x558>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d030      	beq.n	8001db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d129      	bne.n	8001db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d122      	bne.n	8001db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d70:	4013      	ands	r3, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d119      	bne.n	8001db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d86:	085b      	lsrs	r3, r3, #1
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d10f      	bne.n	8001db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800

08001dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0d0      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d910      	bls.n	8001e0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b67      	ldr	r3, [pc, #412]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 020f 	bic.w	r2, r3, #15
 8001df2:	4965      	ldr	r1, [pc, #404]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b63      	ldr	r3, [pc, #396]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0b8      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d020      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e24:	4b59      	ldr	r3, [pc, #356]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a58      	ldr	r2, [pc, #352]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e3c:	4b53      	ldr	r3, [pc, #332]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4a52      	ldr	r2, [pc, #328]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e48:	4b50      	ldr	r3, [pc, #320]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	494d      	ldr	r1, [pc, #308]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d040      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d107      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b47      	ldr	r3, [pc, #284]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d115      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e07f      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e86:	4b41      	ldr	r3, [pc, #260]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e073      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e96:	4b3d      	ldr	r3, [pc, #244]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e06b      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea6:	4b39      	ldr	r3, [pc, #228]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f023 0203 	bic.w	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4936      	ldr	r1, [pc, #216]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb8:	f7ff f8e8 	bl	800108c <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec0:	f7ff f8e4 	bl	800108c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e053      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 020c 	and.w	r2, r3, #12
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1eb      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b27      	ldr	r3, [pc, #156]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d210      	bcs.n	8001f18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b24      	ldr	r3, [pc, #144]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 020f 	bic.w	r2, r3, #15
 8001efe:	4922      	ldr	r1, [pc, #136]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b20      	ldr	r3, [pc, #128]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e032      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f24:	4b19      	ldr	r3, [pc, #100]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4916      	ldr	r1, [pc, #88]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d009      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f42:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	490e      	ldr	r1, [pc, #56]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f56:	f000 f821 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	490a      	ldr	r1, [pc, #40]	@ (8001f90 <HAL_RCC_ClockConfig+0x1cc>)
 8001f68:	5ccb      	ldrb	r3, [r1, r3]
 8001f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6e:	4a09      	ldr	r2, [pc, #36]	@ (8001f94 <HAL_RCC_ClockConfig+0x1d0>)
 8001f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <HAL_RCC_ClockConfig+0x1d4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff f844 	bl	8001004 <HAL_InitTick>

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023c00 	.word	0x40023c00
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	08004198 	.word	0x08004198
 8001f94:	20000068 	.word	0x20000068
 8001f98:	2000006c 	.word	0x2000006c

08001f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa0:	b090      	sub	sp, #64	@ 0x40
 8001fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fa8:	2300      	movs	r3, #0
 8001faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fac:	2300      	movs	r3, #0
 8001fae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fb4:	4b59      	ldr	r3, [pc, #356]	@ (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d00d      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x40>
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	f200 80a1 	bhi.w	8002108 <HAL_RCC_GetSysClockFreq+0x16c>
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d003      	beq.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fce:	e09b      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fd0:	4b53      	ldr	r3, [pc, #332]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fd4:	e09b      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fd6:	4b53      	ldr	r3, [pc, #332]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fda:	e098      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fdc:	4b4f      	ldr	r3, [pc, #316]	@ (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fe4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001fe6:	4b4d      	ldr	r3, [pc, #308]	@ (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d028      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	099b      	lsrs	r3, r3, #6
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	623b      	str	r3, [r7, #32]
 8001ffc:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002004:	2100      	movs	r1, #0
 8002006:	4b47      	ldr	r3, [pc, #284]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x188>)
 8002008:	fb03 f201 	mul.w	r2, r3, r1
 800200c:	2300      	movs	r3, #0
 800200e:	fb00 f303 	mul.w	r3, r0, r3
 8002012:	4413      	add	r3, r2
 8002014:	4a43      	ldr	r2, [pc, #268]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x188>)
 8002016:	fba0 1202 	umull	r1, r2, r0, r2
 800201a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800201c:	460a      	mov	r2, r1
 800201e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002022:	4413      	add	r3, r2
 8002024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002028:	2200      	movs	r2, #0
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	61fa      	str	r2, [r7, #28]
 800202e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002032:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002036:	f7fe f907 	bl	8000248 <__aeabi_uldivmod>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4613      	mov	r3, r2
 8002040:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002042:	e053      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002044:	4b35      	ldr	r3, [pc, #212]	@ (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	2200      	movs	r2, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	617a      	str	r2, [r7, #20]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002056:	f04f 0b00 	mov.w	fp, #0
 800205a:	4652      	mov	r2, sl
 800205c:	465b      	mov	r3, fp
 800205e:	f04f 0000 	mov.w	r0, #0
 8002062:	f04f 0100 	mov.w	r1, #0
 8002066:	0159      	lsls	r1, r3, #5
 8002068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800206c:	0150      	lsls	r0, r2, #5
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	ebb2 080a 	subs.w	r8, r2, sl
 8002076:	eb63 090b 	sbc.w	r9, r3, fp
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002086:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800208a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800208e:	ebb2 0408 	subs.w	r4, r2, r8
 8002092:	eb63 0509 	sbc.w	r5, r3, r9
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	00eb      	lsls	r3, r5, #3
 80020a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020a4:	00e2      	lsls	r2, r4, #3
 80020a6:	4614      	mov	r4, r2
 80020a8:	461d      	mov	r5, r3
 80020aa:	eb14 030a 	adds.w	r3, r4, sl
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	eb45 030b 	adc.w	r3, r5, fp
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020c2:	4629      	mov	r1, r5
 80020c4:	028b      	lsls	r3, r1, #10
 80020c6:	4621      	mov	r1, r4
 80020c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020cc:	4621      	mov	r1, r4
 80020ce:	028a      	lsls	r2, r1, #10
 80020d0:	4610      	mov	r0, r2
 80020d2:	4619      	mov	r1, r3
 80020d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d6:	2200      	movs	r2, #0
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	60fa      	str	r2, [r7, #12]
 80020dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020e0:	f7fe f8b2 	bl	8000248 <__aeabi_uldivmod>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4613      	mov	r3, r2
 80020ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	3301      	adds	r3, #1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80020fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002106:	e002      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002108:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x184>)
 800210a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800210c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002110:	4618      	mov	r0, r3
 8002112:	3740      	adds	r7, #64	@ 0x40
 8002114:	46bd      	mov	sp, r7
 8002116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	00f42400 	.word	0x00f42400
 8002124:	017d7840 	.word	0x017d7840

08002128 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800212c:	4b03      	ldr	r3, [pc, #12]	@ (800213c <HAL_RCC_GetHCLKFreq+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000068 	.word	0x20000068

08002140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002144:	f7ff fff0 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	0a9b      	lsrs	r3, r3, #10
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4903      	ldr	r1, [pc, #12]	@ (8002164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	080041a8 	.word	0x080041a8

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800216c:	f7ff ffdc 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0b5b      	lsrs	r3, r3, #13
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4903      	ldr	r1, [pc, #12]	@ (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	080041a8 	.word	0x080041a8

08002190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d012      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021b8:	4b69      	ldr	r3, [pc, #420]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4a68      	ldr	r2, [pc, #416]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021be:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80021c2:	6093      	str	r3, [r2, #8]
 80021c4:	4b66      	ldr	r3, [pc, #408]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021cc:	4964      	ldr	r1, [pc, #400]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80021da:	2301      	movs	r3, #1
 80021dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d017      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021f0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f8:	4959      	ldr	r1, [pc, #356]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002204:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002208:	d101      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800220a:	2301      	movs	r3, #1
 800220c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002216:	2301      	movs	r3, #1
 8002218:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d017      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002226:	4b4e      	ldr	r3, [pc, #312]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002228:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800222c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002234:	494a      	ldr	r1, [pc, #296]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002244:	d101      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002246:	2301      	movs	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002252:	2301      	movs	r3, #1
 8002254:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002262:	2301      	movs	r3, #1
 8002264:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 808b 	beq.w	800238a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002274:	4b3a      	ldr	r3, [pc, #232]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	4a39      	ldr	r2, [pc, #228]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800227a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800227e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002280:	4b37      	ldr	r3, [pc, #220]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800228c:	4b35      	ldr	r3, [pc, #212]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a34      	ldr	r2, [pc, #208]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002298:	f7fe fef8 	bl	800108c <HAL_GetTick>
 800229c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a0:	f7fe fef4 	bl	800108c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	@ 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e38f      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80022b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022be:	4b28      	ldr	r3, [pc, #160]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d035      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d02e      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022dc:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80022fe:	4a18      	ldr	r2, [pc, #96]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002304:	4b16      	ldr	r3, [pc, #88]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d114      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe febc 	bl	800108c <HAL_GetTick>
 8002314:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002316:	e00a      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f7fe feb8 	bl	800108c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e351      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232e:	4b0c      	ldr	r3, [pc, #48]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0ee      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002342:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002346:	d111      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002348:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002354:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002356:	400b      	ands	r3, r1
 8002358:	4901      	ldr	r1, [pc, #4]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
 800235e:	e00b      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002360:	40023800 	.word	0x40023800
 8002364:	40007000 	.word	0x40007000
 8002368:	0ffffcff 	.word	0x0ffffcff
 800236c:	4bac      	ldr	r3, [pc, #688]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4aab      	ldr	r2, [pc, #684]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002372:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002376:	6093      	str	r3, [r2, #8]
 8002378:	4ba9      	ldr	r3, [pc, #676]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800237a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002384:	49a6      	ldr	r1, [pc, #664]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002386:	4313      	orrs	r3, r2
 8002388:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b00      	cmp	r3, #0
 8002394:	d010      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002396:	4ba2      	ldr	r3, [pc, #648]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800239c:	4aa0      	ldr	r2, [pc, #640]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800239e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023a6:	4b9e      	ldr	r3, [pc, #632]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b0:	499b      	ldr	r1, [pc, #620]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c4:	4b96      	ldr	r3, [pc, #600]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023d2:	4993      	ldr	r1, [pc, #588]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023e6:	4b8e      	ldr	r3, [pc, #568]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023f4:	498a      	ldr	r1, [pc, #552]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002408:	4b85      	ldr	r3, [pc, #532]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002416:	4982      	ldr	r1, [pc, #520]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800242a:	4b7d      	ldr	r3, [pc, #500]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002430:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002438:	4979      	ldr	r1, [pc, #484]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800244c:	4b74      	ldr	r3, [pc, #464]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245a:	4971      	ldr	r1, [pc, #452]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800246e:	4b6c      	ldr	r3, [pc, #432]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002474:	f023 020c 	bic.w	r2, r3, #12
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800247c:	4968      	ldr	r1, [pc, #416]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002490:	4b63      	ldr	r3, [pc, #396]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002496:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	4960      	ldr	r1, [pc, #384]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c0:	4957      	ldr	r1, [pc, #348]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024d4:	4b52      	ldr	r3, [pc, #328]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e2:	494f      	ldr	r1, [pc, #316]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80024f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002504:	4946      	ldr	r1, [pc, #280]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002518:	4b41      	ldr	r3, [pc, #260]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002526:	493e      	ldr	r1, [pc, #248]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800253a:	4b39      	ldr	r3, [pc, #228]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002540:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002548:	4935      	ldr	r1, [pc, #212]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800255c:	4b30      	ldr	r3, [pc, #192]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002562:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800256a:	492d      	ldr	r1, [pc, #180]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d011      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800257e:	4b28      	ldr	r3, [pc, #160]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002584:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800258c:	4924      	ldr	r1, [pc, #144]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002598:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800259c:	d101      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025be:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025cc:	4914      	ldr	r1, [pc, #80]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00b      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025f0:	490b      	ldr	r1, [pc, #44]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00f      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002604:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002614:	4902      	ldr	r1, [pc, #8]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800261c:	e002      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00b      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002630:	4b8a      	ldr	r3, [pc, #552]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002636:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002640:	4986      	ldr	r1, [pc, #536]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00b      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002654:	4b81      	ldr	r3, [pc, #516]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800265a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002664:	497d      	ldr	r1, [pc, #500]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d006      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 80d6 	beq.w	800282c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002680:	4b76      	ldr	r3, [pc, #472]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a75      	ldr	r2, [pc, #468]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002686:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800268a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800268c:	f7fe fcfe 	bl	800108c <HAL_GetTick>
 8002690:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002694:	f7fe fcfa 	bl	800108c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	@ 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e195      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026a6:	4b6d      	ldr	r3, [pc, #436]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d021      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d11d      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026c6:	4b65      	ldr	r3, [pc, #404]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026d4:	4b61      	ldr	r3, [pc, #388]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026da:	0e1b      	lsrs	r3, r3, #24
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	019a      	lsls	r2, r3, #6
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	431a      	orrs	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	071b      	lsls	r3, r3, #28
 80026fa:	4958      	ldr	r1, [pc, #352]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d004      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002720:	2b00      	cmp	r3, #0
 8002722:	d02e      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800272c:	d129      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800272e:	4b4b      	ldr	r3, [pc, #300]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002730:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800273c:	4b47      	ldr	r3, [pc, #284]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800273e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002742:	0f1b      	lsrs	r3, r3, #28
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	019a      	lsls	r2, r3, #6
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	041b      	lsls	r3, r3, #16
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	061b      	lsls	r3, r3, #24
 800275c:	431a      	orrs	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	071b      	lsls	r3, r3, #28
 8002762:	493e      	ldr	r1, [pc, #248]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800276a:	4b3c      	ldr	r3, [pc, #240]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800276c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002770:	f023 021f 	bic.w	r2, r3, #31
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	3b01      	subs	r3, #1
 800277a:	4938      	ldr	r1, [pc, #224]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01d      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800278e:	4b33      	ldr	r3, [pc, #204]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002794:	0e1b      	lsrs	r3, r3, #24
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800279c:	4b2f      	ldr	r3, [pc, #188]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800279e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027a2:	0f1b      	lsrs	r3, r3, #28
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	019a      	lsls	r2, r3, #6
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	431a      	orrs	r2, r3
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	061b      	lsls	r3, r3, #24
 80027bc:	431a      	orrs	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	071b      	lsls	r3, r3, #28
 80027c2:	4926      	ldr	r1, [pc, #152]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d011      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	019a      	lsls	r2, r3, #6
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	071b      	lsls	r3, r3, #28
 80027f2:	491a      	ldr	r1, [pc, #104]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027fa:	4b18      	ldr	r3, [pc, #96]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a17      	ldr	r2, [pc, #92]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002800:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002806:	f7fe fc41 	bl	800108c <HAL_GetTick>
 800280a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800280e:	f7fe fc3d 	bl	800108c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b64      	cmp	r3, #100	@ 0x64
 800281a:	d901      	bls.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e0d8      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002820:	4b0e      	ldr	r3, [pc, #56]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b01      	cmp	r3, #1
 8002830:	f040 80ce 	bne.w	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002834:	4b09      	ldr	r3, [pc, #36]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a08      	ldr	r2, [pc, #32]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800283a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800283e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002840:	f7fe fc24 	bl	800108c <HAL_GetTick>
 8002844:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002846:	e00b      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002848:	f7fe fc20 	bl	800108c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	@ 0x64
 8002854:	d904      	bls.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e0bb      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002860:	4b5e      	ldr	r3, [pc, #376]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800286c:	d0ec      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800288a:	2b00      	cmp	r3, #0
 800288c:	d02e      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d12a      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002896:	4b51      	ldr	r3, [pc, #324]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028a4:	4b4d      	ldr	r3, [pc, #308]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028aa:	0f1b      	lsrs	r3, r3, #28
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	019a      	lsls	r2, r3, #6
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	041b      	lsls	r3, r3, #16
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	061b      	lsls	r3, r3, #24
 80028c4:	431a      	orrs	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	071b      	lsls	r3, r3, #28
 80028ca:	4944      	ldr	r1, [pc, #272]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028d2:	4b42      	ldr	r3, [pc, #264]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e0:	3b01      	subs	r3, #1
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	493d      	ldr	r1, [pc, #244]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d022      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002900:	d11d      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002902:	4b36      	ldr	r3, [pc, #216]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002908:	0e1b      	lsrs	r3, r3, #24
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002910:	4b32      	ldr	r3, [pc, #200]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002916:	0f1b      	lsrs	r3, r3, #28
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	019a      	lsls	r2, r3, #6
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	041b      	lsls	r3, r3, #16
 800292a:	431a      	orrs	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	061b      	lsls	r3, r3, #24
 8002930:	431a      	orrs	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	071b      	lsls	r3, r3, #28
 8002936:	4929      	ldr	r1, [pc, #164]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d028      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800294a:	4b24      	ldr	r3, [pc, #144]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002950:	0e1b      	lsrs	r3, r3, #24
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002958:	4b20      	ldr	r3, [pc, #128]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295e:	0c1b      	lsrs	r3, r3, #16
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	019a      	lsls	r2, r3, #6
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	431a      	orrs	r2, r3
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	071b      	lsls	r3, r3, #28
 800297e:	4917      	ldr	r1, [pc, #92]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002988:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800298c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002994:	4911      	ldr	r1, [pc, #68]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800299c:	4b0f      	ldr	r3, [pc, #60]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0e      	ldr	r2, [pc, #56]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a8:	f7fe fb70 	bl	800108c <HAL_GetTick>
 80029ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029b0:	f7fe fb6c 	bl	800108c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	@ 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e007      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029c2:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029ce:	d1ef      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800

080029e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e040      	b.n	8002a74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fe f990 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2224      	movs	r2, #36	@ 0x24
 8002a0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fe6c 	bl	8003704 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fc05 	bl	800323c <UART_SetConfig>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e01b      	b.n	8002a74 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 feeb 	bl	8003848 <UART_CheckIdleState>
 8002a72:	4603      	mov	r3, r0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	@ 0x28
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d177      	bne.n	8002b84 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_UART_Transmit+0x24>
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e070      	b.n	8002b86 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2221      	movs	r2, #33	@ 0x21
 8002ab0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ab2:	f7fe faeb 	bl	800108c <HAL_GetTick>
 8002ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	88fa      	ldrh	r2, [r7, #6]
 8002abc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	88fa      	ldrh	r2, [r7, #6]
 8002ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ad0:	d108      	bne.n	8002ae4 <HAL_UART_Transmit+0x68>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d104      	bne.n	8002ae4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	e003      	b.n	8002aec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002aec:	e02f      	b.n	8002b4e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2200      	movs	r2, #0
 8002af6:	2180      	movs	r1, #128	@ 0x80
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 ff4d 	bl	8003998 <UART_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d004      	beq.n	8002b0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e03b      	b.n	8002b86 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b22:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	3302      	adds	r3, #2
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	e007      	b.n	8002b3c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	781a      	ldrb	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1c9      	bne.n	8002aee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2200      	movs	r2, #0
 8002b62:	2140      	movs	r1, #64	@ 0x40
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 ff17 	bl	8003998 <UART_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e005      	b.n	8002b86 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	e000      	b.n	8002b86 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002b84:	2302      	movs	r3, #2
  }
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b08a      	sub	sp, #40	@ 0x28
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ba2:	2b20      	cmp	r3, #32
 8002ba4:	d132      	bne.n	8002c0c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <HAL_UART_Receive_IT+0x24>
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e02b      	b.n	8002c0e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d018      	beq.n	8002bfc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	e853 3f00 	ldrex	r3, [r3]
 8002bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	623b      	str	r3, [r7, #32]
 8002bea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bec:	69f9      	ldr	r1, [r7, #28]
 8002bee:	6a3a      	ldr	r2, [r7, #32]
 8002bf0:	e841 2300 	strex	r3, r2, [r1]
 8002bf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e6      	bne.n	8002bca <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 ff36 	bl	8003a74 <UART_Start_Receive_IT>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	e000      	b.n	8002c0e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
  }
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3728      	adds	r7, #40	@ 0x28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b0ba      	sub	sp, #232	@ 0xe8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002c42:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002c46:	4013      	ands	r3, r2
 8002c48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002c4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d115      	bne.n	8002c80 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00f      	beq.n	8002c80 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d009      	beq.n	8002c80 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 82ac 	beq.w	80031ce <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	4798      	blx	r3
      }
      return;
 8002c7e:	e2a6      	b.n	80031ce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8117 	beq.w	8002eb8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002c9a:	4b85      	ldr	r3, [pc, #532]	@ (8002eb0 <HAL_UART_IRQHandler+0x298>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 810a 	beq.w	8002eb8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d011      	beq.n	8002cd4 <HAL_UART_IRQHandler+0xbc>
 8002cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cca:	f043 0201 	orr.w	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d011      	beq.n	8002d04 <HAL_UART_IRQHandler+0xec>
 8002ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00b      	beq.n	8002d04 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cfa:	f043 0204 	orr.w	r2, r3, #4
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d011      	beq.n	8002d34 <HAL_UART_IRQHandler+0x11c>
 8002d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2204      	movs	r2, #4
 8002d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d2a:	f043 0202 	orr.w	r2, r3, #2
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d017      	beq.n	8002d70 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d105      	bne.n	8002d58 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d66:	f043 0208 	orr.w	r2, r3, #8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d012      	beq.n	8002da2 <HAL_UART_IRQHandler+0x18a>
 8002d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00c      	beq.n	8002da2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d98:	f043 0220 	orr.w	r2, r3, #32
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8212 	beq.w	80031d2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00d      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d007      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ddc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dea:	2b40      	cmp	r3, #64	@ 0x40
 8002dec:	d005      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002df2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d04f      	beq.n	8002e9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 ff00 	bl	8003c00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e0a:	2b40      	cmp	r3, #64	@ 0x40
 8002e0c:	d141      	bne.n	8002e92 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3308      	adds	r3, #8
 8002e14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e1c:	e853 3f00 	ldrex	r3, [r3]
 8002e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3308      	adds	r3, #8
 8002e36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e4a:	e841 2300 	strex	r3, r2, [r1]
 8002e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1d9      	bne.n	8002e0e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d013      	beq.n	8002e8a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e66:	4a13      	ldr	r2, [pc, #76]	@ (8002eb4 <HAL_UART_IRQHandler+0x29c>)
 8002e68:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe fb12 	bl	8001498 <HAL_DMA_Abort_IT>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d017      	beq.n	8002eaa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e84:	4610      	mov	r0, r2
 8002e86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e88:	e00f      	b.n	8002eaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f9b6 	bl	80031fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e90:	e00b      	b.n	8002eaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f9b2 	bl	80031fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e98:	e007      	b.n	8002eaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f9ae 	bl	80031fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002ea8:	e193      	b.n	80031d2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eaa:	bf00      	nop
    return;
 8002eac:	e191      	b.n	80031d2 <HAL_UART_IRQHandler+0x5ba>
 8002eae:	bf00      	nop
 8002eb0:	04000120 	.word	0x04000120
 8002eb4:	08003cc9 	.word	0x08003cc9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	f040 814c 	bne.w	800315a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8145 	beq.w	800315a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 813e 	beq.w	800315a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2210      	movs	r2, #16
 8002ee4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef0:	2b40      	cmp	r3, #64	@ 0x40
 8002ef2:	f040 80b6 	bne.w	8003062 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 8165 	beq.w	80031d6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f16:	429a      	cmp	r2, r3
 8002f18:	f080 815d 	bcs.w	80031d6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f30:	f000 8086 	beq.w	8003040 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f40:	e853 3f00 	ldrex	r3, [r3]
 8002f44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f62:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1da      	bne.n	8002f34 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3308      	adds	r3, #8
 8002f84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f88:	e853 3f00 	ldrex	r3, [r3]
 8002f8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002f8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fa2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002fa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e1      	bne.n	8002f7e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3308      	adds	r3, #8
 8002fc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fc4:	e853 3f00 	ldrex	r3, [r3]
 8002fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002fca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3308      	adds	r3, #8
 8002fda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002fde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002fe4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002fec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1e3      	bne.n	8002fba <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800300e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003010:	f023 0310 	bic.w	r3, r3, #16
 8003014:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003022:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003024:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003026:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003028:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800302a:	e841 2300 	strex	r3, r2, [r1]
 800302e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1e4      	bne.n	8003000 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe f9bc 	bl	80013b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003052:	b29b      	uxth	r3, r3
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	b29b      	uxth	r3, r3
 8003058:	4619      	mov	r1, r3
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f8d8 	bl	8003210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003060:	e0b9      	b.n	80031d6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800306e:	b29b      	uxth	r3, r3
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 80ab 	beq.w	80031da <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80a6 	beq.w	80031da <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003096:	e853 3f00 	ldrex	r3, [r3]
 800309a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800309c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800309e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80030b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80030b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030b8:	e841 2300 	strex	r3, r2, [r1]
 80030bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e4      	bne.n	800308e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3308      	adds	r3, #8
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	e853 3f00 	ldrex	r3, [r3]
 80030d2:	623b      	str	r3, [r7, #32]
   return(result);
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3308      	adds	r3, #8
 80030e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80030e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80030ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030f0:	e841 2300 	strex	r3, r2, [r1]
 80030f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e3      	bne.n	80030c4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	60fb      	str	r3, [r7, #12]
   return(result);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f023 0310 	bic.w	r3, r3, #16
 8003124:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003136:	69b9      	ldr	r1, [r7, #24]
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	617b      	str	r3, [r7, #20]
   return(result);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1e4      	bne.n	8003110 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800314c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003150:	4619      	mov	r1, r3
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f85c 	bl	8003210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003158:	e03f      	b.n	80031da <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800315a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800315e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00e      	beq.n	8003184 <HAL_UART_IRQHandler+0x56c>
 8003166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800316a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800317a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f853 	bl	8003228 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003182:	e02d      	b.n	80031e0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00e      	beq.n	80031ae <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01c      	beq.n	80031de <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
    }
    return;
 80031ac:	e017      	b.n	80031de <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d012      	beq.n	80031e0 <HAL_UART_IRQHandler+0x5c8>
 80031ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fd94 	bl	8003cf4 <UART_EndTransmit_IT>
    return;
 80031cc:	e008      	b.n	80031e0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80031ce:	bf00      	nop
 80031d0:	e006      	b.n	80031e0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80031d2:	bf00      	nop
 80031d4:	e004      	b.n	80031e0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80031d6:	bf00      	nop
 80031d8:	e002      	b.n	80031e0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80031da:	bf00      	nop
 80031dc:	e000      	b.n	80031e0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80031de:	bf00      	nop
  }

}
 80031e0:	37e8      	adds	r7, #232	@ 0xe8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop

080031e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	4ba6      	ldr	r3, [pc, #664]	@ (8003500 <UART_SetConfig+0x2c4>)
 8003268:	4013      	ands	r3, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	6979      	ldr	r1, [r7, #20]
 8003270:	430b      	orrs	r3, r1
 8003272:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a94      	ldr	r2, [pc, #592]	@ (8003504 <UART_SetConfig+0x2c8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d120      	bne.n	80032fa <UART_SetConfig+0xbe>
 80032b8:	4b93      	ldr	r3, [pc, #588]	@ (8003508 <UART_SetConfig+0x2cc>)
 80032ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d816      	bhi.n	80032f4 <UART_SetConfig+0xb8>
 80032c6:	a201      	add	r2, pc, #4	@ (adr r2, 80032cc <UART_SetConfig+0x90>)
 80032c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032cc:	080032dd 	.word	0x080032dd
 80032d0:	080032e9 	.word	0x080032e9
 80032d4:	080032e3 	.word	0x080032e3
 80032d8:	080032ef 	.word	0x080032ef
 80032dc:	2301      	movs	r3, #1
 80032de:	77fb      	strb	r3, [r7, #31]
 80032e0:	e150      	b.n	8003584 <UART_SetConfig+0x348>
 80032e2:	2302      	movs	r3, #2
 80032e4:	77fb      	strb	r3, [r7, #31]
 80032e6:	e14d      	b.n	8003584 <UART_SetConfig+0x348>
 80032e8:	2304      	movs	r3, #4
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	e14a      	b.n	8003584 <UART_SetConfig+0x348>
 80032ee:	2308      	movs	r3, #8
 80032f0:	77fb      	strb	r3, [r7, #31]
 80032f2:	e147      	b.n	8003584 <UART_SetConfig+0x348>
 80032f4:	2310      	movs	r3, #16
 80032f6:	77fb      	strb	r3, [r7, #31]
 80032f8:	e144      	b.n	8003584 <UART_SetConfig+0x348>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a83      	ldr	r2, [pc, #524]	@ (800350c <UART_SetConfig+0x2d0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d132      	bne.n	800336a <UART_SetConfig+0x12e>
 8003304:	4b80      	ldr	r3, [pc, #512]	@ (8003508 <UART_SetConfig+0x2cc>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d828      	bhi.n	8003364 <UART_SetConfig+0x128>
 8003312:	a201      	add	r2, pc, #4	@ (adr r2, 8003318 <UART_SetConfig+0xdc>)
 8003314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003318:	0800334d 	.word	0x0800334d
 800331c:	08003365 	.word	0x08003365
 8003320:	08003365 	.word	0x08003365
 8003324:	08003365 	.word	0x08003365
 8003328:	08003359 	.word	0x08003359
 800332c:	08003365 	.word	0x08003365
 8003330:	08003365 	.word	0x08003365
 8003334:	08003365 	.word	0x08003365
 8003338:	08003353 	.word	0x08003353
 800333c:	08003365 	.word	0x08003365
 8003340:	08003365 	.word	0x08003365
 8003344:	08003365 	.word	0x08003365
 8003348:	0800335f 	.word	0x0800335f
 800334c:	2300      	movs	r3, #0
 800334e:	77fb      	strb	r3, [r7, #31]
 8003350:	e118      	b.n	8003584 <UART_SetConfig+0x348>
 8003352:	2302      	movs	r3, #2
 8003354:	77fb      	strb	r3, [r7, #31]
 8003356:	e115      	b.n	8003584 <UART_SetConfig+0x348>
 8003358:	2304      	movs	r3, #4
 800335a:	77fb      	strb	r3, [r7, #31]
 800335c:	e112      	b.n	8003584 <UART_SetConfig+0x348>
 800335e:	2308      	movs	r3, #8
 8003360:	77fb      	strb	r3, [r7, #31]
 8003362:	e10f      	b.n	8003584 <UART_SetConfig+0x348>
 8003364:	2310      	movs	r3, #16
 8003366:	77fb      	strb	r3, [r7, #31]
 8003368:	e10c      	b.n	8003584 <UART_SetConfig+0x348>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a68      	ldr	r2, [pc, #416]	@ (8003510 <UART_SetConfig+0x2d4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d120      	bne.n	80033b6 <UART_SetConfig+0x17a>
 8003374:	4b64      	ldr	r3, [pc, #400]	@ (8003508 <UART_SetConfig+0x2cc>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800337e:	2b30      	cmp	r3, #48	@ 0x30
 8003380:	d013      	beq.n	80033aa <UART_SetConfig+0x16e>
 8003382:	2b30      	cmp	r3, #48	@ 0x30
 8003384:	d814      	bhi.n	80033b0 <UART_SetConfig+0x174>
 8003386:	2b20      	cmp	r3, #32
 8003388:	d009      	beq.n	800339e <UART_SetConfig+0x162>
 800338a:	2b20      	cmp	r3, #32
 800338c:	d810      	bhi.n	80033b0 <UART_SetConfig+0x174>
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <UART_SetConfig+0x15c>
 8003392:	2b10      	cmp	r3, #16
 8003394:	d006      	beq.n	80033a4 <UART_SetConfig+0x168>
 8003396:	e00b      	b.n	80033b0 <UART_SetConfig+0x174>
 8003398:	2300      	movs	r3, #0
 800339a:	77fb      	strb	r3, [r7, #31]
 800339c:	e0f2      	b.n	8003584 <UART_SetConfig+0x348>
 800339e:	2302      	movs	r3, #2
 80033a0:	77fb      	strb	r3, [r7, #31]
 80033a2:	e0ef      	b.n	8003584 <UART_SetConfig+0x348>
 80033a4:	2304      	movs	r3, #4
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e0ec      	b.n	8003584 <UART_SetConfig+0x348>
 80033aa:	2308      	movs	r3, #8
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	e0e9      	b.n	8003584 <UART_SetConfig+0x348>
 80033b0:	2310      	movs	r3, #16
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e0e6      	b.n	8003584 <UART_SetConfig+0x348>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a56      	ldr	r2, [pc, #344]	@ (8003514 <UART_SetConfig+0x2d8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d120      	bne.n	8003402 <UART_SetConfig+0x1c6>
 80033c0:	4b51      	ldr	r3, [pc, #324]	@ (8003508 <UART_SetConfig+0x2cc>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80033ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80033cc:	d013      	beq.n	80033f6 <UART_SetConfig+0x1ba>
 80033ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80033d0:	d814      	bhi.n	80033fc <UART_SetConfig+0x1c0>
 80033d2:	2b80      	cmp	r3, #128	@ 0x80
 80033d4:	d009      	beq.n	80033ea <UART_SetConfig+0x1ae>
 80033d6:	2b80      	cmp	r3, #128	@ 0x80
 80033d8:	d810      	bhi.n	80033fc <UART_SetConfig+0x1c0>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <UART_SetConfig+0x1a8>
 80033de:	2b40      	cmp	r3, #64	@ 0x40
 80033e0:	d006      	beq.n	80033f0 <UART_SetConfig+0x1b4>
 80033e2:	e00b      	b.n	80033fc <UART_SetConfig+0x1c0>
 80033e4:	2300      	movs	r3, #0
 80033e6:	77fb      	strb	r3, [r7, #31]
 80033e8:	e0cc      	b.n	8003584 <UART_SetConfig+0x348>
 80033ea:	2302      	movs	r3, #2
 80033ec:	77fb      	strb	r3, [r7, #31]
 80033ee:	e0c9      	b.n	8003584 <UART_SetConfig+0x348>
 80033f0:	2304      	movs	r3, #4
 80033f2:	77fb      	strb	r3, [r7, #31]
 80033f4:	e0c6      	b.n	8003584 <UART_SetConfig+0x348>
 80033f6:	2308      	movs	r3, #8
 80033f8:	77fb      	strb	r3, [r7, #31]
 80033fa:	e0c3      	b.n	8003584 <UART_SetConfig+0x348>
 80033fc:	2310      	movs	r3, #16
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e0c0      	b.n	8003584 <UART_SetConfig+0x348>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a44      	ldr	r2, [pc, #272]	@ (8003518 <UART_SetConfig+0x2dc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d125      	bne.n	8003458 <UART_SetConfig+0x21c>
 800340c:	4b3e      	ldr	r3, [pc, #248]	@ (8003508 <UART_SetConfig+0x2cc>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003416:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800341a:	d017      	beq.n	800344c <UART_SetConfig+0x210>
 800341c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003420:	d817      	bhi.n	8003452 <UART_SetConfig+0x216>
 8003422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003426:	d00b      	beq.n	8003440 <UART_SetConfig+0x204>
 8003428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800342c:	d811      	bhi.n	8003452 <UART_SetConfig+0x216>
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <UART_SetConfig+0x1fe>
 8003432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003436:	d006      	beq.n	8003446 <UART_SetConfig+0x20a>
 8003438:	e00b      	b.n	8003452 <UART_SetConfig+0x216>
 800343a:	2300      	movs	r3, #0
 800343c:	77fb      	strb	r3, [r7, #31]
 800343e:	e0a1      	b.n	8003584 <UART_SetConfig+0x348>
 8003440:	2302      	movs	r3, #2
 8003442:	77fb      	strb	r3, [r7, #31]
 8003444:	e09e      	b.n	8003584 <UART_SetConfig+0x348>
 8003446:	2304      	movs	r3, #4
 8003448:	77fb      	strb	r3, [r7, #31]
 800344a:	e09b      	b.n	8003584 <UART_SetConfig+0x348>
 800344c:	2308      	movs	r3, #8
 800344e:	77fb      	strb	r3, [r7, #31]
 8003450:	e098      	b.n	8003584 <UART_SetConfig+0x348>
 8003452:	2310      	movs	r3, #16
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e095      	b.n	8003584 <UART_SetConfig+0x348>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a2f      	ldr	r2, [pc, #188]	@ (800351c <UART_SetConfig+0x2e0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d125      	bne.n	80034ae <UART_SetConfig+0x272>
 8003462:	4b29      	ldr	r3, [pc, #164]	@ (8003508 <UART_SetConfig+0x2cc>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003468:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800346c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003470:	d017      	beq.n	80034a2 <UART_SetConfig+0x266>
 8003472:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003476:	d817      	bhi.n	80034a8 <UART_SetConfig+0x26c>
 8003478:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800347c:	d00b      	beq.n	8003496 <UART_SetConfig+0x25a>
 800347e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003482:	d811      	bhi.n	80034a8 <UART_SetConfig+0x26c>
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <UART_SetConfig+0x254>
 8003488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800348c:	d006      	beq.n	800349c <UART_SetConfig+0x260>
 800348e:	e00b      	b.n	80034a8 <UART_SetConfig+0x26c>
 8003490:	2301      	movs	r3, #1
 8003492:	77fb      	strb	r3, [r7, #31]
 8003494:	e076      	b.n	8003584 <UART_SetConfig+0x348>
 8003496:	2302      	movs	r3, #2
 8003498:	77fb      	strb	r3, [r7, #31]
 800349a:	e073      	b.n	8003584 <UART_SetConfig+0x348>
 800349c:	2304      	movs	r3, #4
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e070      	b.n	8003584 <UART_SetConfig+0x348>
 80034a2:	2308      	movs	r3, #8
 80034a4:	77fb      	strb	r3, [r7, #31]
 80034a6:	e06d      	b.n	8003584 <UART_SetConfig+0x348>
 80034a8:	2310      	movs	r3, #16
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e06a      	b.n	8003584 <UART_SetConfig+0x348>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003520 <UART_SetConfig+0x2e4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d138      	bne.n	800352a <UART_SetConfig+0x2ee>
 80034b8:	4b13      	ldr	r3, [pc, #76]	@ (8003508 <UART_SetConfig+0x2cc>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034be:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80034c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034c6:	d017      	beq.n	80034f8 <UART_SetConfig+0x2bc>
 80034c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034cc:	d82a      	bhi.n	8003524 <UART_SetConfig+0x2e8>
 80034ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034d2:	d00b      	beq.n	80034ec <UART_SetConfig+0x2b0>
 80034d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034d8:	d824      	bhi.n	8003524 <UART_SetConfig+0x2e8>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <UART_SetConfig+0x2aa>
 80034de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e2:	d006      	beq.n	80034f2 <UART_SetConfig+0x2b6>
 80034e4:	e01e      	b.n	8003524 <UART_SetConfig+0x2e8>
 80034e6:	2300      	movs	r3, #0
 80034e8:	77fb      	strb	r3, [r7, #31]
 80034ea:	e04b      	b.n	8003584 <UART_SetConfig+0x348>
 80034ec:	2302      	movs	r3, #2
 80034ee:	77fb      	strb	r3, [r7, #31]
 80034f0:	e048      	b.n	8003584 <UART_SetConfig+0x348>
 80034f2:	2304      	movs	r3, #4
 80034f4:	77fb      	strb	r3, [r7, #31]
 80034f6:	e045      	b.n	8003584 <UART_SetConfig+0x348>
 80034f8:	2308      	movs	r3, #8
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e042      	b.n	8003584 <UART_SetConfig+0x348>
 80034fe:	bf00      	nop
 8003500:	efff69f3 	.word	0xefff69f3
 8003504:	40011000 	.word	0x40011000
 8003508:	40023800 	.word	0x40023800
 800350c:	40004400 	.word	0x40004400
 8003510:	40004800 	.word	0x40004800
 8003514:	40004c00 	.word	0x40004c00
 8003518:	40005000 	.word	0x40005000
 800351c:	40011400 	.word	0x40011400
 8003520:	40007800 	.word	0x40007800
 8003524:	2310      	movs	r3, #16
 8003526:	77fb      	strb	r3, [r7, #31]
 8003528:	e02c      	b.n	8003584 <UART_SetConfig+0x348>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a72      	ldr	r2, [pc, #456]	@ (80036f8 <UART_SetConfig+0x4bc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d125      	bne.n	8003580 <UART_SetConfig+0x344>
 8003534:	4b71      	ldr	r3, [pc, #452]	@ (80036fc <UART_SetConfig+0x4c0>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800353e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003542:	d017      	beq.n	8003574 <UART_SetConfig+0x338>
 8003544:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003548:	d817      	bhi.n	800357a <UART_SetConfig+0x33e>
 800354a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800354e:	d00b      	beq.n	8003568 <UART_SetConfig+0x32c>
 8003550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003554:	d811      	bhi.n	800357a <UART_SetConfig+0x33e>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <UART_SetConfig+0x326>
 800355a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800355e:	d006      	beq.n	800356e <UART_SetConfig+0x332>
 8003560:	e00b      	b.n	800357a <UART_SetConfig+0x33e>
 8003562:	2300      	movs	r3, #0
 8003564:	77fb      	strb	r3, [r7, #31]
 8003566:	e00d      	b.n	8003584 <UART_SetConfig+0x348>
 8003568:	2302      	movs	r3, #2
 800356a:	77fb      	strb	r3, [r7, #31]
 800356c:	e00a      	b.n	8003584 <UART_SetConfig+0x348>
 800356e:	2304      	movs	r3, #4
 8003570:	77fb      	strb	r3, [r7, #31]
 8003572:	e007      	b.n	8003584 <UART_SetConfig+0x348>
 8003574:	2308      	movs	r3, #8
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e004      	b.n	8003584 <UART_SetConfig+0x348>
 800357a:	2310      	movs	r3, #16
 800357c:	77fb      	strb	r3, [r7, #31]
 800357e:	e001      	b.n	8003584 <UART_SetConfig+0x348>
 8003580:	2310      	movs	r3, #16
 8003582:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800358c:	d15b      	bne.n	8003646 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800358e:	7ffb      	ldrb	r3, [r7, #31]
 8003590:	2b08      	cmp	r3, #8
 8003592:	d828      	bhi.n	80035e6 <UART_SetConfig+0x3aa>
 8003594:	a201      	add	r2, pc, #4	@ (adr r2, 800359c <UART_SetConfig+0x360>)
 8003596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359a:	bf00      	nop
 800359c:	080035c1 	.word	0x080035c1
 80035a0:	080035c9 	.word	0x080035c9
 80035a4:	080035d1 	.word	0x080035d1
 80035a8:	080035e7 	.word	0x080035e7
 80035ac:	080035d7 	.word	0x080035d7
 80035b0:	080035e7 	.word	0x080035e7
 80035b4:	080035e7 	.word	0x080035e7
 80035b8:	080035e7 	.word	0x080035e7
 80035bc:	080035df 	.word	0x080035df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035c0:	f7fe fdbe 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 80035c4:	61b8      	str	r0, [r7, #24]
        break;
 80035c6:	e013      	b.n	80035f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035c8:	f7fe fdce 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 80035cc:	61b8      	str	r0, [r7, #24]
        break;
 80035ce:	e00f      	b.n	80035f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003700 <UART_SetConfig+0x4c4>)
 80035d2:	61bb      	str	r3, [r7, #24]
        break;
 80035d4:	e00c      	b.n	80035f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035d6:	f7fe fce1 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 80035da:	61b8      	str	r0, [r7, #24]
        break;
 80035dc:	e008      	b.n	80035f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035e2:	61bb      	str	r3, [r7, #24]
        break;
 80035e4:	e004      	b.n	80035f0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	77bb      	strb	r3, [r7, #30]
        break;
 80035ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d074      	beq.n	80036e0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	005a      	lsls	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	441a      	add	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	fbb2 f3f3 	udiv	r3, r2, r3
 800360a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	2b0f      	cmp	r3, #15
 8003610:	d916      	bls.n	8003640 <UART_SetConfig+0x404>
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003618:	d212      	bcs.n	8003640 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	b29b      	uxth	r3, r3
 800361e:	f023 030f 	bic.w	r3, r3, #15
 8003622:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	085b      	lsrs	r3, r3, #1
 8003628:	b29b      	uxth	r3, r3
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	b29a      	uxth	r2, r3
 8003630:	89fb      	ldrh	r3, [r7, #14]
 8003632:	4313      	orrs	r3, r2
 8003634:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	89fa      	ldrh	r2, [r7, #14]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	e04f      	b.n	80036e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	77bb      	strb	r3, [r7, #30]
 8003644:	e04c      	b.n	80036e0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003646:	7ffb      	ldrb	r3, [r7, #31]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d828      	bhi.n	800369e <UART_SetConfig+0x462>
 800364c:	a201      	add	r2, pc, #4	@ (adr r2, 8003654 <UART_SetConfig+0x418>)
 800364e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003652:	bf00      	nop
 8003654:	08003679 	.word	0x08003679
 8003658:	08003681 	.word	0x08003681
 800365c:	08003689 	.word	0x08003689
 8003660:	0800369f 	.word	0x0800369f
 8003664:	0800368f 	.word	0x0800368f
 8003668:	0800369f 	.word	0x0800369f
 800366c:	0800369f 	.word	0x0800369f
 8003670:	0800369f 	.word	0x0800369f
 8003674:	08003697 	.word	0x08003697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003678:	f7fe fd62 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 800367c:	61b8      	str	r0, [r7, #24]
        break;
 800367e:	e013      	b.n	80036a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003680:	f7fe fd72 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8003684:	61b8      	str	r0, [r7, #24]
        break;
 8003686:	e00f      	b.n	80036a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003688:	4b1d      	ldr	r3, [pc, #116]	@ (8003700 <UART_SetConfig+0x4c4>)
 800368a:	61bb      	str	r3, [r7, #24]
        break;
 800368c:	e00c      	b.n	80036a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800368e:	f7fe fc85 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8003692:	61b8      	str	r0, [r7, #24]
        break;
 8003694:	e008      	b.n	80036a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800369a:	61bb      	str	r3, [r7, #24]
        break;
 800369c:	e004      	b.n	80036a8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	77bb      	strb	r3, [r7, #30]
        break;
 80036a6:	bf00      	nop
    }

    if (pclk != 0U)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d018      	beq.n	80036e0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	085a      	lsrs	r2, r3, #1
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	441a      	add	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b0f      	cmp	r3, #15
 80036c6:	d909      	bls.n	80036dc <UART_SetConfig+0x4a0>
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ce:	d205      	bcs.n	80036dc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	e001      	b.n	80036e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80036ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40007c00 	.word	0x40007c00
 80036fc:	40023800 	.word	0x40023800
 8003700:	00f42400 	.word	0x00f42400

08003704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01a      	beq.n	800381a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003802:	d10a      	bne.n	800381a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
  }
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b098      	sub	sp, #96	@ 0x60
 800384c:	af02      	add	r7, sp, #8
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003858:	f7fd fc18 	bl	800108c <HAL_GetTick>
 800385c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b08      	cmp	r3, #8
 800386a:	d12e      	bne.n	80038ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800386c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003874:	2200      	movs	r2, #0
 8003876:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f88c 	bl	8003998 <UART_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d021      	beq.n	80038ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388e:	e853 3f00 	ldrex	r3, [r3]
 8003892:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800389a:	653b      	str	r3, [r7, #80]	@ 0x50
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80038a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e6      	bne.n	8003886 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e062      	b.n	8003990 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d149      	bne.n	800396c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e0:	2200      	movs	r2, #0
 80038e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f856 	bl	8003998 <UART_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d03c      	beq.n	800396c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	623b      	str	r3, [r7, #32]
   return(result);
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003910:	633b      	str	r3, [r7, #48]	@ 0x30
 8003912:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800391e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e6      	bne.n	80038f2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3308      	adds	r3, #8
 800392a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	60fb      	str	r3, [r7, #12]
   return(result);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3308      	adds	r3, #8
 8003942:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003944:	61fa      	str	r2, [r7, #28]
 8003946:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	69b9      	ldr	r1, [r7, #24]
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	617b      	str	r3, [r7, #20]
   return(result);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e5      	bne.n	8003924 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e011      	b.n	8003990 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3758      	adds	r7, #88	@ 0x58
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a8:	e04f      	b.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d04b      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b2:	f7fd fb6b 	bl	800108c <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e04e      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d037      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b80      	cmp	r3, #128	@ 0x80
 80039de:	d034      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b40      	cmp	r3, #64	@ 0x40
 80039e4:	d031      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d110      	bne.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2208      	movs	r2, #8
 80039fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f8ff 	bl	8003c00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2208      	movs	r2, #8
 8003a06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e029      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a24:	d111      	bne.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f8e5 	bl	8003c00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e00f      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	4013      	ands	r3, r2
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	bf0c      	ite	eq
 8003a5a:	2301      	moveq	r3, #1
 8003a5c:	2300      	movne	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	461a      	mov	r2, r3
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d0a0      	beq.n	80039aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b097      	sub	sp, #92	@ 0x5c
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	88fa      	ldrh	r2, [r7, #6]
 8003a8c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	88fa      	ldrh	r2, [r7, #6]
 8003a94:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa6:	d10e      	bne.n	8003ac6 <UART_Start_Receive_IT+0x52>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <UART_Start_Receive_IT+0x48>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003ab6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003aba:	e02d      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	22ff      	movs	r2, #255	@ 0xff
 8003ac0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ac4:	e028      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10d      	bne.n	8003aea <UART_Start_Receive_IT+0x76>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d104      	bne.n	8003ae0 <UART_Start_Receive_IT+0x6c>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	22ff      	movs	r2, #255	@ 0xff
 8003ada:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ade:	e01b      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	227f      	movs	r2, #127	@ 0x7f
 8003ae4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ae8:	e016      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003af2:	d10d      	bne.n	8003b10 <UART_Start_Receive_IT+0x9c>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d104      	bne.n	8003b06 <UART_Start_Receive_IT+0x92>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	227f      	movs	r2, #127	@ 0x7f
 8003b00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b04:	e008      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	223f      	movs	r2, #63	@ 0x3f
 8003b0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b0e:	e003      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2222      	movs	r2, #34	@ 0x22
 8003b24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3308      	adds	r3, #8
 8003b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3308      	adds	r3, #8
 8003b46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b48:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003b4a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003b4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e5      	bne.n	8003b28 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b64:	d107      	bne.n	8003b76 <UART_Start_Receive_IT+0x102>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a21      	ldr	r2, [pc, #132]	@ (8003bf8 <UART_Start_Receive_IT+0x184>)
 8003b72:	669a      	str	r2, [r3, #104]	@ 0x68
 8003b74:	e002      	b.n	8003b7c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4a20      	ldr	r2, [pc, #128]	@ (8003bfc <UART_Start_Receive_IT+0x188>)
 8003b7a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d019      	beq.n	8003bb8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ba4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ba8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003baa:	e841 2300 	strex	r3, r2, [r1]
 8003bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e6      	bne.n	8003b84 <UART_Start_Receive_IT+0x110>
 8003bb6:	e018      	b.n	8003bea <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f043 0320 	orr.w	r3, r3, #32
 8003bcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bd6:	623b      	str	r3, [r7, #32]
 8003bd8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	69f9      	ldr	r1, [r7, #28]
 8003bdc:	6a3a      	ldr	r2, [r7, #32]
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e6      	bne.n	8003bb8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	375c      	adds	r7, #92	@ 0x5c
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	08003ef1 	.word	0x08003ef1
 8003bfc:	08003d49 	.word	0x08003d49

08003c00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b095      	sub	sp, #84	@ 0x54
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c26:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c28:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e6      	bne.n	8003c08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3308      	adds	r3, #8
 8003c58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e5      	bne.n	8003c3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d118      	bne.n	8003ca8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f023 0310 	bic.w	r3, r3, #16
 8003c8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	6979      	ldr	r1, [r7, #20]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e6      	bne.n	8003c76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003cbc:	bf00      	nop
 8003cbe:	3754      	adds	r7, #84	@ 0x54
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7ff fa88 	bl	80031fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6979      	ldr	r1, [r7, #20]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	613b      	str	r3, [r7, #16]
   return(result);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e6      	bne.n	8003cfc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff fa54 	bl	80031e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d40:	bf00      	nop
 8003d42:	3720      	adds	r7, #32
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b09c      	sub	sp, #112	@ 0x70
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003d56:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d60:	2b22      	cmp	r3, #34	@ 0x22
 8003d62:	f040 80b9 	bne.w	8003ed8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003d74:	b2d9      	uxtb	r1, r3
 8003d76:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d80:	400a      	ands	r2, r1
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f040 809c 	bne.w	8003ee8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003dbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003dd0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ddc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e6      	bne.n	8003db0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3308      	adds	r3, #8
 8003de8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3308      	adds	r3, #8
 8003e00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e02:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e5      	bne.n	8003de2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d018      	beq.n	8003e6a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	623b      	str	r3, [r7, #32]
   return(result);
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e56:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e58:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e6      	bne.n	8003e38 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d12e      	bne.n	8003ed0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f023 0310 	bic.w	r3, r3, #16
 8003e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e96:	61fb      	str	r3, [r7, #28]
 8003e98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	69b9      	ldr	r1, [r7, #24]
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	617b      	str	r3, [r7, #20]
   return(result);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e6      	bne.n	8003e78 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d103      	bne.n	8003ec0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff f9a1 	bl	8003210 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ece:	e00b      	b.n	8003ee8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7fc fb7d 	bl	80005d0 <HAL_UART_RxCpltCallback>
}
 8003ed6:	e007      	b.n	8003ee8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0208 	orr.w	r2, r2, #8
 8003ee6:	619a      	str	r2, [r3, #24]
}
 8003ee8:	bf00      	nop
 8003eea:	3770      	adds	r7, #112	@ 0x70
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b09c      	sub	sp, #112	@ 0x70
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003efe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f08:	2b22      	cmp	r3, #34	@ 0x22
 8003f0a:	f040 80b9 	bne.w	8004080 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f1e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003f22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003f26:	4013      	ands	r3, r2
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f32:	1c9a      	adds	r2, r3, #2
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f040 809c 	bne.w	8004090 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f60:	e853 3f00 	ldrex	r3, [r3]
 8003f64:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003f66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f76:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f78:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003f7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e6      	bne.n	8003f58 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3308      	adds	r3, #8
 8003f90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003faa:	643a      	str	r2, [r7, #64]	@ 0x40
 8003fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e5      	bne.n	8003f8a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d018      	beq.n	8004012 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004000:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1e6      	bne.n	8003fe0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004016:	2b01      	cmp	r3, #1
 8004018:	d12e      	bne.n	8004078 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	60bb      	str	r3, [r7, #8]
   return(result);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f023 0310 	bic.w	r3, r3, #16
 8004034:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6979      	ldr	r1, [r7, #20]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	613b      	str	r3, [r7, #16]
   return(result);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e6      	bne.n	8004020 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b10      	cmp	r3, #16
 800405e:	d103      	bne.n	8004068 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2210      	movs	r2, #16
 8004066:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800406e:	4619      	mov	r1, r3
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff f8cd 	bl	8003210 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004076:	e00b      	b.n	8004090 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7fc faa9 	bl	80005d0 <HAL_UART_RxCpltCallback>
}
 800407e:	e007      	b.n	8004090 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0208 	orr.w	r2, r2, #8
 800408e:	619a      	str	r2, [r3, #24]
}
 8004090:	bf00      	nop
 8004092:	3770      	adds	r7, #112	@ 0x70
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <memset>:
 8004098:	4402      	add	r2, r0
 800409a:	4603      	mov	r3, r0
 800409c:	4293      	cmp	r3, r2
 800409e:	d100      	bne.n	80040a2 <memset+0xa>
 80040a0:	4770      	bx	lr
 80040a2:	f803 1b01 	strb.w	r1, [r3], #1
 80040a6:	e7f9      	b.n	800409c <memset+0x4>

080040a8 <strncmp>:
 80040a8:	b510      	push	{r4, lr}
 80040aa:	b16a      	cbz	r2, 80040c8 <strncmp+0x20>
 80040ac:	3901      	subs	r1, #1
 80040ae:	1884      	adds	r4, r0, r2
 80040b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d103      	bne.n	80040c4 <strncmp+0x1c>
 80040bc:	42a0      	cmp	r0, r4
 80040be:	d001      	beq.n	80040c4 <strncmp+0x1c>
 80040c0:	2a00      	cmp	r2, #0
 80040c2:	d1f5      	bne.n	80040b0 <strncmp+0x8>
 80040c4:	1ad0      	subs	r0, r2, r3
 80040c6:	bd10      	pop	{r4, pc}
 80040c8:	4610      	mov	r0, r2
 80040ca:	e7fc      	b.n	80040c6 <strncmp+0x1e>

080040cc <__libc_init_array>:
 80040cc:	b570      	push	{r4, r5, r6, lr}
 80040ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004104 <__libc_init_array+0x38>)
 80040d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004108 <__libc_init_array+0x3c>)
 80040d2:	1b64      	subs	r4, r4, r5
 80040d4:	10a4      	asrs	r4, r4, #2
 80040d6:	2600      	movs	r6, #0
 80040d8:	42a6      	cmp	r6, r4
 80040da:	d109      	bne.n	80040f0 <__libc_init_array+0x24>
 80040dc:	4d0b      	ldr	r5, [pc, #44]	@ (800410c <__libc_init_array+0x40>)
 80040de:	4c0c      	ldr	r4, [pc, #48]	@ (8004110 <__libc_init_array+0x44>)
 80040e0:	f000 f826 	bl	8004130 <_init>
 80040e4:	1b64      	subs	r4, r4, r5
 80040e6:	10a4      	asrs	r4, r4, #2
 80040e8:	2600      	movs	r6, #0
 80040ea:	42a6      	cmp	r6, r4
 80040ec:	d105      	bne.n	80040fa <__libc_init_array+0x2e>
 80040ee:	bd70      	pop	{r4, r5, r6, pc}
 80040f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f4:	4798      	blx	r3
 80040f6:	3601      	adds	r6, #1
 80040f8:	e7ee      	b.n	80040d8 <__libc_init_array+0xc>
 80040fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80040fe:	4798      	blx	r3
 8004100:	3601      	adds	r6, #1
 8004102:	e7f2      	b.n	80040ea <__libc_init_array+0x1e>
 8004104:	080041b8 	.word	0x080041b8
 8004108:	080041b8 	.word	0x080041b8
 800410c:	080041b8 	.word	0x080041b8
 8004110:	080041bc 	.word	0x080041bc

08004114 <memcpy>:
 8004114:	440a      	add	r2, r1
 8004116:	4291      	cmp	r1, r2
 8004118:	f100 33ff 	add.w	r3, r0, #4294967295
 800411c:	d100      	bne.n	8004120 <memcpy+0xc>
 800411e:	4770      	bx	lr
 8004120:	b510      	push	{r4, lr}
 8004122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800412a:	4291      	cmp	r1, r2
 800412c:	d1f9      	bne.n	8004122 <memcpy+0xe>
 800412e:	bd10      	pop	{r4, pc}

08004130 <_init>:
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004132:	bf00      	nop
 8004134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004136:	bc08      	pop	{r3}
 8004138:	469e      	mov	lr, r3
 800413a:	4770      	bx	lr

0800413c <_fini>:
 800413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413e:	bf00      	nop
 8004140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004142:	bc08      	pop	{r3}
 8004144:	469e      	mov	lr, r3
 8004146:	4770      	bx	lr
