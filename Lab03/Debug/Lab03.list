
Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041bc  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080043bc  080043bc  000053bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e4  080044e4  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  080044e4  080044e4  000054e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044ec  080044ec  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044ec  080044ec  000054ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044f0  080044f0  000054f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080044f4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000060  08004554  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08004554  00006364  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aeaf  00000000  00000000  0000608e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3b  00000000  00000000  00010f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  00012b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000063f  00000000  00000000  000133b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279bd  00000000  00000000  000139ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c74e  00000000  00000000  0003b3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f63b1  00000000  00000000  00047afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013deab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000250c  00000000  00000000  0013def0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001403fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	080043a4 	.word	0x080043a4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	080043a4 	.word	0x080043a4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f2:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x98>)
 80005f4:	4a21      	ldr	r2, [pc, #132]	@ (800067c <MX_ADC1_Init+0x9c>)
 80005f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <MX_ADC1_Init+0x98>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000604:	4b1c      	ldr	r3, [pc, #112]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800060a:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000610:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000618:	4b17      	ldr	r3, [pc, #92]	@ (8000678 <MX_ADC1_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061e:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000620:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <MX_ADC1_Init+0xa0>)
 8000622:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000624:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800062a:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <MX_ADC1_Init+0x98>)
 800062c:	2201      	movs	r2, #1
 800062e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000630:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_ADC1_Init+0x98>)
 800063a:	2201      	movs	r2, #1
 800063c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063e:	480e      	ldr	r0, [pc, #56]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000640:	f000 fd68 	bl	8001114 <HAL_ADC_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800064a:	f000 fb87 	bl	8000d5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000652:	2301      	movs	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065a:	463b      	mov	r3, r7
 800065c:	4619      	mov	r1, r3
 800065e:	4806      	ldr	r0, [pc, #24]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000660:	f000 fd9c 	bl	800119c <HAL_ADC_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800066a:	f000 fb77 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000007c 	.word	0x2000007c
 800067c:	40012000 	.word	0x40012000
 8000680:	0f000001 	.word	0x0f000001

08000684 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800068a:	463b      	mov	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000696:	4b21      	ldr	r3, [pc, #132]	@ (800071c <MX_ADC2_Init+0x98>)
 8000698:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <MX_ADC2_Init+0x9c>)
 800069a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800069c:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <MX_ADC2_Init+0x98>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006a2:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <MX_ADC2_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a8:	4b1c      	ldr	r3, [pc, #112]	@ (800071c <MX_ADC2_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006ae:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <MX_ADC2_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006b4:	4b19      	ldr	r3, [pc, #100]	@ (800071c <MX_ADC2_Init+0x98>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006bc:	4b17      	ldr	r3, [pc, #92]	@ (800071c <MX_ADC2_Init+0x98>)
 80006be:	2200      	movs	r2, #0
 80006c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c2:	4b16      	ldr	r3, [pc, #88]	@ (800071c <MX_ADC2_Init+0x98>)
 80006c4:	4a17      	ldr	r2, [pc, #92]	@ (8000724 <MX_ADC2_Init+0xa0>)
 80006c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c8:	4b14      	ldr	r3, [pc, #80]	@ (800071c <MX_ADC2_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80006ce:	4b13      	ldr	r3, [pc, #76]	@ (800071c <MX_ADC2_Init+0x98>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_ADC2_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <MX_ADC2_Init+0x98>)
 80006de:	2201      	movs	r2, #1
 80006e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006e2:	480e      	ldr	r0, [pc, #56]	@ (800071c <MX_ADC2_Init+0x98>)
 80006e4:	f000 fd16 	bl	8001114 <HAL_ADC_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80006ee:	f000 fb35 	bl	8000d5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	4619      	mov	r1, r3
 8000702:	4806      	ldr	r0, [pc, #24]	@ (800071c <MX_ADC2_Init+0x98>)
 8000704:	f000 fd4a 	bl	800119c <HAL_ADC_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800070e:	f000 fb25 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000c4 	.word	0x200000c4
 8000720:	40012100 	.word	0x40012100
 8000724:	0f000001 	.word	0x0f000001

08000728 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	463b      	mov	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800073a:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <MX_ADC3_Init+0x98>)
 800073c:	4a21      	ldr	r2, [pc, #132]	@ (80007c4 <MX_ADC3_Init+0x9c>)
 800073e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000740:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <MX_ADC3_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000746:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <MX_ADC3_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074c:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <MX_ADC3_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000752:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <MX_ADC3_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000758:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <MX_ADC3_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000760:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <MX_ADC3_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000766:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <MX_ADC3_Init+0x98>)
 8000768:	4a17      	ldr	r2, [pc, #92]	@ (80007c8 <MX_ADC3_Init+0xa0>)
 800076a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076c:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_ADC3_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000772:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <MX_ADC3_Init+0x98>)
 8000774:	2201      	movs	r2, #1
 8000776:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_ADC3_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_ADC3_Init+0x98>)
 8000782:	2201      	movs	r2, #1
 8000784:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000786:	480e      	ldr	r0, [pc, #56]	@ (80007c0 <MX_ADC3_Init+0x98>)
 8000788:	f000 fcc4 	bl	8001114 <HAL_ADC_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000792:	f000 fae3 	bl	8000d5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000796:	2304      	movs	r3, #4
 8000798:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079a:	2301      	movs	r3, #1
 800079c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007a2:	463b      	mov	r3, r7
 80007a4:	4619      	mov	r1, r3
 80007a6:	4806      	ldr	r0, [pc, #24]	@ (80007c0 <MX_ADC3_Init+0x98>)
 80007a8:	f000 fcf8 	bl	800119c <HAL_ADC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80007b2:	f000 fad3 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000010c 	.word	0x2000010c
 80007c4:	40012200 	.word	0x40012200
 80007c8:	0f000001 	.word	0x0f000001

080007cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08e      	sub	sp, #56	@ 0x38
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a4b      	ldr	r2, [pc, #300]	@ (8000918 <HAL_ADC_MspInit+0x14c>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d124      	bne.n	8000838 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ee:	4b4b      	ldr	r3, [pc, #300]	@ (800091c <HAL_ADC_MspInit+0x150>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f2:	4a4a      	ldr	r2, [pc, #296]	@ (800091c <HAL_ADC_MspInit+0x150>)
 80007f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007fa:	4b48      	ldr	r3, [pc, #288]	@ (800091c <HAL_ADC_MspInit+0x150>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000802:	623b      	str	r3, [r7, #32]
 8000804:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b45      	ldr	r3, [pc, #276]	@ (800091c <HAL_ADC_MspInit+0x150>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a44      	ldr	r2, [pc, #272]	@ (800091c <HAL_ADC_MspInit+0x150>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b42      	ldr	r3, [pc, #264]	@ (800091c <HAL_ADC_MspInit+0x150>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	61fb      	str	r3, [r7, #28]
 800081c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800081e:	2303      	movs	r3, #3
 8000820:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000822:	2303      	movs	r3, #3
 8000824:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082e:	4619      	mov	r1, r3
 8000830:	483b      	ldr	r0, [pc, #236]	@ (8000920 <HAL_ADC_MspInit+0x154>)
 8000832:	f001 f861 	bl	80018f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000836:	e06a      	b.n	800090e <HAL_ADC_MspInit+0x142>
  else if(adcHandle->Instance==ADC2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a39      	ldr	r2, [pc, #228]	@ (8000924 <HAL_ADC_MspInit+0x158>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d124      	bne.n	800088c <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000842:	4b36      	ldr	r3, [pc, #216]	@ (800091c <HAL_ADC_MspInit+0x150>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000846:	4a35      	ldr	r2, [pc, #212]	@ (800091c <HAL_ADC_MspInit+0x150>)
 8000848:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800084c:	6453      	str	r3, [r2, #68]	@ 0x44
 800084e:	4b33      	ldr	r3, [pc, #204]	@ (800091c <HAL_ADC_MspInit+0x150>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000852:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b30      	ldr	r3, [pc, #192]	@ (800091c <HAL_ADC_MspInit+0x150>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a2f      	ldr	r2, [pc, #188]	@ (800091c <HAL_ADC_MspInit+0x150>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b2d      	ldr	r3, [pc, #180]	@ (800091c <HAL_ADC_MspInit+0x150>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000872:	2303      	movs	r3, #3
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000876:	2303      	movs	r3, #3
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000882:	4619      	mov	r1, r3
 8000884:	4826      	ldr	r0, [pc, #152]	@ (8000920 <HAL_ADC_MspInit+0x154>)
 8000886:	f001 f837 	bl	80018f8 <HAL_GPIO_Init>
}
 800088a:	e040      	b.n	800090e <HAL_ADC_MspInit+0x142>
  else if(adcHandle->Instance==ADC3)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a25      	ldr	r2, [pc, #148]	@ (8000928 <HAL_ADC_MspInit+0x15c>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d13b      	bne.n	800090e <HAL_ADC_MspInit+0x142>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000896:	4b21      	ldr	r3, [pc, #132]	@ (800091c <HAL_ADC_MspInit+0x150>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089a:	4a20      	ldr	r2, [pc, #128]	@ (800091c <HAL_ADC_MspInit+0x150>)
 800089c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008a2:	4b1e      	ldr	r3, [pc, #120]	@ (800091c <HAL_ADC_MspInit+0x150>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ae:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <HAL_ADC_MspInit+0x150>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a1a      	ldr	r2, [pc, #104]	@ (800091c <HAL_ADC_MspInit+0x150>)
 80008b4:	f043 0320 	orr.w	r3, r3, #32
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b18      	ldr	r3, [pc, #96]	@ (800091c <HAL_ADC_MspInit+0x150>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0320 	and.w	r3, r3, #32
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b15      	ldr	r3, [pc, #84]	@ (800091c <HAL_ADC_MspInit+0x150>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a14      	ldr	r2, [pc, #80]	@ (800091c <HAL_ADC_MspInit+0x150>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b12      	ldr	r3, [pc, #72]	@ (800091c <HAL_ADC_MspInit+0x150>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008de:	23c0      	movs	r3, #192	@ 0xc0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e2:	2303      	movs	r3, #3
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ee:	4619      	mov	r1, r3
 80008f0:	480e      	ldr	r0, [pc, #56]	@ (800092c <HAL_ADC_MspInit+0x160>)
 80008f2:	f001 f801 	bl	80018f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008f6:	2303      	movs	r3, #3
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fa:	2303      	movs	r3, #3
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	@ (8000920 <HAL_ADC_MspInit+0x154>)
 800090a:	f000 fff5 	bl	80018f8 <HAL_GPIO_Init>
}
 800090e:	bf00      	nop
 8000910:	3738      	adds	r7, #56	@ 0x38
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40012000 	.word	0x40012000
 800091c:	40023800 	.word	0x40023800
 8000920:	40020000 	.word	0x40020000
 8000924:	40012100 	.word	0x40012100
 8000928:	40012200 	.word	0x40012200
 800092c:	40021400 	.word	0x40021400

08000930 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	@ 0x28
 8000934:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000946:	4b24      	ldr	r3, [pc, #144]	@ (80009d8 <MX_GPIO_Init+0xa8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a23      	ldr	r2, [pc, #140]	@ (80009d8 <MX_GPIO_Init+0xa8>)
 800094c:	f043 0320 	orr.w	r3, r3, #32
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <MX_GPIO_Init+0xa8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f003 0320 	and.w	r3, r3, #32
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <MX_GPIO_Init+0xa8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a1d      	ldr	r2, [pc, #116]	@ (80009d8 <MX_GPIO_Init+0xa8>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <MX_GPIO_Init+0xa8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <MX_GPIO_Init+0xa8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a17      	ldr	r2, [pc, #92]	@ (80009d8 <MX_GPIO_Init+0xa8>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <MX_GPIO_Init+0xa8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098e:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <MX_GPIO_Init+0xa8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a11      	ldr	r2, [pc, #68]	@ (80009d8 <MX_GPIO_Init+0xa8>)
 8000994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_GPIO_Init+0xa8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_14, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 80009ac:	480b      	ldr	r0, [pc, #44]	@ (80009dc <MX_GPIO_Init+0xac>)
 80009ae:	f001 f94f 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80009b2:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4804      	ldr	r0, [pc, #16]	@ (80009dc <MX_GPIO_Init+0xac>)
 80009cc:	f000 ff94 	bl	80018f8 <HAL_GPIO_Init>

}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	@ 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40021800 	.word	0x40021800

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b0b4      	sub	sp, #208	@ 0xd0
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009e6:	f000 f98d 	bl	8000d04 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ea:	f000 fb12 	bl	8001012 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ee:	f000 f92d 	bl	8000c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f2:	f7ff ff9d 	bl	8000930 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009f6:	f7ff fdf3 	bl	80005e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80009fa:	f7ff fe43 	bl	8000684 <MX_ADC2_Init>
  MX_ADC3_Init();
 80009fe:	f7ff fe93 	bl	8000728 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8000a02:	f000 fa4d 	bl	8000ea0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  char welcome[] = "Display Blinking LED PRESS (1, 2)\r\nDisplay Group Members PRESS m\r\nQuit PRESS q\r\n        Input => ";
 8000a06:	4a84      	ldr	r2, [pc, #528]	@ (8000c18 <main+0x238>)
 8000a08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	2262      	movs	r2, #98	@ 0x62
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 f87b 	bl	8003b0c <memcpy>
  HAL_UART_Transmit(&huart3,(uint8_t*)welcome, strlen(welcome), HAL_MAX_DELAY);
 8000a16:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fc10 	bl	8000240 <strlen>
 8000a20:	4603      	mov	r3, r0
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2c:	487b      	ldr	r0, [pc, #492]	@ (8000c1c <main+0x23c>)
 8000a2e:	f002 fa33 	bl	8002e98 <HAL_UART_Transmit>
//            snprintf(buffer, sizeof(buffer), "Input => %c\r\n", inputChar);
//            HAL_UART_Transmit(&huart3, (uint8_t)buffer, strlen(buffer), HAL_MAX_DELAY);
//          }

//04
	  HAL_UART_Receive(&huart3, (uint8_t*)&inputChar, 1, HAL_MAX_DELAY);
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	2201      	movs	r2, #1
 8000a38:	4979      	ldr	r1, [pc, #484]	@ (8000c20 <main+0x240>)
 8000a3a:	4878      	ldr	r0, [pc, #480]	@ (8000c1c <main+0x23c>)
 8000a3c:	f002 fab5 	bl	8002faa <HAL_UART_Receive>
	       if (inputChar =='q'){
 8000a40:	4b77      	ldr	r3, [pc, #476]	@ (8000c20 <main+0x240>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b71      	cmp	r3, #113	@ 0x71
 8000a46:	d11e      	bne.n	8000a86 <main+0xa6>
	       char quitMsg[] = "Quit\r\n";
 8000a48:	4a76      	ldr	r2, [pc, #472]	@ (8000c24 <main+0x244>)
 8000a4a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a52:	6018      	str	r0, [r3, #0]
 8000a54:	3304      	adds	r3, #4
 8000a56:	8019      	strh	r1, [r3, #0]
 8000a58:	3302      	adds	r3, #2
 8000a5a:	0c0a      	lsrs	r2, r1, #16
 8000a5c:	701a      	strb	r2, [r3, #0]
	       HAL_UART_Transmit(&huart3,(uint8_t*)quitMsg, strlen(quitMsg), HAL_MAX_DELAY);
 8000a5e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fbec 	bl	8000240 <strlen>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8000a70:	f04f 33ff 	mov.w	r3, #4294967295
 8000a74:	4869      	ldr	r0, [pc, #420]	@ (8000c1c <main+0x23c>)
 8000a76:	f002 fa0f 	bl	8002e98 <HAL_UART_Transmit>
	       isRunning = 0;
 8000a7a:	4b6b      	ldr	r3, [pc, #428]	@ (8000c28 <main+0x248>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
	       break;
 8000a80:	bf00      	nop
 8000a82:	2300      	movs	r3, #0
 8000a84:	e0c3      	b.n	8000c0e <main+0x22e>
	       }
	       else {
	    if(Firsttime == 1){
 8000a86:	4b69      	ldr	r3, [pc, #420]	@ (8000c2c <main+0x24c>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d115      	bne.n	8000aba <main+0xda>
	    	snprintf(buffer,sizeof(buffer), "%c\r\n" , inputChar);
 8000a8e:	4b64      	ldr	r3, [pc, #400]	@ (8000c20 <main+0x240>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	4a67      	ldr	r2, [pc, #412]	@ (8000c30 <main+0x250>)
 8000a94:	2132      	movs	r1, #50	@ 0x32
 8000a96:	4867      	ldr	r0, [pc, #412]	@ (8000c34 <main+0x254>)
 8000a98:	f002 ffd0 	bl	8003a3c <sniprintf>
	    	HAL_UART_Transmit(&huart3,(uint8_t*)buffer, strlen(buffer),HAL_MAX_DELAY);
 8000a9c:	4865      	ldr	r0, [pc, #404]	@ (8000c34 <main+0x254>)
 8000a9e:	f7ff fbcf 	bl	8000240 <strlen>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	4962      	ldr	r1, [pc, #392]	@ (8000c34 <main+0x254>)
 8000aac:	485b      	ldr	r0, [pc, #364]	@ (8000c1c <main+0x23c>)
 8000aae:	f002 f9f3 	bl	8002e98 <HAL_UART_Transmit>
	    	Firsttime = 0;
 8000ab2:	4b5e      	ldr	r3, [pc, #376]	@ (8000c2c <main+0x24c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	e015      	b.n	8000ae6 <main+0x106>
	    }
	    else if (Firsttime == 0){
 8000aba:	4b5c      	ldr	r3, [pc, #368]	@ (8000c2c <main+0x24c>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d111      	bne.n	8000ae6 <main+0x106>
	       snprintf(buffer,sizeof(buffer), "Input => %c\r\n" , inputChar);
 8000ac2:	4b57      	ldr	r3, [pc, #348]	@ (8000c20 <main+0x240>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	4a5c      	ldr	r2, [pc, #368]	@ (8000c38 <main+0x258>)
 8000ac8:	2132      	movs	r1, #50	@ 0x32
 8000aca:	485a      	ldr	r0, [pc, #360]	@ (8000c34 <main+0x254>)
 8000acc:	f002 ffb6 	bl	8003a3c <sniprintf>
	       HAL_UART_Transmit(&huart3,(uint8_t*)buffer, strlen(buffer),HAL_MAX_DELAY);
 8000ad0:	4858      	ldr	r0, [pc, #352]	@ (8000c34 <main+0x254>)
 8000ad2:	f7ff fbb5 	bl	8000240 <strlen>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	4955      	ldr	r1, [pc, #340]	@ (8000c34 <main+0x254>)
 8000ae0:	484e      	ldr	r0, [pc, #312]	@ (8000c1c <main+0x23c>)
 8000ae2:	f002 f9d9 	bl	8002e98 <HAL_UART_Transmit>
	    }
	       if (inputChar == '1') {
 8000ae6:	4b4e      	ldr	r3, [pc, #312]	@ (8000c20 <main+0x240>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b31      	cmp	r3, #49	@ 0x31
 8000aec:	d11f      	bne.n	8000b2e <main+0x14e>
	       for (int i = 0; i < 3; i++) {
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000af4:	e016      	b.n	8000b24 <main+0x144>
	      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000afc:	484f      	ldr	r0, [pc, #316]	@ (8000c3c <main+0x25c>)
 8000afe:	f001 f8a7 	bl	8001c50 <HAL_GPIO_WritePin>
	      HAL_Delay(200);
 8000b02:	20c8      	movs	r0, #200	@ 0xc8
 8000b04:	f000 fae2 	bl	80010cc <HAL_Delay>
	      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b0e:	484b      	ldr	r0, [pc, #300]	@ (8000c3c <main+0x25c>)
 8000b10:	f001 f89e 	bl	8001c50 <HAL_GPIO_WritePin>
	      HAL_Delay(200);
 8000b14:	20c8      	movs	r0, #200	@ 0xc8
 8000b16:	f000 fad9 	bl	80010cc <HAL_Delay>
	       for (int i = 0; i < 3; i++) {
 8000b1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000b1e:	3301      	adds	r3, #1
 8000b20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000b24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	dde4      	ble.n	8000af6 <main+0x116>
 8000b2c:	e781      	b.n	8000a32 <main+0x52>
	       }
	       } else if (inputChar == '2') {
 8000b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c20 <main+0x240>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b32      	cmp	r3, #50	@ 0x32
 8000b34:	d11f      	bne.n	8000b76 <main+0x196>
	      for (int i = 0; i < 3; i++) {
 8000b36:	2300      	movs	r3, #0
 8000b38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000b3c:	e016      	b.n	8000b6c <main+0x18c>
	      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b44:	483d      	ldr	r0, [pc, #244]	@ (8000c3c <main+0x25c>)
 8000b46:	f001 f883 	bl	8001c50 <HAL_GPIO_WritePin>
	      HAL_Delay(200);
 8000b4a:	20c8      	movs	r0, #200	@ 0xc8
 8000b4c:	f000 fabe 	bl	80010cc <HAL_Delay>
	      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b56:	4839      	ldr	r0, [pc, #228]	@ (8000c3c <main+0x25c>)
 8000b58:	f001 f87a 	bl	8001c50 <HAL_GPIO_WritePin>
	      HAL_Delay(200);
 8000b5c:	20c8      	movs	r0, #200	@ 0xc8
 8000b5e:	f000 fab5 	bl	80010cc <HAL_Delay>
	      for (int i = 0; i < 3; i++) {
 8000b62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000b66:	3301      	adds	r3, #1
 8000b68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000b6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	dde4      	ble.n	8000b3e <main+0x15e>
 8000b74:	e75d      	b.n	8000a32 <main+0x52>
	       }
	       } else if (inputChar == 'm') {
 8000b76:	4b2a      	ldr	r3, [pc, #168]	@ (8000c20 <main+0x240>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b6d      	cmp	r3, #109	@ 0x6d
 8000b7c:	d130      	bne.n	8000be0 <main+0x200>

	       char member1[] = "66015103\r\nNonthawat  Phongsrinual\r\n";
 8000b7e:	4b30      	ldr	r3, [pc, #192]	@ (8000c40 <main+0x260>)
 8000b80:	1d3c      	adds	r4, r7, #4
 8000b82:	461d      	mov	r5, r3
 8000b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8c:	682b      	ldr	r3, [r5, #0]
 8000b8e:	6023      	str	r3, [r4, #0]
	       char member2[] = "66015152\r\nPasagon  Munesawat\r\n";
 8000b90:	4b2c      	ldr	r3, [pc, #176]	@ (8000c44 <main+0x264>)
 8000b92:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000b96:	461d      	mov	r5, r3
 8000b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ba0:	c407      	stmia	r4!, {r0, r1, r2}
 8000ba2:	8023      	strh	r3, [r4, #0]
 8000ba4:	3402      	adds	r4, #2
 8000ba6:	0c1b      	lsrs	r3, r3, #16
 8000ba8:	7023      	strb	r3, [r4, #0]

	       HAL_UART_Transmit(&huart3, (uint8_t*)member1, strlen(member1), HAL_MAX_DELAY);
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fb47 	bl	8000240 <strlen>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	1d39      	adds	r1, r7, #4
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbc:	4817      	ldr	r0, [pc, #92]	@ (8000c1c <main+0x23c>)
 8000bbe:	f002 f96b 	bl	8002e98 <HAL_UART_Transmit>
	       HAL_UART_Transmit(&huart3, (uint8_t*)member2, strlen(member2), HAL_MAX_DELAY);
 8000bc2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fb3a 	bl	8000240 <strlen>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd8:	4810      	ldr	r0, [pc, #64]	@ (8000c1c <main+0x23c>)
 8000bda:	f002 f95d 	bl	8002e98 <HAL_UART_Transmit>
 8000bde:	e728      	b.n	8000a32 <main+0x52>

	       } else {
	      char invalidMsg[] = "Unknow Command\r\n";
 8000be0:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <main+0x268>)
 8000be2:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000be6:	461d      	mov	r5, r3
 8000be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bec:	682b      	ldr	r3, [r5, #0]
 8000bee:	7023      	strb	r3, [r4, #0]
	      HAL_UART_Transmit(&huart3, (uint8_t*)invalidMsg, strlen(invalidMsg), HAL_MAX_DELAY);
 8000bf0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fb23 	bl	8000240 <strlen>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <main+0x23c>)
 8000c08:	f002 f946 	bl	8002e98 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart3, (uint8_t*)&inputChar, 1, HAL_MAX_DELAY);
 8000c0c:	e711      	b.n	8000a32 <main+0x52>
	       }

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	37d0      	adds	r7, #208	@ 0xd0
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bdb0      	pop	{r4, r5, r7, pc}
 8000c16:	bf00      	nop
 8000c18:	080043d4 	.word	0x080043d4
 8000c1c:	20000190 	.word	0x20000190
 8000c20:	20000154 	.word	0x20000154
 8000c24:	08004438 	.word	0x08004438
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000001 	.word	0x20000001
 8000c30:	080043bc 	.word	0x080043bc
 8000c34:	20000158 	.word	0x20000158
 8000c38:	080043c4 	.word	0x080043c4
 8000c3c:	40021800 	.word	0x40021800
 8000c40:	08004440 	.word	0x08004440
 8000c44:	08004464 	.word	0x08004464
 8000c48:	08004484 	.word	0x08004484

08000c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b094      	sub	sp, #80	@ 0x50
 8000c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	2234      	movs	r2, #52	@ 0x34
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 ff22 	bl	8003aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c70:	4b22      	ldr	r3, [pc, #136]	@ (8000cfc <SystemClock_Config+0xb0>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c74:	4a21      	ldr	r2, [pc, #132]	@ (8000cfc <SystemClock_Config+0xb0>)
 8000c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cfc <SystemClock_Config+0xb0>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c88:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <SystemClock_Config+0xb4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c90:	4a1b      	ldr	r2, [pc, #108]	@ (8000d00 <SystemClock_Config+0xb4>)
 8000c92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <SystemClock_Config+0xb4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cac:	2310      	movs	r3, #16
 8000cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 ffe3 	bl	8001c84 <HAL_RCC_OscConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000cc4:	f000 f84a 	bl	8000d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc8:	230f      	movs	r3, #15
 8000cca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 fa7c 	bl	80021e0 <HAL_RCC_ClockConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cee:	f000 f835 	bl	8000d5c <Error_Handler>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3750      	adds	r7, #80	@ 0x50
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40007000 	.word	0x40007000

08000d04 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d16:	f000 fd77 	bl	8001808 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d26:	231f      	movs	r3, #31
 8000d28:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d2a:	2387      	movs	r3, #135	@ 0x87
 8000d2c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d32:	2300      	movs	r3, #0
 8000d34:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d36:	2301      	movs	r3, #1
 8000d38:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d46:	463b      	mov	r3, r7
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fd95 	bl	8001878 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d4e:	2004      	movs	r0, #4
 8000d50:	f000 fd72 	bl	8001838 <HAL_MPU_Enable>

}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
}
 8000d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <Error_Handler+0x8>

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <HAL_MspInit+0x44>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	4a0e      	ldr	r2, [pc, #56]	@ (8000dac <HAL_MspInit+0x44>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <HAL_MspInit+0x44>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <HAL_MspInit+0x44>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	4a08      	ldr	r2, [pc, #32]	@ (8000dac <HAL_MspInit+0x44>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_MspInit+0x44>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <NMI_Handler+0x4>

08000db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e06:	f000 f941 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	@ (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	@ (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f002 fe38 	bl	8003ab4 <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20080000 	.word	0x20080000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	2000018c 	.word	0x2000018c
 8000e78:	20000368 	.word	0x20000368

08000e7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_USART3_UART_Init+0x58>)
 8000ea6:	4a15      	ldr	r2, [pc, #84]	@ (8000efc <MX_USART3_UART_Init+0x5c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <MX_USART3_UART_Init+0x58>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_USART3_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <MX_USART3_UART_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <MX_USART3_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <MX_USART3_UART_Init+0x58>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <MX_USART3_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <MX_USART3_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <MX_USART3_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <MX_USART3_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_USART3_UART_Init+0x58>)
 8000ee4:	f001 ff8a 	bl	8002dfc <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000eee:	f7ff ff35 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000190 	.word	0x20000190
 8000efc:	40004800 	.word	0x40004800

08000f00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0ae      	sub	sp, #184	@ 0xb8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2290      	movs	r2, #144	@ 0x90
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 fdbf 	bl	8003aa4 <memset>
  if(uartHandle->Instance==USART3)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a22      	ldr	r2, [pc, #136]	@ (8000fb4 <HAL_UART_MspInit+0xb4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d13c      	bne.n	8000faa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f34:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 fb34 	bl	80025ac <HAL_RCCEx_PeriphCLKConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f4a:	f7ff ff07 	bl	8000d5c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	4a19      	ldr	r2, [pc, #100]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5a:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a13      	ldr	r2, [pc, #76]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <HAL_UART_MspInit+0xbc>)
 8000fa6:	f000 fca7 	bl	80018f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000faa:	bf00      	nop
 8000fac:	37b8      	adds	r7, #184	@ 0xb8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40004800 	.word	0x40004800
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020c00 	.word	0x40020c00

08000fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fc4:	f7ff ff5a 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc8:	480c      	ldr	r0, [pc, #48]	@ (8000ffc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fca:	490d      	ldr	r1, [pc, #52]	@ (8001000 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001004 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fe0:	4c0a      	ldr	r4, [pc, #40]	@ (800100c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fee:	f002 fd67 	bl	8003ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff2:	f7ff fcf5 	bl	80009e0 <main>
  bx  lr    
 8000ff6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001000:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001004:	080044f4 	.word	0x080044f4
  ldr r2, =_sbss
 8001008:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800100c:	20000364 	.word	0x20000364

08001010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <ADC_IRQHandler>

08001012 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001016:	2003      	movs	r0, #3
 8001018:	f000 fbc2 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101c:	200f      	movs	r0, #15
 800101e:	f000 f805 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001022:	f7ff fea1 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fbcf 	bl	80017ee <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f000 fba5 	bl	80017b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	@ (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000004 	.word	0x20000004
 8001084:	2000000c 	.word	0x2000000c
 8001088:	20000008 	.word	0x20000008

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	2000000c 	.word	0x2000000c
 80010b0:	20000218 	.word	0x20000218

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000218 	.word	0x20000218

080010cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d4:	f7ff ffee 	bl	80010b4 <HAL_GetTick>
 80010d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d005      	beq.n	80010f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <HAL_Delay+0x44>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010f2:	bf00      	nop
 80010f4:	f7ff ffde 	bl	80010b4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	429a      	cmp	r2, r3
 8001102:	d8f7      	bhi.n	80010f4 <HAL_Delay+0x28>
  {
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000000c 	.word	0x2000000c

08001114 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e031      	b.n	800118e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fb4a 	bl	80007cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	2b00      	cmp	r3, #0
 8001150:	d116      	bne.n	8001180 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <HAL_ADC_Init+0x84>)
 8001158:	4013      	ands	r3, r2
 800115a:	f043 0202 	orr.w	r2, r3, #2
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f970 	bl	8001448 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	f023 0303 	bic.w	r3, r3, #3
 8001176:	f043 0201 	orr.w	r2, r3, #1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	641a      	str	r2, [r3, #64]	@ 0x40
 800117e:	e001      	b.n	8001184 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	ffffeefd 	.word	0xffffeefd

0800119c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d101      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x1c>
 80011b4:	2302      	movs	r3, #2
 80011b6:	e136      	b.n	8001426 <HAL_ADC_ConfigChannel+0x28a>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b09      	cmp	r3, #9
 80011c6:	d93a      	bls.n	800123e <HAL_ADC_ConfigChannel+0xa2>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80011d0:	d035      	beq.n	800123e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68d9      	ldr	r1, [r3, #12]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	3b1e      	subs	r3, #30
 80011e8:	2207      	movs	r2, #7
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	400a      	ands	r2, r1
 80011f6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a8d      	ldr	r2, [pc, #564]	@ (8001434 <HAL_ADC_ConfigChannel+0x298>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d10a      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68d9      	ldr	r1, [r3, #12]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	061a      	lsls	r2, r3, #24
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001216:	e035      	b.n	8001284 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68d9      	ldr	r1, [r3, #12]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	4603      	mov	r3, r0
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4403      	add	r3, r0
 8001230:	3b1e      	subs	r3, #30
 8001232:	409a      	lsls	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	430a      	orrs	r2, r1
 800123a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800123c:	e022      	b.n	8001284 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6919      	ldr	r1, [r3, #16]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	b29b      	uxth	r3, r3
 800124a:	461a      	mov	r2, r3
 800124c:	4613      	mov	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4413      	add	r3, r2
 8001252:	2207      	movs	r2, #7
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43da      	mvns	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	400a      	ands	r2, r1
 8001260:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6919      	ldr	r1, [r3, #16]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	b29b      	uxth	r3, r3
 8001272:	4618      	mov	r0, r3
 8001274:	4603      	mov	r3, r0
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4403      	add	r3, r0
 800127a:	409a      	lsls	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b06      	cmp	r3, #6
 800128a:	d824      	bhi.n	80012d6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	3b05      	subs	r3, #5
 800129e:	221f      	movs	r2, #31
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43da      	mvns	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	400a      	ands	r2, r1
 80012ac:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	3b05      	subs	r3, #5
 80012c8:	fa00 f203 	lsl.w	r2, r0, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80012d4:	e04c      	b.n	8001370 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b0c      	cmp	r3, #12
 80012dc:	d824      	bhi.n	8001328 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	3b23      	subs	r3, #35	@ 0x23
 80012f0:	221f      	movs	r2, #31
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	400a      	ands	r2, r1
 80012fe:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	b29b      	uxth	r3, r3
 800130c:	4618      	mov	r0, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	3b23      	subs	r3, #35	@ 0x23
 800131a:	fa00 f203 	lsl.w	r2, r0, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	631a      	str	r2, [r3, #48]	@ 0x30
 8001326:	e023      	b.n	8001370 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	3b41      	subs	r3, #65	@ 0x41
 800133a:	221f      	movs	r2, #31
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43da      	mvns	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	400a      	ands	r2, r1
 8001348:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4618      	mov	r0, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	3b41      	subs	r3, #65	@ 0x41
 8001364:	fa00 f203 	lsl.w	r2, r0, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a30      	ldr	r2, [pc, #192]	@ (8001438 <HAL_ADC_ConfigChannel+0x29c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d10a      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1f4>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001382:	d105      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001384:	4b2d      	ldr	r3, [pc, #180]	@ (800143c <HAL_ADC_ConfigChannel+0x2a0>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a2c      	ldr	r2, [pc, #176]	@ (800143c <HAL_ADC_ConfigChannel+0x2a0>)
 800138a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800138e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a28      	ldr	r2, [pc, #160]	@ (8001438 <HAL_ADC_ConfigChannel+0x29c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d10f      	bne.n	80013ba <HAL_ADC_ConfigChannel+0x21e>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b12      	cmp	r3, #18
 80013a0:	d10b      	bne.n	80013ba <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80013a2:	4b26      	ldr	r3, [pc, #152]	@ (800143c <HAL_ADC_ConfigChannel+0x2a0>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4a25      	ldr	r2, [pc, #148]	@ (800143c <HAL_ADC_ConfigChannel+0x2a0>)
 80013a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80013ac:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80013ae:	4b23      	ldr	r3, [pc, #140]	@ (800143c <HAL_ADC_ConfigChannel+0x2a0>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	4a22      	ldr	r2, [pc, #136]	@ (800143c <HAL_ADC_ConfigChannel+0x2a0>)
 80013b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013b8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a1e      	ldr	r2, [pc, #120]	@ (8001438 <HAL_ADC_ConfigChannel+0x29c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d12b      	bne.n	800141c <HAL_ADC_ConfigChannel+0x280>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001434 <HAL_ADC_ConfigChannel+0x298>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d003      	beq.n	80013d6 <HAL_ADC_ConfigChannel+0x23a>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b11      	cmp	r3, #17
 80013d4:	d122      	bne.n	800141c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80013d6:	4b19      	ldr	r3, [pc, #100]	@ (800143c <HAL_ADC_ConfigChannel+0x2a0>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4a18      	ldr	r2, [pc, #96]	@ (800143c <HAL_ADC_ConfigChannel+0x2a0>)
 80013dc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80013e0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80013e2:	4b16      	ldr	r3, [pc, #88]	@ (800143c <HAL_ADC_ConfigChannel+0x2a0>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4a15      	ldr	r2, [pc, #84]	@ (800143c <HAL_ADC_ConfigChannel+0x2a0>)
 80013e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013ec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a10      	ldr	r2, [pc, #64]	@ (8001434 <HAL_ADC_ConfigChannel+0x298>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d111      	bne.n	800141c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_ADC_ConfigChannel+0x2a4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a11      	ldr	r2, [pc, #68]	@ (8001444 <HAL_ADC_ConfigChannel+0x2a8>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	0c9a      	lsrs	r2, r3, #18
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800140e:	e002      	b.n	8001416 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3b01      	subs	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f9      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	10000012 	.word	0x10000012
 8001438:	40012000 	.word	0x40012000
 800143c:	40012300 	.word	0x40012300
 8001440:	20000004 	.word	0x20000004
 8001444:	431bde83 	.word	0x431bde83

08001448 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001450:	4b78      	ldr	r3, [pc, #480]	@ (8001634 <ADC_Init+0x1ec>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4a77      	ldr	r2, [pc, #476]	@ (8001634 <ADC_Init+0x1ec>)
 8001456:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800145a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800145c:	4b75      	ldr	r3, [pc, #468]	@ (8001634 <ADC_Init+0x1ec>)
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4973      	ldr	r1, [pc, #460]	@ (8001634 <ADC_Init+0x1ec>)
 8001466:	4313      	orrs	r3, r2
 8001468:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001478:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6859      	ldr	r1, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	021a      	lsls	r2, r3, #8
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800149c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6899      	ldr	r1, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d6:	4a58      	ldr	r2, [pc, #352]	@ (8001638 <ADC_Init+0x1f0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d022      	beq.n	8001522 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6899      	ldr	r1, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800150c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6899      	ldr	r1, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	e00f      	b.n	8001542 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001540:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0202 	bic.w	r2, r2, #2
 8001550:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6899      	ldr	r1, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	005a      	lsls	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01b      	beq.n	80015a8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800157e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800158e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6859      	ldr	r1, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	3b01      	subs	r3, #1
 800159c:	035a      	lsls	r2, r3, #13
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	e007      	b.n	80015b8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80015c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	051a      	lsls	r2, r3, #20
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6899      	ldr	r1, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015fa:	025a      	lsls	r2, r3, #9
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6899      	ldr	r1, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	029a      	lsls	r2, r3, #10
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	609a      	str	r2, [r3, #8]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40012300 	.word	0x40012300
 8001638:	0f000001 	.word	0x0f000001

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <__NVIC_SetPriorityGrouping+0x40>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	4313      	orrs	r3, r2
 8001668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166a:	4a04      	ldr	r2, [pc, #16]	@ (800167c <__NVIC_SetPriorityGrouping+0x40>)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	60d3      	str	r3, [r2, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00
 8001680:	05fa0000 	.word	0x05fa0000

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	@ (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	@ (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	@ (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	@ 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	@ 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800176c:	d301      	bcc.n	8001772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176e:	2301      	movs	r3, #1
 8001770:	e00f      	b.n	8001792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <SysTick_Config+0x40>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177a:	210f      	movs	r1, #15
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f7ff ff8e 	bl	80016a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001784:	4b05      	ldr	r3, [pc, #20]	@ (800179c <SysTick_Config+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178a:	4b04      	ldr	r3, [pc, #16]	@ (800179c <SysTick_Config+0x40>)
 800178c:	2207      	movs	r2, #7
 800178e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff47 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff5c 	bl	8001684 <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ff8e 	bl	80016f4 <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff5d 	bl	80016a0 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffb0 	bl	800175c <SysTick_Config>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800180c:	f3bf 8f5f 	dmb	sy
}
 8001810:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001812:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <HAL_MPU_Disable+0x28>)
 8001814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001816:	4a06      	ldr	r2, [pc, #24]	@ (8001830 <HAL_MPU_Disable+0x28>)
 8001818:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800181c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800181e:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <HAL_MPU_Disable+0x2c>)
 8001820:	2200      	movs	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00
 8001834:	e000ed90 	.word	0xe000ed90

08001838 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001840:	4a0b      	ldr	r2, [pc, #44]	@ (8001870 <HAL_MPU_Enable+0x38>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800184a:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <HAL_MPU_Enable+0x3c>)
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184e:	4a09      	ldr	r2, [pc, #36]	@ (8001874 <HAL_MPU_Enable+0x3c>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001854:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001856:	f3bf 8f4f 	dsb	sy
}
 800185a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800185c:	f3bf 8f6f 	isb	sy
}
 8001860:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed90 	.word	0xe000ed90
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	785a      	ldrb	r2, [r3, #1]
 8001884:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <HAL_MPU_ConfigRegion+0x7c>)
 8001886:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001888:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <HAL_MPU_ConfigRegion+0x7c>)
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	4a19      	ldr	r2, [pc, #100]	@ (80018f4 <HAL_MPU_ConfigRegion+0x7c>)
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001894:	4a17      	ldr	r2, [pc, #92]	@ (80018f4 <HAL_MPU_ConfigRegion+0x7c>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7b1b      	ldrb	r3, [r3, #12]
 80018a0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	7adb      	ldrb	r3, [r3, #11]
 80018a6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7a9b      	ldrb	r3, [r3, #10]
 80018ae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7b5b      	ldrb	r3, [r3, #13]
 80018b6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7b9b      	ldrb	r3, [r3, #14]
 80018be:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7bdb      	ldrb	r3, [r3, #15]
 80018c6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7a5b      	ldrb	r3, [r3, #9]
 80018ce:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7a1b      	ldrb	r3, [r3, #8]
 80018d6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018d8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018e2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018e4:	6113      	str	r3, [r2, #16]
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed90 	.word	0xe000ed90

080018f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	@ 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	e175      	b.n	8001c04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001918:	2201      	movs	r2, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	429a      	cmp	r2, r3
 8001932:	f040 8164 	bne.w	8001bfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d005      	beq.n	800194e <HAL_GPIO_Init+0x56>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d130      	bne.n	80019b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001984:	2201      	movs	r2, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 0201 	and.w	r2, r3, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d017      	beq.n	80019ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	2203      	movs	r2, #3
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d123      	bne.n	8001a40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	08da      	lsrs	r2, r3, #3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3208      	adds	r2, #8
 8001a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	220f      	movs	r2, #15
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	08da      	lsrs	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3208      	adds	r2, #8
 8001a3a:	69b9      	ldr	r1, [r7, #24]
 8001a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0203 	and.w	r2, r3, #3
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80be 	beq.w	8001bfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a82:	4b66      	ldr	r3, [pc, #408]	@ (8001c1c <HAL_GPIO_Init+0x324>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	4a65      	ldr	r2, [pc, #404]	@ (8001c1c <HAL_GPIO_Init+0x324>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8e:	4b63      	ldr	r3, [pc, #396]	@ (8001c1c <HAL_GPIO_Init+0x324>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a9a:	4a61      	ldr	r2, [pc, #388]	@ (8001c20 <HAL_GPIO_Init+0x328>)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a58      	ldr	r2, [pc, #352]	@ (8001c24 <HAL_GPIO_Init+0x32c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d037      	beq.n	8001b36 <HAL_GPIO_Init+0x23e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a57      	ldr	r2, [pc, #348]	@ (8001c28 <HAL_GPIO_Init+0x330>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d031      	beq.n	8001b32 <HAL_GPIO_Init+0x23a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a56      	ldr	r2, [pc, #344]	@ (8001c2c <HAL_GPIO_Init+0x334>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d02b      	beq.n	8001b2e <HAL_GPIO_Init+0x236>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a55      	ldr	r2, [pc, #340]	@ (8001c30 <HAL_GPIO_Init+0x338>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d025      	beq.n	8001b2a <HAL_GPIO_Init+0x232>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a54      	ldr	r2, [pc, #336]	@ (8001c34 <HAL_GPIO_Init+0x33c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01f      	beq.n	8001b26 <HAL_GPIO_Init+0x22e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a53      	ldr	r2, [pc, #332]	@ (8001c38 <HAL_GPIO_Init+0x340>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d019      	beq.n	8001b22 <HAL_GPIO_Init+0x22a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a52      	ldr	r2, [pc, #328]	@ (8001c3c <HAL_GPIO_Init+0x344>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <HAL_GPIO_Init+0x226>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a51      	ldr	r2, [pc, #324]	@ (8001c40 <HAL_GPIO_Init+0x348>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00d      	beq.n	8001b1a <HAL_GPIO_Init+0x222>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a50      	ldr	r2, [pc, #320]	@ (8001c44 <HAL_GPIO_Init+0x34c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d007      	beq.n	8001b16 <HAL_GPIO_Init+0x21e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4f      	ldr	r2, [pc, #316]	@ (8001c48 <HAL_GPIO_Init+0x350>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_GPIO_Init+0x21a>
 8001b0e:	2309      	movs	r3, #9
 8001b10:	e012      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b12:	230a      	movs	r3, #10
 8001b14:	e010      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b16:	2308      	movs	r3, #8
 8001b18:	e00e      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	e00c      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b1e:	2306      	movs	r3, #6
 8001b20:	e00a      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b22:	2305      	movs	r3, #5
 8001b24:	e008      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b26:	2304      	movs	r3, #4
 8001b28:	e006      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e004      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e002      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b36:	2300      	movs	r3, #0
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	f002 0203 	and.w	r2, r2, #3
 8001b3e:	0092      	lsls	r2, r2, #2
 8001b40:	4093      	lsls	r3, r2
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b48:	4935      	ldr	r1, [pc, #212]	@ (8001c20 <HAL_GPIO_Init+0x328>)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	3302      	adds	r3, #2
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b56:	4b3d      	ldr	r3, [pc, #244]	@ (8001c4c <HAL_GPIO_Init+0x354>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7a:	4a34      	ldr	r2, [pc, #208]	@ (8001c4c <HAL_GPIO_Init+0x354>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b80:	4b32      	ldr	r3, [pc, #200]	@ (8001c4c <HAL_GPIO_Init+0x354>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba4:	4a29      	ldr	r2, [pc, #164]	@ (8001c4c <HAL_GPIO_Init+0x354>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001baa:	4b28      	ldr	r3, [pc, #160]	@ (8001c4c <HAL_GPIO_Init+0x354>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bce:	4a1f      	ldr	r2, [pc, #124]	@ (8001c4c <HAL_GPIO_Init+0x354>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c4c <HAL_GPIO_Init+0x354>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	@ (8001c4c <HAL_GPIO_Init+0x354>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3301      	adds	r3, #1
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b0f      	cmp	r3, #15
 8001c08:	f67f ae86 	bls.w	8001918 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3724      	adds	r7, #36	@ 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40013800 	.word	0x40013800
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020c00 	.word	0x40020c00
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40021400 	.word	0x40021400
 8001c3c:	40021800 	.word	0x40021800
 8001c40:	40021c00 	.word	0x40021c00
 8001c44:	40022000 	.word	0x40022000
 8001c48:	40022400 	.word	0x40022400
 8001c4c:	40013c00 	.word	0x40013c00

08001c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c60:	787b      	ldrb	r3, [r7, #1]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c6c:	e003      	b.n	8001c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c6e:	887b      	ldrh	r3, [r7, #2]
 8001c70:	041a      	lsls	r2, r3, #16
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	619a      	str	r2, [r3, #24]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e29b      	b.n	80021d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8087 	beq.w	8001db6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca8:	4b96      	ldr	r3, [pc, #600]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d00c      	beq.n	8001cce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb4:	4b93      	ldr	r3, [pc, #588]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d112      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x62>
 8001cc0:	4b90      	ldr	r3, [pc, #576]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cce:	4b8d      	ldr	r3, [pc, #564]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d06c      	beq.n	8001db4 <HAL_RCC_OscConfig+0x130>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d168      	bne.n	8001db4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e275      	b.n	80021d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x7a>
 8001cf0:	4b84      	ldr	r3, [pc, #528]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a83      	ldr	r2, [pc, #524]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e02e      	b.n	8001d5c <HAL_RCC_OscConfig+0xd8>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x9c>
 8001d06:	4b7f      	ldr	r3, [pc, #508]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001d0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b7c      	ldr	r3, [pc, #496]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a7b      	ldr	r2, [pc, #492]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001d18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e01d      	b.n	8001d5c <HAL_RCC_OscConfig+0xd8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0xc0>
 8001d2a:	4b76      	ldr	r3, [pc, #472]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a75      	ldr	r2, [pc, #468]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001d30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b73      	ldr	r3, [pc, #460]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a72      	ldr	r2, [pc, #456]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0xd8>
 8001d44:	4b6f      	ldr	r3, [pc, #444]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a6e      	ldr	r2, [pc, #440]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001d4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b6c      	ldr	r3, [pc, #432]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a6b      	ldr	r2, [pc, #428]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001d56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d013      	beq.n	8001d8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7ff f9a6 	bl	80010b4 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff f9a2 	bl	80010b4 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	@ 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e229      	b.n	80021d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	4b61      	ldr	r3, [pc, #388]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0xe8>
 8001d8a:	e014      	b.n	8001db6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff f992 	bl	80010b4 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff f98e 	bl	80010b4 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	@ 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e215      	b.n	80021d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da6:	4b57      	ldr	r3, [pc, #348]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x110>
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d069      	beq.n	8001e96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc2:	4b50      	ldr	r3, [pc, #320]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00b      	beq.n	8001de6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dce:	4b4d      	ldr	r3, [pc, #308]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d11c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x190>
 8001dda:	4b4a      	ldr	r3, [pc, #296]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d116      	bne.n	8001e14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de6:	4b47      	ldr	r3, [pc, #284]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_RCC_OscConfig+0x17a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e1e9      	b.n	80021d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfe:	4b41      	ldr	r3, [pc, #260]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	493d      	ldr	r1, [pc, #244]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	e040      	b.n	8001e96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d023      	beq.n	8001e64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e1c:	4b39      	ldr	r3, [pc, #228]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a38      	ldr	r2, [pc, #224]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7ff f944 	bl	80010b4 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e30:	f7ff f940 	bl	80010b4 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e1c7      	b.n	80021d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e42:	4b30      	ldr	r3, [pc, #192]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4929      	ldr	r1, [pc, #164]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]
 8001e62:	e018      	b.n	8001e96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e64:	4b27      	ldr	r3, [pc, #156]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a26      	ldr	r2, [pc, #152]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7ff f920 	bl	80010b4 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e78:	f7ff f91c 	bl	80010b4 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e1a3      	b.n	80021d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d038      	beq.n	8001f14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d019      	beq.n	8001ede <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eaa:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eae:	4a15      	ldr	r2, [pc, #84]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb6:	f7ff f8fd 	bl	80010b4 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ebe:	f7ff f8f9 	bl	80010b4 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e180      	b.n	80021d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x23a>
 8001edc:	e01a      	b.n	8001f14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ee2:	4a08      	ldr	r2, [pc, #32]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eea:	f7ff f8e3 	bl	80010b4 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef2:	f7ff f8df 	bl	80010b4 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d903      	bls.n	8001f08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e166      	b.n	80021d2 <HAL_RCC_OscConfig+0x54e>
 8001f04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f08:	4b92      	ldr	r3, [pc, #584]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1ee      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80a4 	beq.w	800206a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f22:	4b8c      	ldr	r3, [pc, #560]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10d      	bne.n	8001f4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b89      	ldr	r3, [pc, #548]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	4a88      	ldr	r2, [pc, #544]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3a:	4b86      	ldr	r3, [pc, #536]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f46:	2301      	movs	r3, #1
 8001f48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f4a:	4b83      	ldr	r3, [pc, #524]	@ (8002158 <HAL_RCC_OscConfig+0x4d4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d118      	bne.n	8001f88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f56:	4b80      	ldr	r3, [pc, #512]	@ (8002158 <HAL_RCC_OscConfig+0x4d4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a7f      	ldr	r2, [pc, #508]	@ (8002158 <HAL_RCC_OscConfig+0x4d4>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f62:	f7ff f8a7 	bl	80010b4 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6a:	f7ff f8a3 	bl	80010b4 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b64      	cmp	r3, #100	@ 0x64
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e12a      	b.n	80021d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f7c:	4b76      	ldr	r3, [pc, #472]	@ (8002158 <HAL_RCC_OscConfig+0x4d4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x31a>
 8001f90:	4b70      	ldr	r3, [pc, #448]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f94:	4a6f      	ldr	r2, [pc, #444]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9c:	e02d      	b.n	8001ffa <HAL_RCC_OscConfig+0x376>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x33c>
 8001fa6:	4b6b      	ldr	r3, [pc, #428]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001faa:	4a6a      	ldr	r2, [pc, #424]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb2:	4b68      	ldr	r3, [pc, #416]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb6:	4a67      	ldr	r2, [pc, #412]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fbe:	e01c      	b.n	8001ffa <HAL_RCC_OscConfig+0x376>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b05      	cmp	r3, #5
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x35e>
 8001fc8:	4b62      	ldr	r3, [pc, #392]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fcc:	4a61      	ldr	r2, [pc, #388]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd4:	4b5f      	ldr	r3, [pc, #380]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd8:	4a5e      	ldr	r2, [pc, #376]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe0:	e00b      	b.n	8001ffa <HAL_RCC_OscConfig+0x376>
 8001fe2:	4b5c      	ldr	r3, [pc, #368]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe6:	4a5b      	ldr	r2, [pc, #364]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fee:	4b59      	ldr	r3, [pc, #356]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff2:	4a58      	ldr	r2, [pc, #352]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8001ff4:	f023 0304 	bic.w	r3, r3, #4
 8001ff8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d015      	beq.n	800202e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002002:	f7ff f857 	bl	80010b4 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7ff f853 	bl	80010b4 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002018:	4293      	cmp	r3, r2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e0d8      	b.n	80021d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002020:	4b4c      	ldr	r3, [pc, #304]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ee      	beq.n	800200a <HAL_RCC_OscConfig+0x386>
 800202c:	e014      	b.n	8002058 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202e:	f7ff f841 	bl	80010b4 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	e00a      	b.n	800204c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7ff f83d 	bl	80010b4 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002044:	4293      	cmp	r3, r2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e0c2      	b.n	80021d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204c:	4b41      	ldr	r3, [pc, #260]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1ee      	bne.n	8002036 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d105      	bne.n	800206a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205e:	4b3d      	ldr	r3, [pc, #244]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	4a3c      	ldr	r2, [pc, #240]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8002064:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002068:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80ae 	beq.w	80021d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002074:	4b37      	ldr	r3, [pc, #220]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b08      	cmp	r3, #8
 800207e:	d06d      	beq.n	800215c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d14b      	bne.n	8002120 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002088:	4b32      	ldr	r3, [pc, #200]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a31      	ldr	r2, [pc, #196]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 800208e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7ff f80e 	bl	80010b4 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209c:	f7ff f80a 	bl	80010b4 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e091      	b.n	80021d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ae:	4b29      	ldr	r3, [pc, #164]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69da      	ldr	r2, [r3, #28]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c8:	019b      	lsls	r3, r3, #6
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	3b01      	subs	r3, #1
 80020d4:	041b      	lsls	r3, r3, #16
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020dc:	061b      	lsls	r3, r3, #24
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e4:	071b      	lsls	r3, r3, #28
 80020e6:	491b      	ldr	r1, [pc, #108]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ec:	4b19      	ldr	r3, [pc, #100]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a18      	ldr	r2, [pc, #96]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 80020f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe ffdc 	bl	80010b4 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002100:	f7fe ffd8 	bl	80010b4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e05f      	b.n	80021d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x47c>
 800211e:	e057      	b.n	80021d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002120:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0b      	ldr	r2, [pc, #44]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8002126:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800212a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7fe ffc2 	bl	80010b4 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002134:	f7fe ffbe 	bl	80010b4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e045      	b.n	80021d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002146:	4b03      	ldr	r3, [pc, #12]	@ (8002154 <HAL_RCC_OscConfig+0x4d0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x4b0>
 8002152:	e03d      	b.n	80021d0 <HAL_RCC_OscConfig+0x54c>
 8002154:	40023800 	.word	0x40023800
 8002158:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800215c:	4b1f      	ldr	r3, [pc, #124]	@ (80021dc <HAL_RCC_OscConfig+0x558>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d030      	beq.n	80021cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d129      	bne.n	80021cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d122      	bne.n	80021cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800218c:	4013      	ands	r3, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002192:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002194:	4293      	cmp	r3, r2
 8002196:	d119      	bne.n	80021cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a2:	085b      	lsrs	r3, r3, #1
 80021a4:	3b01      	subs	r3, #1
 80021a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d10f      	bne.n	80021cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0d0      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b6a      	ldr	r3, [pc, #424]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d910      	bls.n	8002228 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b67      	ldr	r3, [pc, #412]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 020f 	bic.w	r2, r3, #15
 800220e:	4965      	ldr	r1, [pc, #404]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b63      	ldr	r3, [pc, #396]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b8      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b59      	ldr	r3, [pc, #356]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a58      	ldr	r2, [pc, #352]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002246:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800224a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002258:	4b53      	ldr	r3, [pc, #332]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a52      	ldr	r2, [pc, #328]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800225e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002262:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b50      	ldr	r3, [pc, #320]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	494d      	ldr	r1, [pc, #308]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d040      	beq.n	8002304 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b47      	ldr	r3, [pc, #284]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e07f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b41      	ldr	r3, [pc, #260]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e073      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e06b      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b39      	ldr	r3, [pc, #228]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4936      	ldr	r1, [pc, #216]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d4:	f7fe feee 	bl	80010b4 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7fe feea 	bl	80010b4 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e053      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b2d      	ldr	r3, [pc, #180]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b27      	ldr	r3, [pc, #156]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d210      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 020f 	bic.w	r2, r3, #15
 800231a:	4922      	ldr	r1, [pc, #136]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b20      	ldr	r3, [pc, #128]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e032      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4916      	ldr	r1, [pc, #88]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800235e:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	490e      	ldr	r1, [pc, #56]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002372:	f000 f821 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002376:	4602      	mov	r2, r0
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	490a      	ldr	r1, [pc, #40]	@ (80023ac <HAL_RCC_ClockConfig+0x1cc>)
 8002384:	5ccb      	ldrb	r3, [r1, r3]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	@ (80023b0 <HAL_RCC_ClockConfig+0x1d0>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <HAL_RCC_ClockConfig+0x1d4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fe4a 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023c00 	.word	0x40023c00
 80023a8:	40023800 	.word	0x40023800
 80023ac:	08004498 	.word	0x08004498
 80023b0:	20000004 	.word	0x20000004
 80023b4:	20000008 	.word	0x20000008

080023b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023bc:	b090      	sub	sp, #64	@ 0x40
 80023be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80023c4:	2300      	movs	r3, #0
 80023c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023c8:	2300      	movs	r3, #0
 80023ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d0:	4b59      	ldr	r3, [pc, #356]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x180>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d00d      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x40>
 80023dc:	2b08      	cmp	r3, #8
 80023de:	f200 80a1 	bhi.w	8002524 <HAL_RCC_GetSysClockFreq+0x16c>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x34>
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d003      	beq.n	80023f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ea:	e09b      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ec:	4b53      	ldr	r3, [pc, #332]	@ (800253c <HAL_RCC_GetSysClockFreq+0x184>)
 80023ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023f0:	e09b      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f2:	4b53      	ldr	r3, [pc, #332]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x188>)
 80023f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023f6:	e098      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x180>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002400:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002402:	4b4d      	ldr	r3, [pc, #308]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x180>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d028      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240e:	4b4a      	ldr	r3, [pc, #296]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x180>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	099b      	lsrs	r3, r3, #6
 8002414:	2200      	movs	r2, #0
 8002416:	623b      	str	r3, [r7, #32]
 8002418:	627a      	str	r2, [r7, #36]	@ 0x24
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002420:	2100      	movs	r1, #0
 8002422:	4b47      	ldr	r3, [pc, #284]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x188>)
 8002424:	fb03 f201 	mul.w	r2, r3, r1
 8002428:	2300      	movs	r3, #0
 800242a:	fb00 f303 	mul.w	r3, r0, r3
 800242e:	4413      	add	r3, r2
 8002430:	4a43      	ldr	r2, [pc, #268]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x188>)
 8002432:	fba0 1202 	umull	r1, r2, r0, r2
 8002436:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002438:	460a      	mov	r2, r1
 800243a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800243c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800243e:	4413      	add	r3, r2
 8002440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002444:	2200      	movs	r2, #0
 8002446:	61bb      	str	r3, [r7, #24]
 8002448:	61fa      	str	r2, [r7, #28]
 800244a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800244e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002452:	f7fd ff4d 	bl	80002f0 <__aeabi_uldivmod>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4613      	mov	r3, r2
 800245c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800245e:	e053      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002460:	4b35      	ldr	r3, [pc, #212]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x180>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	099b      	lsrs	r3, r3, #6
 8002466:	2200      	movs	r2, #0
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	617a      	str	r2, [r7, #20]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002472:	f04f 0b00 	mov.w	fp, #0
 8002476:	4652      	mov	r2, sl
 8002478:	465b      	mov	r3, fp
 800247a:	f04f 0000 	mov.w	r0, #0
 800247e:	f04f 0100 	mov.w	r1, #0
 8002482:	0159      	lsls	r1, r3, #5
 8002484:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002488:	0150      	lsls	r0, r2, #5
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	ebb2 080a 	subs.w	r8, r2, sl
 8002492:	eb63 090b 	sbc.w	r9, r3, fp
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024aa:	ebb2 0408 	subs.w	r4, r2, r8
 80024ae:	eb63 0509 	sbc.w	r5, r3, r9
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	00eb      	lsls	r3, r5, #3
 80024bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024c0:	00e2      	lsls	r2, r4, #3
 80024c2:	4614      	mov	r4, r2
 80024c4:	461d      	mov	r5, r3
 80024c6:	eb14 030a 	adds.w	r3, r4, sl
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	eb45 030b 	adc.w	r3, r5, fp
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024de:	4629      	mov	r1, r5
 80024e0:	028b      	lsls	r3, r1, #10
 80024e2:	4621      	mov	r1, r4
 80024e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024e8:	4621      	mov	r1, r4
 80024ea:	028a      	lsls	r2, r1, #10
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024f2:	2200      	movs	r2, #0
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	60fa      	str	r2, [r7, #12]
 80024f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024fc:	f7fd fef8 	bl	80002f0 <__aeabi_uldivmod>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4613      	mov	r3, r2
 8002506:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002508:	4b0b      	ldr	r3, [pc, #44]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x180>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	0c1b      	lsrs	r3, r3, #16
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	3301      	adds	r3, #1
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002518:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800251a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002522:	e002      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002524:	4b05      	ldr	r3, [pc, #20]	@ (800253c <HAL_RCC_GetSysClockFreq+0x184>)
 8002526:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800252a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800252c:	4618      	mov	r0, r3
 800252e:	3740      	adds	r7, #64	@ 0x40
 8002530:	46bd      	mov	sp, r7
 8002532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	00f42400 	.word	0x00f42400
 8002540:	017d7840 	.word	0x017d7840

08002544 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002548:	4b03      	ldr	r3, [pc, #12]	@ (8002558 <HAL_RCC_GetHCLKFreq+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000004 	.word	0x20000004

0800255c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002560:	f7ff fff0 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b05      	ldr	r3, [pc, #20]	@ (800257c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	0a9b      	lsrs	r3, r3, #10
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4903      	ldr	r1, [pc, #12]	@ (8002580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40023800 	.word	0x40023800
 8002580:	080044a8 	.word	0x080044a8

08002584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002588:	f7ff ffdc 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 800258c:	4602      	mov	r2, r0
 800258e:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	0b5b      	lsrs	r3, r3, #13
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4903      	ldr	r1, [pc, #12]	@ (80025a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800259a:	5ccb      	ldrb	r3, [r1, r3]
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40023800 	.word	0x40023800
 80025a8:	080044a8 	.word	0x080044a8

080025ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d012      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025d4:	4b69      	ldr	r3, [pc, #420]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4a68      	ldr	r2, [pc, #416]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80025de:	6093      	str	r3, [r2, #8]
 80025e0:	4b66      	ldr	r3, [pc, #408]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e8:	4964      	ldr	r1, [pc, #400]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d017      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002606:	4b5d      	ldr	r3, [pc, #372]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800260c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002614:	4959      	ldr	r1, [pc, #356]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002620:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002624:	d101      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002626:	2301      	movs	r3, #1
 8002628:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002632:	2301      	movs	r3, #1
 8002634:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d017      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002642:	4b4e      	ldr	r3, [pc, #312]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002648:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002650:	494a      	ldr	r1, [pc, #296]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002660:	d101      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002662:	2301      	movs	r3, #1
 8002664:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800266e:	2301      	movs	r3, #1
 8002670:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800267e:	2301      	movs	r3, #1
 8002680:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 808b 	beq.w	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002690:	4b3a      	ldr	r3, [pc, #232]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	4a39      	ldr	r2, [pc, #228]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800269a:	6413      	str	r3, [r2, #64]	@ 0x40
 800269c:	4b37      	ldr	r3, [pc, #220]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026a8:	4b35      	ldr	r3, [pc, #212]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a34      	ldr	r2, [pc, #208]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b4:	f7fe fcfe 	bl	80010b4 <HAL_GetTick>
 80026b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026bc:	f7fe fcfa 	bl	80010b4 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	@ 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e38f      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026da:	4b28      	ldr	r3, [pc, #160]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d035      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d02e      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026f8:	4b20      	ldr	r3, [pc, #128]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002700:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002702:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002706:	4a1d      	ldr	r2, [pc, #116]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800270c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800270e:	4b1b      	ldr	r3, [pc, #108]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002712:	4a1a      	ldr	r2, [pc, #104]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002718:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800271a:	4a18      	ldr	r2, [pc, #96]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002720:	4b16      	ldr	r3, [pc, #88]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d114      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fcc2 	bl	80010b4 <HAL_GetTick>
 8002730:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002732:	e00a      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7fe fcbe 	bl	80010b4 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e351      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274a:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0ee      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800275e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002762:	d111      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002764:	4b05      	ldr	r3, [pc, #20]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002770:	4b04      	ldr	r3, [pc, #16]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002772:	400b      	ands	r3, r1
 8002774:	4901      	ldr	r1, [pc, #4]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
 800277a:	e00b      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800277c:	40023800 	.word	0x40023800
 8002780:	40007000 	.word	0x40007000
 8002784:	0ffffcff 	.word	0x0ffffcff
 8002788:	4bac      	ldr	r3, [pc, #688]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4aab      	ldr	r2, [pc, #684]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800278e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002792:	6093      	str	r3, [r2, #8]
 8002794:	4ba9      	ldr	r3, [pc, #676]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002796:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a0:	49a6      	ldr	r1, [pc, #664]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d010      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027b2:	4ba2      	ldr	r3, [pc, #648]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027b8:	4aa0      	ldr	r2, [pc, #640]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027c2:	4b9e      	ldr	r3, [pc, #632]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027cc:	499b      	ldr	r1, [pc, #620]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027e0:	4b96      	ldr	r3, [pc, #600]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027ee:	4993      	ldr	r1, [pc, #588]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002802:	4b8e      	ldr	r3, [pc, #568]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002808:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002810:	498a      	ldr	r1, [pc, #552]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002824:	4b85      	ldr	r3, [pc, #532]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002832:	4982      	ldr	r1, [pc, #520]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002846:	4b7d      	ldr	r3, [pc, #500]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002854:	4979      	ldr	r1, [pc, #484]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002868:	4b74      	ldr	r3, [pc, #464]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286e:	f023 0203 	bic.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	4971      	ldr	r1, [pc, #452]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800288a:	4b6c      	ldr	r3, [pc, #432]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002890:	f023 020c 	bic.w	r2, r3, #12
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002898:	4968      	ldr	r1, [pc, #416]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028ac:	4b63      	ldr	r3, [pc, #396]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ba:	4960      	ldr	r1, [pc, #384]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028ce:	4b5b      	ldr	r3, [pc, #364]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028dc:	4957      	ldr	r1, [pc, #348]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028f0:	4b52      	ldr	r3, [pc, #328]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fe:	494f      	ldr	r1, [pc, #316]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002912:	4b4a      	ldr	r3, [pc, #296]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002918:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002920:	4946      	ldr	r1, [pc, #280]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002934:	4b41      	ldr	r3, [pc, #260]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800293a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002942:	493e      	ldr	r1, [pc, #248]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002956:	4b39      	ldr	r3, [pc, #228]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002964:	4935      	ldr	r1, [pc, #212]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002978:	4b30      	ldr	r3, [pc, #192]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800297e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002986:	492d      	ldr	r1, [pc, #180]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d011      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800299a:	4b28      	ldr	r3, [pc, #160]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029a8:	4924      	ldr	r1, [pc, #144]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029b8:	d101      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80029ba:	2301      	movs	r3, #1
 80029bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80029ca:	2301      	movs	r3, #1
 80029cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029da:	4b18      	ldr	r3, [pc, #96]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e8:	4914      	ldr	r1, [pc, #80]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029fc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a02:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a0c:	490b      	ldr	r1, [pc, #44]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00f      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002a20:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a26:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a30:	4902      	ldr	r1, [pc, #8]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a38:	e002      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00b      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a4c:	4b8a      	ldr	r3, [pc, #552]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5c:	4986      	ldr	r1, [pc, #536]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00b      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a70:	4b81      	ldr	r3, [pc, #516]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a76:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a80:	497d      	ldr	r1, [pc, #500]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d006      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 80d6 	beq.w	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a9c:	4b76      	ldr	r3, [pc, #472]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a75      	ldr	r2, [pc, #468]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002aa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa8:	f7fe fb04 	bl	80010b4 <HAL_GetTick>
 8002aac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ab0:	f7fe fb00 	bl	80010b4 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	@ 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e195      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d021      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11d      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ae2:	4b65      	ldr	r3, [pc, #404]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ae8:	0c1b      	lsrs	r3, r3, #16
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002af0:	4b61      	ldr	r3, [pc, #388]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002af6:	0e1b      	lsrs	r3, r3, #24
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	019a      	lsls	r2, r3, #6
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	041b      	lsls	r3, r3, #16
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	071b      	lsls	r3, r3, #28
 8002b16:	4958      	ldr	r1, [pc, #352]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d004      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d02e      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b48:	d129      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b58:	4b47      	ldr	r3, [pc, #284]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b5e:	0f1b      	lsrs	r3, r3, #28
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	019a      	lsls	r2, r3, #6
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	041b      	lsls	r3, r3, #16
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	061b      	lsls	r3, r3, #24
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	071b      	lsls	r3, r3, #28
 8002b7e:	493e      	ldr	r1, [pc, #248]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b86:	4b3c      	ldr	r3, [pc, #240]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b8c:	f023 021f 	bic.w	r2, r3, #31
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	3b01      	subs	r3, #1
 8002b96:	4938      	ldr	r1, [pc, #224]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01d      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002baa:	4b33      	ldr	r3, [pc, #204]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bb0:	0e1b      	lsrs	r3, r3, #24
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bb8:	4b2f      	ldr	r3, [pc, #188]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bbe:	0f1b      	lsrs	r3, r3, #28
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	019a      	lsls	r2, r3, #6
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	041b      	lsls	r3, r3, #16
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	061b      	lsls	r3, r3, #24
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	071b      	lsls	r3, r3, #28
 8002bde:	4926      	ldr	r1, [pc, #152]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d011      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	019a      	lsls	r2, r3, #6
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	041b      	lsls	r3, r3, #16
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	071b      	lsls	r3, r3, #28
 8002c0e:	491a      	ldr	r1, [pc, #104]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c16:	4b18      	ldr	r3, [pc, #96]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a17      	ldr	r2, [pc, #92]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c22:	f7fe fa47 	bl	80010b4 <HAL_GetTick>
 8002c26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c2a:	f7fe fa43 	bl	80010b4 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b64      	cmp	r3, #100	@ 0x64
 8002c36:	d901      	bls.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e0d8      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	f040 80ce 	bne.w	8002dec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c50:	4b09      	ldr	r3, [pc, #36]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a08      	ldr	r2, [pc, #32]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fa2a 	bl	80010b4 <HAL_GetTick>
 8002c60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c62:	e00b      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c64:	f7fe fa26 	bl	80010b4 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	@ 0x64
 8002c70:	d904      	bls.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0bb      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c88:	d0ec      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d02e      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d12a      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cb2:	4b51      	ldr	r3, [pc, #324]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cc0:	4b4d      	ldr	r3, [pc, #308]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc6:	0f1b      	lsrs	r3, r3, #28
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	019a      	lsls	r2, r3, #6
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	041b      	lsls	r3, r3, #16
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	061b      	lsls	r3, r3, #24
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	071b      	lsls	r3, r3, #28
 8002ce6:	4944      	ldr	r1, [pc, #272]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cee:	4b42      	ldr	r3, [pc, #264]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cf4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	493d      	ldr	r1, [pc, #244]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d022      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d1c:	d11d      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d1e:	4b36      	ldr	r3, [pc, #216]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d24:	0e1b      	lsrs	r3, r3, #24
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d2c:	4b32      	ldr	r3, [pc, #200]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d32:	0f1b      	lsrs	r3, r3, #28
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	019a      	lsls	r2, r3, #6
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	041b      	lsls	r3, r3, #16
 8002d46:	431a      	orrs	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	061b      	lsls	r3, r3, #24
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	071b      	lsls	r3, r3, #28
 8002d52:	4929      	ldr	r1, [pc, #164]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d028      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d66:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6c:	0e1b      	lsrs	r3, r3, #24
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d74:	4b20      	ldr	r3, [pc, #128]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7a:	0c1b      	lsrs	r3, r3, #16
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	019a      	lsls	r2, r3, #6
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	071b      	lsls	r3, r3, #28
 8002d9a:	4917      	ldr	r1, [pc, #92]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002da2:	4b15      	ldr	r3, [pc, #84]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002da8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db0:	4911      	ldr	r1, [pc, #68]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002db8:	4b0f      	ldr	r3, [pc, #60]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc4:	f7fe f976 	bl	80010b4 <HAL_GetTick>
 8002dc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002dcc:	f7fe f972 	bl	80010b4 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	@ 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e007      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dde:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002de6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dea:	d1ef      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800

08002dfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e040      	b.n	8002e90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fe f86e 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2224      	movs	r2, #36	@ 0x24
 8002e28:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fbde 	bl	8003604 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f977 	bl	800313c <UART_SetConfig>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e01b      	b.n	8002e90 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fc5d 	bl	8003748 <UART_CheckIdleState>
 8002e8e:	4603      	mov	r3, r0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	@ 0x28
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d177      	bne.n	8002fa0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_UART_Transmit+0x24>
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e070      	b.n	8002fa2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2221      	movs	r2, #33	@ 0x21
 8002ecc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ece:	f7fe f8f1 	bl	80010b4 <HAL_GetTick>
 8002ed2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	88fa      	ldrh	r2, [r7, #6]
 8002ed8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	88fa      	ldrh	r2, [r7, #6]
 8002ee0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eec:	d108      	bne.n	8002f00 <HAL_UART_Transmit+0x68>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d104      	bne.n	8002f00 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	e003      	b.n	8002f08 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f08:	e02f      	b.n	8002f6a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2180      	movs	r1, #128	@ 0x80
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 fcbf 	bl	8003898 <UART_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e03b      	b.n	8002fa2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10b      	bne.n	8002f48 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f3e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	3302      	adds	r3, #2
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	e007      	b.n	8002f58 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	781a      	ldrb	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3301      	adds	r3, #1
 8002f56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1c9      	bne.n	8002f0a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2140      	movs	r1, #64	@ 0x40
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 fc89 	bl	8003898 <UART_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d004      	beq.n	8002f96 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e005      	b.n	8002fa2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b08a      	sub	sp, #40	@ 0x28
 8002fae:	af02      	add	r7, sp, #8
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	f040 80b5 	bne.w	8003130 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HAL_UART_Receive+0x28>
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e0ad      	b.n	8003132 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2222      	movs	r2, #34	@ 0x22
 8002fe2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fec:	f7fe f862 	bl	80010b4 <HAL_GetTick>
 8002ff0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	88fa      	ldrh	r2, [r7, #6]
 8002ff6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	88fa      	ldrh	r2, [r7, #6]
 8002ffe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300a:	d10e      	bne.n	800302a <HAL_UART_Receive+0x80>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_UART_Receive+0x76>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800301a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800301e:	e02d      	b.n	800307c <HAL_UART_Receive+0xd2>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	22ff      	movs	r2, #255	@ 0xff
 8003024:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003028:	e028      	b.n	800307c <HAL_UART_Receive+0xd2>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10d      	bne.n	800304e <HAL_UART_Receive+0xa4>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_UART_Receive+0x9a>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	22ff      	movs	r2, #255	@ 0xff
 800303e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003042:	e01b      	b.n	800307c <HAL_UART_Receive+0xd2>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	227f      	movs	r2, #127	@ 0x7f
 8003048:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800304c:	e016      	b.n	800307c <HAL_UART_Receive+0xd2>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003056:	d10d      	bne.n	8003074 <HAL_UART_Receive+0xca>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d104      	bne.n	800306a <HAL_UART_Receive+0xc0>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	227f      	movs	r2, #127	@ 0x7f
 8003064:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003068:	e008      	b.n	800307c <HAL_UART_Receive+0xd2>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	223f      	movs	r2, #63	@ 0x3f
 800306e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003072:	e003      	b.n	800307c <HAL_UART_Receive+0xd2>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003082:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800308c:	d108      	bne.n	80030a0 <HAL_UART_Receive+0xf6>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d104      	bne.n	80030a0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	e003      	b.n	80030a8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80030a8:	e036      	b.n	8003118 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2200      	movs	r2, #0
 80030b2:	2120      	movs	r1, #32
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fbef 	bl	8003898 <UART_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e032      	b.n	8003132 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10c      	bne.n	80030ec <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	b29a      	uxth	r2, r3
 80030da:	8a7b      	ldrh	r3, [r7, #18]
 80030dc:	4013      	ands	r3, r2
 80030de:	b29a      	uxth	r2, r3
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	3302      	adds	r3, #2
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	e00c      	b.n	8003106 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	8a7b      	ldrh	r3, [r7, #18]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	4013      	ands	r3, r2
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	3301      	adds	r3, #1
 8003104:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800310c:	b29b      	uxth	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1c2      	bne.n	80030aa <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	e000      	b.n	8003132 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4ba6      	ldr	r3, [pc, #664]	@ (8003400 <UART_SetConfig+0x2c4>)
 8003168:	4013      	ands	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6812      	ldr	r2, [r2, #0]
 800316e:	6979      	ldr	r1, [r7, #20]
 8003170:	430b      	orrs	r3, r1
 8003172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a94      	ldr	r2, [pc, #592]	@ (8003404 <UART_SetConfig+0x2c8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d120      	bne.n	80031fa <UART_SetConfig+0xbe>
 80031b8:	4b93      	ldr	r3, [pc, #588]	@ (8003408 <UART_SetConfig+0x2cc>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d816      	bhi.n	80031f4 <UART_SetConfig+0xb8>
 80031c6:	a201      	add	r2, pc, #4	@ (adr r2, 80031cc <UART_SetConfig+0x90>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	080031dd 	.word	0x080031dd
 80031d0:	080031e9 	.word	0x080031e9
 80031d4:	080031e3 	.word	0x080031e3
 80031d8:	080031ef 	.word	0x080031ef
 80031dc:	2301      	movs	r3, #1
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	e150      	b.n	8003484 <UART_SetConfig+0x348>
 80031e2:	2302      	movs	r3, #2
 80031e4:	77fb      	strb	r3, [r7, #31]
 80031e6:	e14d      	b.n	8003484 <UART_SetConfig+0x348>
 80031e8:	2304      	movs	r3, #4
 80031ea:	77fb      	strb	r3, [r7, #31]
 80031ec:	e14a      	b.n	8003484 <UART_SetConfig+0x348>
 80031ee:	2308      	movs	r3, #8
 80031f0:	77fb      	strb	r3, [r7, #31]
 80031f2:	e147      	b.n	8003484 <UART_SetConfig+0x348>
 80031f4:	2310      	movs	r3, #16
 80031f6:	77fb      	strb	r3, [r7, #31]
 80031f8:	e144      	b.n	8003484 <UART_SetConfig+0x348>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a83      	ldr	r2, [pc, #524]	@ (800340c <UART_SetConfig+0x2d0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d132      	bne.n	800326a <UART_SetConfig+0x12e>
 8003204:	4b80      	ldr	r3, [pc, #512]	@ (8003408 <UART_SetConfig+0x2cc>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d828      	bhi.n	8003264 <UART_SetConfig+0x128>
 8003212:	a201      	add	r2, pc, #4	@ (adr r2, 8003218 <UART_SetConfig+0xdc>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	0800324d 	.word	0x0800324d
 800321c:	08003265 	.word	0x08003265
 8003220:	08003265 	.word	0x08003265
 8003224:	08003265 	.word	0x08003265
 8003228:	08003259 	.word	0x08003259
 800322c:	08003265 	.word	0x08003265
 8003230:	08003265 	.word	0x08003265
 8003234:	08003265 	.word	0x08003265
 8003238:	08003253 	.word	0x08003253
 800323c:	08003265 	.word	0x08003265
 8003240:	08003265 	.word	0x08003265
 8003244:	08003265 	.word	0x08003265
 8003248:	0800325f 	.word	0x0800325f
 800324c:	2300      	movs	r3, #0
 800324e:	77fb      	strb	r3, [r7, #31]
 8003250:	e118      	b.n	8003484 <UART_SetConfig+0x348>
 8003252:	2302      	movs	r3, #2
 8003254:	77fb      	strb	r3, [r7, #31]
 8003256:	e115      	b.n	8003484 <UART_SetConfig+0x348>
 8003258:	2304      	movs	r3, #4
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e112      	b.n	8003484 <UART_SetConfig+0x348>
 800325e:	2308      	movs	r3, #8
 8003260:	77fb      	strb	r3, [r7, #31]
 8003262:	e10f      	b.n	8003484 <UART_SetConfig+0x348>
 8003264:	2310      	movs	r3, #16
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e10c      	b.n	8003484 <UART_SetConfig+0x348>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a68      	ldr	r2, [pc, #416]	@ (8003410 <UART_SetConfig+0x2d4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d120      	bne.n	80032b6 <UART_SetConfig+0x17a>
 8003274:	4b64      	ldr	r3, [pc, #400]	@ (8003408 <UART_SetConfig+0x2cc>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800327e:	2b30      	cmp	r3, #48	@ 0x30
 8003280:	d013      	beq.n	80032aa <UART_SetConfig+0x16e>
 8003282:	2b30      	cmp	r3, #48	@ 0x30
 8003284:	d814      	bhi.n	80032b0 <UART_SetConfig+0x174>
 8003286:	2b20      	cmp	r3, #32
 8003288:	d009      	beq.n	800329e <UART_SetConfig+0x162>
 800328a:	2b20      	cmp	r3, #32
 800328c:	d810      	bhi.n	80032b0 <UART_SetConfig+0x174>
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <UART_SetConfig+0x15c>
 8003292:	2b10      	cmp	r3, #16
 8003294:	d006      	beq.n	80032a4 <UART_SetConfig+0x168>
 8003296:	e00b      	b.n	80032b0 <UART_SetConfig+0x174>
 8003298:	2300      	movs	r3, #0
 800329a:	77fb      	strb	r3, [r7, #31]
 800329c:	e0f2      	b.n	8003484 <UART_SetConfig+0x348>
 800329e:	2302      	movs	r3, #2
 80032a0:	77fb      	strb	r3, [r7, #31]
 80032a2:	e0ef      	b.n	8003484 <UART_SetConfig+0x348>
 80032a4:	2304      	movs	r3, #4
 80032a6:	77fb      	strb	r3, [r7, #31]
 80032a8:	e0ec      	b.n	8003484 <UART_SetConfig+0x348>
 80032aa:	2308      	movs	r3, #8
 80032ac:	77fb      	strb	r3, [r7, #31]
 80032ae:	e0e9      	b.n	8003484 <UART_SetConfig+0x348>
 80032b0:	2310      	movs	r3, #16
 80032b2:	77fb      	strb	r3, [r7, #31]
 80032b4:	e0e6      	b.n	8003484 <UART_SetConfig+0x348>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a56      	ldr	r2, [pc, #344]	@ (8003414 <UART_SetConfig+0x2d8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d120      	bne.n	8003302 <UART_SetConfig+0x1c6>
 80032c0:	4b51      	ldr	r3, [pc, #324]	@ (8003408 <UART_SetConfig+0x2cc>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80032ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80032cc:	d013      	beq.n	80032f6 <UART_SetConfig+0x1ba>
 80032ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80032d0:	d814      	bhi.n	80032fc <UART_SetConfig+0x1c0>
 80032d2:	2b80      	cmp	r3, #128	@ 0x80
 80032d4:	d009      	beq.n	80032ea <UART_SetConfig+0x1ae>
 80032d6:	2b80      	cmp	r3, #128	@ 0x80
 80032d8:	d810      	bhi.n	80032fc <UART_SetConfig+0x1c0>
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <UART_SetConfig+0x1a8>
 80032de:	2b40      	cmp	r3, #64	@ 0x40
 80032e0:	d006      	beq.n	80032f0 <UART_SetConfig+0x1b4>
 80032e2:	e00b      	b.n	80032fc <UART_SetConfig+0x1c0>
 80032e4:	2300      	movs	r3, #0
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	e0cc      	b.n	8003484 <UART_SetConfig+0x348>
 80032ea:	2302      	movs	r3, #2
 80032ec:	77fb      	strb	r3, [r7, #31]
 80032ee:	e0c9      	b.n	8003484 <UART_SetConfig+0x348>
 80032f0:	2304      	movs	r3, #4
 80032f2:	77fb      	strb	r3, [r7, #31]
 80032f4:	e0c6      	b.n	8003484 <UART_SetConfig+0x348>
 80032f6:	2308      	movs	r3, #8
 80032f8:	77fb      	strb	r3, [r7, #31]
 80032fa:	e0c3      	b.n	8003484 <UART_SetConfig+0x348>
 80032fc:	2310      	movs	r3, #16
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e0c0      	b.n	8003484 <UART_SetConfig+0x348>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a44      	ldr	r2, [pc, #272]	@ (8003418 <UART_SetConfig+0x2dc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d125      	bne.n	8003358 <UART_SetConfig+0x21c>
 800330c:	4b3e      	ldr	r3, [pc, #248]	@ (8003408 <UART_SetConfig+0x2cc>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003316:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800331a:	d017      	beq.n	800334c <UART_SetConfig+0x210>
 800331c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003320:	d817      	bhi.n	8003352 <UART_SetConfig+0x216>
 8003322:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003326:	d00b      	beq.n	8003340 <UART_SetConfig+0x204>
 8003328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800332c:	d811      	bhi.n	8003352 <UART_SetConfig+0x216>
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <UART_SetConfig+0x1fe>
 8003332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003336:	d006      	beq.n	8003346 <UART_SetConfig+0x20a>
 8003338:	e00b      	b.n	8003352 <UART_SetConfig+0x216>
 800333a:	2300      	movs	r3, #0
 800333c:	77fb      	strb	r3, [r7, #31]
 800333e:	e0a1      	b.n	8003484 <UART_SetConfig+0x348>
 8003340:	2302      	movs	r3, #2
 8003342:	77fb      	strb	r3, [r7, #31]
 8003344:	e09e      	b.n	8003484 <UART_SetConfig+0x348>
 8003346:	2304      	movs	r3, #4
 8003348:	77fb      	strb	r3, [r7, #31]
 800334a:	e09b      	b.n	8003484 <UART_SetConfig+0x348>
 800334c:	2308      	movs	r3, #8
 800334e:	77fb      	strb	r3, [r7, #31]
 8003350:	e098      	b.n	8003484 <UART_SetConfig+0x348>
 8003352:	2310      	movs	r3, #16
 8003354:	77fb      	strb	r3, [r7, #31]
 8003356:	e095      	b.n	8003484 <UART_SetConfig+0x348>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a2f      	ldr	r2, [pc, #188]	@ (800341c <UART_SetConfig+0x2e0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d125      	bne.n	80033ae <UART_SetConfig+0x272>
 8003362:	4b29      	ldr	r3, [pc, #164]	@ (8003408 <UART_SetConfig+0x2cc>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003368:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800336c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003370:	d017      	beq.n	80033a2 <UART_SetConfig+0x266>
 8003372:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003376:	d817      	bhi.n	80033a8 <UART_SetConfig+0x26c>
 8003378:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800337c:	d00b      	beq.n	8003396 <UART_SetConfig+0x25a>
 800337e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003382:	d811      	bhi.n	80033a8 <UART_SetConfig+0x26c>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <UART_SetConfig+0x254>
 8003388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800338c:	d006      	beq.n	800339c <UART_SetConfig+0x260>
 800338e:	e00b      	b.n	80033a8 <UART_SetConfig+0x26c>
 8003390:	2301      	movs	r3, #1
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e076      	b.n	8003484 <UART_SetConfig+0x348>
 8003396:	2302      	movs	r3, #2
 8003398:	77fb      	strb	r3, [r7, #31]
 800339a:	e073      	b.n	8003484 <UART_SetConfig+0x348>
 800339c:	2304      	movs	r3, #4
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e070      	b.n	8003484 <UART_SetConfig+0x348>
 80033a2:	2308      	movs	r3, #8
 80033a4:	77fb      	strb	r3, [r7, #31]
 80033a6:	e06d      	b.n	8003484 <UART_SetConfig+0x348>
 80033a8:	2310      	movs	r3, #16
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e06a      	b.n	8003484 <UART_SetConfig+0x348>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003420 <UART_SetConfig+0x2e4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d138      	bne.n	800342a <UART_SetConfig+0x2ee>
 80033b8:	4b13      	ldr	r3, [pc, #76]	@ (8003408 <UART_SetConfig+0x2cc>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033be:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80033c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033c6:	d017      	beq.n	80033f8 <UART_SetConfig+0x2bc>
 80033c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033cc:	d82a      	bhi.n	8003424 <UART_SetConfig+0x2e8>
 80033ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033d2:	d00b      	beq.n	80033ec <UART_SetConfig+0x2b0>
 80033d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033d8:	d824      	bhi.n	8003424 <UART_SetConfig+0x2e8>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <UART_SetConfig+0x2aa>
 80033de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033e2:	d006      	beq.n	80033f2 <UART_SetConfig+0x2b6>
 80033e4:	e01e      	b.n	8003424 <UART_SetConfig+0x2e8>
 80033e6:	2300      	movs	r3, #0
 80033e8:	77fb      	strb	r3, [r7, #31]
 80033ea:	e04b      	b.n	8003484 <UART_SetConfig+0x348>
 80033ec:	2302      	movs	r3, #2
 80033ee:	77fb      	strb	r3, [r7, #31]
 80033f0:	e048      	b.n	8003484 <UART_SetConfig+0x348>
 80033f2:	2304      	movs	r3, #4
 80033f4:	77fb      	strb	r3, [r7, #31]
 80033f6:	e045      	b.n	8003484 <UART_SetConfig+0x348>
 80033f8:	2308      	movs	r3, #8
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e042      	b.n	8003484 <UART_SetConfig+0x348>
 80033fe:	bf00      	nop
 8003400:	efff69f3 	.word	0xefff69f3
 8003404:	40011000 	.word	0x40011000
 8003408:	40023800 	.word	0x40023800
 800340c:	40004400 	.word	0x40004400
 8003410:	40004800 	.word	0x40004800
 8003414:	40004c00 	.word	0x40004c00
 8003418:	40005000 	.word	0x40005000
 800341c:	40011400 	.word	0x40011400
 8003420:	40007800 	.word	0x40007800
 8003424:	2310      	movs	r3, #16
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e02c      	b.n	8003484 <UART_SetConfig+0x348>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a72      	ldr	r2, [pc, #456]	@ (80035f8 <UART_SetConfig+0x4bc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d125      	bne.n	8003480 <UART_SetConfig+0x344>
 8003434:	4b71      	ldr	r3, [pc, #452]	@ (80035fc <UART_SetConfig+0x4c0>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800343e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003442:	d017      	beq.n	8003474 <UART_SetConfig+0x338>
 8003444:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003448:	d817      	bhi.n	800347a <UART_SetConfig+0x33e>
 800344a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800344e:	d00b      	beq.n	8003468 <UART_SetConfig+0x32c>
 8003450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003454:	d811      	bhi.n	800347a <UART_SetConfig+0x33e>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <UART_SetConfig+0x326>
 800345a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800345e:	d006      	beq.n	800346e <UART_SetConfig+0x332>
 8003460:	e00b      	b.n	800347a <UART_SetConfig+0x33e>
 8003462:	2300      	movs	r3, #0
 8003464:	77fb      	strb	r3, [r7, #31]
 8003466:	e00d      	b.n	8003484 <UART_SetConfig+0x348>
 8003468:	2302      	movs	r3, #2
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e00a      	b.n	8003484 <UART_SetConfig+0x348>
 800346e:	2304      	movs	r3, #4
 8003470:	77fb      	strb	r3, [r7, #31]
 8003472:	e007      	b.n	8003484 <UART_SetConfig+0x348>
 8003474:	2308      	movs	r3, #8
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e004      	b.n	8003484 <UART_SetConfig+0x348>
 800347a:	2310      	movs	r3, #16
 800347c:	77fb      	strb	r3, [r7, #31]
 800347e:	e001      	b.n	8003484 <UART_SetConfig+0x348>
 8003480:	2310      	movs	r3, #16
 8003482:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800348c:	d15b      	bne.n	8003546 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800348e:	7ffb      	ldrb	r3, [r7, #31]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d828      	bhi.n	80034e6 <UART_SetConfig+0x3aa>
 8003494:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <UART_SetConfig+0x360>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034c1 	.word	0x080034c1
 80034a0:	080034c9 	.word	0x080034c9
 80034a4:	080034d1 	.word	0x080034d1
 80034a8:	080034e7 	.word	0x080034e7
 80034ac:	080034d7 	.word	0x080034d7
 80034b0:	080034e7 	.word	0x080034e7
 80034b4:	080034e7 	.word	0x080034e7
 80034b8:	080034e7 	.word	0x080034e7
 80034bc:	080034df 	.word	0x080034df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c0:	f7ff f84c 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 80034c4:	61b8      	str	r0, [r7, #24]
        break;
 80034c6:	e013      	b.n	80034f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034c8:	f7ff f85c 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 80034cc:	61b8      	str	r0, [r7, #24]
        break;
 80034ce:	e00f      	b.n	80034f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003600 <UART_SetConfig+0x4c4>)
 80034d2:	61bb      	str	r3, [r7, #24]
        break;
 80034d4:	e00c      	b.n	80034f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034d6:	f7fe ff6f 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 80034da:	61b8      	str	r0, [r7, #24]
        break;
 80034dc:	e008      	b.n	80034f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034e2:	61bb      	str	r3, [r7, #24]
        break;
 80034e4:	e004      	b.n	80034f0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	77bb      	strb	r3, [r7, #30]
        break;
 80034ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d074      	beq.n	80035e0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	005a      	lsls	r2, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	085b      	lsrs	r3, r3, #1
 8003500:	441a      	add	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	fbb2 f3f3 	udiv	r3, r2, r3
 800350a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	2b0f      	cmp	r3, #15
 8003510:	d916      	bls.n	8003540 <UART_SetConfig+0x404>
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003518:	d212      	bcs.n	8003540 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	b29b      	uxth	r3, r3
 800351e:	f023 030f 	bic.w	r3, r3, #15
 8003522:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	085b      	lsrs	r3, r3, #1
 8003528:	b29b      	uxth	r3, r3
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	b29a      	uxth	r2, r3
 8003530:	89fb      	ldrh	r3, [r7, #14]
 8003532:	4313      	orrs	r3, r2
 8003534:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	89fa      	ldrh	r2, [r7, #14]
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	e04f      	b.n	80035e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	77bb      	strb	r3, [r7, #30]
 8003544:	e04c      	b.n	80035e0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003546:	7ffb      	ldrb	r3, [r7, #31]
 8003548:	2b08      	cmp	r3, #8
 800354a:	d828      	bhi.n	800359e <UART_SetConfig+0x462>
 800354c:	a201      	add	r2, pc, #4	@ (adr r2, 8003554 <UART_SetConfig+0x418>)
 800354e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003552:	bf00      	nop
 8003554:	08003579 	.word	0x08003579
 8003558:	08003581 	.word	0x08003581
 800355c:	08003589 	.word	0x08003589
 8003560:	0800359f 	.word	0x0800359f
 8003564:	0800358f 	.word	0x0800358f
 8003568:	0800359f 	.word	0x0800359f
 800356c:	0800359f 	.word	0x0800359f
 8003570:	0800359f 	.word	0x0800359f
 8003574:	08003597 	.word	0x08003597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003578:	f7fe fff0 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 800357c:	61b8      	str	r0, [r7, #24]
        break;
 800357e:	e013      	b.n	80035a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003580:	f7ff f800 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 8003584:	61b8      	str	r0, [r7, #24]
        break;
 8003586:	e00f      	b.n	80035a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003588:	4b1d      	ldr	r3, [pc, #116]	@ (8003600 <UART_SetConfig+0x4c4>)
 800358a:	61bb      	str	r3, [r7, #24]
        break;
 800358c:	e00c      	b.n	80035a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800358e:	f7fe ff13 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8003592:	61b8      	str	r0, [r7, #24]
        break;
 8003594:	e008      	b.n	80035a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800359a:	61bb      	str	r3, [r7, #24]
        break;
 800359c:	e004      	b.n	80035a8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	77bb      	strb	r3, [r7, #30]
        break;
 80035a6:	bf00      	nop
    }

    if (pclk != 0U)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d018      	beq.n	80035e0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	085a      	lsrs	r2, r3, #1
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	441a      	add	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2b0f      	cmp	r3, #15
 80035c6:	d909      	bls.n	80035dc <UART_SetConfig+0x4a0>
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ce:	d205      	bcs.n	80035dc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60da      	str	r2, [r3, #12]
 80035da:	e001      	b.n	80035e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80035ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40007c00 	.word	0x40007c00
 80035fc:	40023800 	.word	0x40023800
 8003600:	00f42400 	.word	0x00f42400

08003604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01a      	beq.n	800371a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003702:	d10a      	bne.n	800371a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	605a      	str	r2, [r3, #4]
  }
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b098      	sub	sp, #96	@ 0x60
 800374c:	af02      	add	r7, sp, #8
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003758:	f7fd fcac 	bl	80010b4 <HAL_GetTick>
 800375c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b08      	cmp	r3, #8
 800376a:	d12e      	bne.n	80037ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800376c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003774:	2200      	movs	r2, #0
 8003776:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f88c 	bl	8003898 <UART_WaitOnFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d021      	beq.n	80037ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800379a:	653b      	str	r3, [r7, #80]	@ 0x50
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e6      	bne.n	8003786 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e062      	b.n	8003890 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d149      	bne.n	800386c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e0:	2200      	movs	r2, #0
 80037e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f856 	bl	8003898 <UART_WaitOnFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d03c      	beq.n	800386c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	e853 3f00 	ldrex	r3, [r3]
 80037fe:	623b      	str	r3, [r7, #32]
   return(result);
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003810:	633b      	str	r3, [r7, #48]	@ 0x30
 8003812:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003814:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003818:	e841 2300 	strex	r3, r2, [r1]
 800381c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800381e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e6      	bne.n	80037f2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3308      	adds	r3, #8
 800382a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	60fb      	str	r3, [r7, #12]
   return(result);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3308      	adds	r3, #8
 8003842:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003844:	61fa      	str	r2, [r7, #28]
 8003846:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	69b9      	ldr	r1, [r7, #24]
 800384a:	69fa      	ldr	r2, [r7, #28]
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	617b      	str	r3, [r7, #20]
   return(result);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e5      	bne.n	8003824 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e011      	b.n	8003890 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2220      	movs	r2, #32
 8003876:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3758      	adds	r7, #88	@ 0x58
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	4613      	mov	r3, r2
 80038a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a8:	e04f      	b.n	800394a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d04b      	beq.n	800394a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b2:	f7fd fbff 	bl	80010b4 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d302      	bcc.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e04e      	b.n	800396a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d037      	beq.n	800394a <UART_WaitOnFlagUntilTimeout+0xb2>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b80      	cmp	r3, #128	@ 0x80
 80038de:	d034      	beq.n	800394a <UART_WaitOnFlagUntilTimeout+0xb2>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b40      	cmp	r3, #64	@ 0x40
 80038e4:	d031      	beq.n	800394a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d110      	bne.n	8003916 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2208      	movs	r2, #8
 80038fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f838 	bl	8003972 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2208      	movs	r2, #8
 8003906:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e029      	b.n	800396a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003920:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003924:	d111      	bne.n	800394a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800392e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f81e 	bl	8003972 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2220      	movs	r2, #32
 800393a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e00f      	b.n	800396a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4013      	ands	r3, r2
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	429a      	cmp	r2, r3
 8003958:	bf0c      	ite	eq
 800395a:	2301      	moveq	r3, #1
 800395c:	2300      	movne	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	429a      	cmp	r2, r3
 8003966:	d0a0      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003972:	b480      	push	{r7}
 8003974:	b095      	sub	sp, #84	@ 0x54
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003982:	e853 3f00 	ldrex	r3, [r3]
 8003986:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800398e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003998:	643b      	str	r3, [r7, #64]	@ 0x40
 800399a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800399e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039a0:	e841 2300 	strex	r3, r2, [r1]
 80039a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1e6      	bne.n	800397a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3308      	adds	r3, #8
 80039b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3308      	adds	r3, #8
 80039ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039d4:	e841 2300 	strex	r3, r2, [r1]
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e5      	bne.n	80039ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d118      	bne.n	8003a1a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	e853 3f00 	ldrex	r3, [r3]
 80039f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f023 0310 	bic.w	r3, r3, #16
 80039fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	6979      	ldr	r1, [r7, #20]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	613b      	str	r3, [r7, #16]
   return(result);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e6      	bne.n	80039e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a2e:	bf00      	nop
 8003a30:	3754      	adds	r7, #84	@ 0x54
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <sniprintf>:
 8003a3c:	b40c      	push	{r2, r3}
 8003a3e:	b530      	push	{r4, r5, lr}
 8003a40:	4b17      	ldr	r3, [pc, #92]	@ (8003aa0 <sniprintf+0x64>)
 8003a42:	1e0c      	subs	r4, r1, #0
 8003a44:	681d      	ldr	r5, [r3, #0]
 8003a46:	b09d      	sub	sp, #116	@ 0x74
 8003a48:	da08      	bge.n	8003a5c <sniprintf+0x20>
 8003a4a:	238b      	movs	r3, #139	@ 0x8b
 8003a4c:	602b      	str	r3, [r5, #0]
 8003a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a52:	b01d      	add	sp, #116	@ 0x74
 8003a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a58:	b002      	add	sp, #8
 8003a5a:	4770      	bx	lr
 8003a5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003a60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a64:	bf14      	ite	ne
 8003a66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a6a:	4623      	moveq	r3, r4
 8003a6c:	9304      	str	r3, [sp, #16]
 8003a6e:	9307      	str	r3, [sp, #28]
 8003a70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a74:	9002      	str	r0, [sp, #8]
 8003a76:	9006      	str	r0, [sp, #24]
 8003a78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a7c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003a7e:	ab21      	add	r3, sp, #132	@ 0x84
 8003a80:	a902      	add	r1, sp, #8
 8003a82:	4628      	mov	r0, r5
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	f000 f9a3 	bl	8003dd0 <_svfiprintf_r>
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	bfbc      	itt	lt
 8003a8e:	238b      	movlt	r3, #139	@ 0x8b
 8003a90:	602b      	strlt	r3, [r5, #0]
 8003a92:	2c00      	cmp	r4, #0
 8003a94:	d0dd      	beq.n	8003a52 <sniprintf+0x16>
 8003a96:	9b02      	ldr	r3, [sp, #8]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	e7d9      	b.n	8003a52 <sniprintf+0x16>
 8003a9e:	bf00      	nop
 8003aa0:	20000010 	.word	0x20000010

08003aa4 <memset>:
 8003aa4:	4402      	add	r2, r0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d100      	bne.n	8003aae <memset+0xa>
 8003aac:	4770      	bx	lr
 8003aae:	f803 1b01 	strb.w	r1, [r3], #1
 8003ab2:	e7f9      	b.n	8003aa8 <memset+0x4>

08003ab4 <__errno>:
 8003ab4:	4b01      	ldr	r3, [pc, #4]	@ (8003abc <__errno+0x8>)
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20000010 	.word	0x20000010

08003ac0 <__libc_init_array>:
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8003af8 <__libc_init_array+0x38>)
 8003ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8003afc <__libc_init_array+0x3c>)
 8003ac6:	1b64      	subs	r4, r4, r5
 8003ac8:	10a4      	asrs	r4, r4, #2
 8003aca:	2600      	movs	r6, #0
 8003acc:	42a6      	cmp	r6, r4
 8003ace:	d109      	bne.n	8003ae4 <__libc_init_array+0x24>
 8003ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8003b00 <__libc_init_array+0x40>)
 8003ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8003b04 <__libc_init_array+0x44>)
 8003ad4:	f000 fc66 	bl	80043a4 <_init>
 8003ad8:	1b64      	subs	r4, r4, r5
 8003ada:	10a4      	asrs	r4, r4, #2
 8003adc:	2600      	movs	r6, #0
 8003ade:	42a6      	cmp	r6, r4
 8003ae0:	d105      	bne.n	8003aee <__libc_init_array+0x2e>
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
 8003ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae8:	4798      	blx	r3
 8003aea:	3601      	adds	r6, #1
 8003aec:	e7ee      	b.n	8003acc <__libc_init_array+0xc>
 8003aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af2:	4798      	blx	r3
 8003af4:	3601      	adds	r6, #1
 8003af6:	e7f2      	b.n	8003ade <__libc_init_array+0x1e>
 8003af8:	080044ec 	.word	0x080044ec
 8003afc:	080044ec 	.word	0x080044ec
 8003b00:	080044ec 	.word	0x080044ec
 8003b04:	080044f0 	.word	0x080044f0

08003b08 <__retarget_lock_acquire_recursive>:
 8003b08:	4770      	bx	lr

08003b0a <__retarget_lock_release_recursive>:
 8003b0a:	4770      	bx	lr

08003b0c <memcpy>:
 8003b0c:	440a      	add	r2, r1
 8003b0e:	4291      	cmp	r1, r2
 8003b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b14:	d100      	bne.n	8003b18 <memcpy+0xc>
 8003b16:	4770      	bx	lr
 8003b18:	b510      	push	{r4, lr}
 8003b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b22:	4291      	cmp	r1, r2
 8003b24:	d1f9      	bne.n	8003b1a <memcpy+0xe>
 8003b26:	bd10      	pop	{r4, pc}

08003b28 <_free_r>:
 8003b28:	b538      	push	{r3, r4, r5, lr}
 8003b2a:	4605      	mov	r5, r0
 8003b2c:	2900      	cmp	r1, #0
 8003b2e:	d041      	beq.n	8003bb4 <_free_r+0x8c>
 8003b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b34:	1f0c      	subs	r4, r1, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bfb8      	it	lt
 8003b3a:	18e4      	addlt	r4, r4, r3
 8003b3c:	f000 f8e0 	bl	8003d00 <__malloc_lock>
 8003b40:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb8 <_free_r+0x90>)
 8003b42:	6813      	ldr	r3, [r2, #0]
 8003b44:	b933      	cbnz	r3, 8003b54 <_free_r+0x2c>
 8003b46:	6063      	str	r3, [r4, #4]
 8003b48:	6014      	str	r4, [r2, #0]
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b50:	f000 b8dc 	b.w	8003d0c <__malloc_unlock>
 8003b54:	42a3      	cmp	r3, r4
 8003b56:	d908      	bls.n	8003b6a <_free_r+0x42>
 8003b58:	6820      	ldr	r0, [r4, #0]
 8003b5a:	1821      	adds	r1, r4, r0
 8003b5c:	428b      	cmp	r3, r1
 8003b5e:	bf01      	itttt	eq
 8003b60:	6819      	ldreq	r1, [r3, #0]
 8003b62:	685b      	ldreq	r3, [r3, #4]
 8003b64:	1809      	addeq	r1, r1, r0
 8003b66:	6021      	streq	r1, [r4, #0]
 8003b68:	e7ed      	b.n	8003b46 <_free_r+0x1e>
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	b10b      	cbz	r3, 8003b74 <_free_r+0x4c>
 8003b70:	42a3      	cmp	r3, r4
 8003b72:	d9fa      	bls.n	8003b6a <_free_r+0x42>
 8003b74:	6811      	ldr	r1, [r2, #0]
 8003b76:	1850      	adds	r0, r2, r1
 8003b78:	42a0      	cmp	r0, r4
 8003b7a:	d10b      	bne.n	8003b94 <_free_r+0x6c>
 8003b7c:	6820      	ldr	r0, [r4, #0]
 8003b7e:	4401      	add	r1, r0
 8003b80:	1850      	adds	r0, r2, r1
 8003b82:	4283      	cmp	r3, r0
 8003b84:	6011      	str	r1, [r2, #0]
 8003b86:	d1e0      	bne.n	8003b4a <_free_r+0x22>
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	6053      	str	r3, [r2, #4]
 8003b8e:	4408      	add	r0, r1
 8003b90:	6010      	str	r0, [r2, #0]
 8003b92:	e7da      	b.n	8003b4a <_free_r+0x22>
 8003b94:	d902      	bls.n	8003b9c <_free_r+0x74>
 8003b96:	230c      	movs	r3, #12
 8003b98:	602b      	str	r3, [r5, #0]
 8003b9a:	e7d6      	b.n	8003b4a <_free_r+0x22>
 8003b9c:	6820      	ldr	r0, [r4, #0]
 8003b9e:	1821      	adds	r1, r4, r0
 8003ba0:	428b      	cmp	r3, r1
 8003ba2:	bf04      	itt	eq
 8003ba4:	6819      	ldreq	r1, [r3, #0]
 8003ba6:	685b      	ldreq	r3, [r3, #4]
 8003ba8:	6063      	str	r3, [r4, #4]
 8003baa:	bf04      	itt	eq
 8003bac:	1809      	addeq	r1, r1, r0
 8003bae:	6021      	streq	r1, [r4, #0]
 8003bb0:	6054      	str	r4, [r2, #4]
 8003bb2:	e7ca      	b.n	8003b4a <_free_r+0x22>
 8003bb4:	bd38      	pop	{r3, r4, r5, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000360 	.word	0x20000360

08003bbc <sbrk_aligned>:
 8003bbc:	b570      	push	{r4, r5, r6, lr}
 8003bbe:	4e0f      	ldr	r6, [pc, #60]	@ (8003bfc <sbrk_aligned+0x40>)
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	6831      	ldr	r1, [r6, #0]
 8003bc4:	4605      	mov	r5, r0
 8003bc6:	b911      	cbnz	r1, 8003bce <sbrk_aligned+0x12>
 8003bc8:	f000 fba6 	bl	8004318 <_sbrk_r>
 8003bcc:	6030      	str	r0, [r6, #0]
 8003bce:	4621      	mov	r1, r4
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	f000 fba1 	bl	8004318 <_sbrk_r>
 8003bd6:	1c43      	adds	r3, r0, #1
 8003bd8:	d103      	bne.n	8003be2 <sbrk_aligned+0x26>
 8003bda:	f04f 34ff 	mov.w	r4, #4294967295
 8003bde:	4620      	mov	r0, r4
 8003be0:	bd70      	pop	{r4, r5, r6, pc}
 8003be2:	1cc4      	adds	r4, r0, #3
 8003be4:	f024 0403 	bic.w	r4, r4, #3
 8003be8:	42a0      	cmp	r0, r4
 8003bea:	d0f8      	beq.n	8003bde <sbrk_aligned+0x22>
 8003bec:	1a21      	subs	r1, r4, r0
 8003bee:	4628      	mov	r0, r5
 8003bf0:	f000 fb92 	bl	8004318 <_sbrk_r>
 8003bf4:	3001      	adds	r0, #1
 8003bf6:	d1f2      	bne.n	8003bde <sbrk_aligned+0x22>
 8003bf8:	e7ef      	b.n	8003bda <sbrk_aligned+0x1e>
 8003bfa:	bf00      	nop
 8003bfc:	2000035c 	.word	0x2000035c

08003c00 <_malloc_r>:
 8003c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c04:	1ccd      	adds	r5, r1, #3
 8003c06:	f025 0503 	bic.w	r5, r5, #3
 8003c0a:	3508      	adds	r5, #8
 8003c0c:	2d0c      	cmp	r5, #12
 8003c0e:	bf38      	it	cc
 8003c10:	250c      	movcc	r5, #12
 8003c12:	2d00      	cmp	r5, #0
 8003c14:	4606      	mov	r6, r0
 8003c16:	db01      	blt.n	8003c1c <_malloc_r+0x1c>
 8003c18:	42a9      	cmp	r1, r5
 8003c1a:	d904      	bls.n	8003c26 <_malloc_r+0x26>
 8003c1c:	230c      	movs	r3, #12
 8003c1e:	6033      	str	r3, [r6, #0]
 8003c20:	2000      	movs	r0, #0
 8003c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003cfc <_malloc_r+0xfc>
 8003c2a:	f000 f869 	bl	8003d00 <__malloc_lock>
 8003c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8003c32:	461c      	mov	r4, r3
 8003c34:	bb44      	cbnz	r4, 8003c88 <_malloc_r+0x88>
 8003c36:	4629      	mov	r1, r5
 8003c38:	4630      	mov	r0, r6
 8003c3a:	f7ff ffbf 	bl	8003bbc <sbrk_aligned>
 8003c3e:	1c43      	adds	r3, r0, #1
 8003c40:	4604      	mov	r4, r0
 8003c42:	d158      	bne.n	8003cf6 <_malloc_r+0xf6>
 8003c44:	f8d8 4000 	ldr.w	r4, [r8]
 8003c48:	4627      	mov	r7, r4
 8003c4a:	2f00      	cmp	r7, #0
 8003c4c:	d143      	bne.n	8003cd6 <_malloc_r+0xd6>
 8003c4e:	2c00      	cmp	r4, #0
 8003c50:	d04b      	beq.n	8003cea <_malloc_r+0xea>
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	4639      	mov	r1, r7
 8003c56:	4630      	mov	r0, r6
 8003c58:	eb04 0903 	add.w	r9, r4, r3
 8003c5c:	f000 fb5c 	bl	8004318 <_sbrk_r>
 8003c60:	4581      	cmp	r9, r0
 8003c62:	d142      	bne.n	8003cea <_malloc_r+0xea>
 8003c64:	6821      	ldr	r1, [r4, #0]
 8003c66:	1a6d      	subs	r5, r5, r1
 8003c68:	4629      	mov	r1, r5
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	f7ff ffa6 	bl	8003bbc <sbrk_aligned>
 8003c70:	3001      	adds	r0, #1
 8003c72:	d03a      	beq.n	8003cea <_malloc_r+0xea>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	442b      	add	r3, r5
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	bb62      	cbnz	r2, 8003cdc <_malloc_r+0xdc>
 8003c82:	f8c8 7000 	str.w	r7, [r8]
 8003c86:	e00f      	b.n	8003ca8 <_malloc_r+0xa8>
 8003c88:	6822      	ldr	r2, [r4, #0]
 8003c8a:	1b52      	subs	r2, r2, r5
 8003c8c:	d420      	bmi.n	8003cd0 <_malloc_r+0xd0>
 8003c8e:	2a0b      	cmp	r2, #11
 8003c90:	d917      	bls.n	8003cc2 <_malloc_r+0xc2>
 8003c92:	1961      	adds	r1, r4, r5
 8003c94:	42a3      	cmp	r3, r4
 8003c96:	6025      	str	r5, [r4, #0]
 8003c98:	bf18      	it	ne
 8003c9a:	6059      	strne	r1, [r3, #4]
 8003c9c:	6863      	ldr	r3, [r4, #4]
 8003c9e:	bf08      	it	eq
 8003ca0:	f8c8 1000 	streq.w	r1, [r8]
 8003ca4:	5162      	str	r2, [r4, r5]
 8003ca6:	604b      	str	r3, [r1, #4]
 8003ca8:	4630      	mov	r0, r6
 8003caa:	f000 f82f 	bl	8003d0c <__malloc_unlock>
 8003cae:	f104 000b 	add.w	r0, r4, #11
 8003cb2:	1d23      	adds	r3, r4, #4
 8003cb4:	f020 0007 	bic.w	r0, r0, #7
 8003cb8:	1ac2      	subs	r2, r0, r3
 8003cba:	bf1c      	itt	ne
 8003cbc:	1a1b      	subne	r3, r3, r0
 8003cbe:	50a3      	strne	r3, [r4, r2]
 8003cc0:	e7af      	b.n	8003c22 <_malloc_r+0x22>
 8003cc2:	6862      	ldr	r2, [r4, #4]
 8003cc4:	42a3      	cmp	r3, r4
 8003cc6:	bf0c      	ite	eq
 8003cc8:	f8c8 2000 	streq.w	r2, [r8]
 8003ccc:	605a      	strne	r2, [r3, #4]
 8003cce:	e7eb      	b.n	8003ca8 <_malloc_r+0xa8>
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	6864      	ldr	r4, [r4, #4]
 8003cd4:	e7ae      	b.n	8003c34 <_malloc_r+0x34>
 8003cd6:	463c      	mov	r4, r7
 8003cd8:	687f      	ldr	r7, [r7, #4]
 8003cda:	e7b6      	b.n	8003c4a <_malloc_r+0x4a>
 8003cdc:	461a      	mov	r2, r3
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	42a3      	cmp	r3, r4
 8003ce2:	d1fb      	bne.n	8003cdc <_malloc_r+0xdc>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	6053      	str	r3, [r2, #4]
 8003ce8:	e7de      	b.n	8003ca8 <_malloc_r+0xa8>
 8003cea:	230c      	movs	r3, #12
 8003cec:	6033      	str	r3, [r6, #0]
 8003cee:	4630      	mov	r0, r6
 8003cf0:	f000 f80c 	bl	8003d0c <__malloc_unlock>
 8003cf4:	e794      	b.n	8003c20 <_malloc_r+0x20>
 8003cf6:	6005      	str	r5, [r0, #0]
 8003cf8:	e7d6      	b.n	8003ca8 <_malloc_r+0xa8>
 8003cfa:	bf00      	nop
 8003cfc:	20000360 	.word	0x20000360

08003d00 <__malloc_lock>:
 8003d00:	4801      	ldr	r0, [pc, #4]	@ (8003d08 <__malloc_lock+0x8>)
 8003d02:	f7ff bf01 	b.w	8003b08 <__retarget_lock_acquire_recursive>
 8003d06:	bf00      	nop
 8003d08:	20000358 	.word	0x20000358

08003d0c <__malloc_unlock>:
 8003d0c:	4801      	ldr	r0, [pc, #4]	@ (8003d14 <__malloc_unlock+0x8>)
 8003d0e:	f7ff befc 	b.w	8003b0a <__retarget_lock_release_recursive>
 8003d12:	bf00      	nop
 8003d14:	20000358 	.word	0x20000358

08003d18 <__ssputs_r>:
 8003d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d1c:	688e      	ldr	r6, [r1, #8]
 8003d1e:	461f      	mov	r7, r3
 8003d20:	42be      	cmp	r6, r7
 8003d22:	680b      	ldr	r3, [r1, #0]
 8003d24:	4682      	mov	sl, r0
 8003d26:	460c      	mov	r4, r1
 8003d28:	4690      	mov	r8, r2
 8003d2a:	d82d      	bhi.n	8003d88 <__ssputs_r+0x70>
 8003d2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003d34:	d026      	beq.n	8003d84 <__ssputs_r+0x6c>
 8003d36:	6965      	ldr	r5, [r4, #20]
 8003d38:	6909      	ldr	r1, [r1, #16]
 8003d3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d3e:	eba3 0901 	sub.w	r9, r3, r1
 8003d42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d46:	1c7b      	adds	r3, r7, #1
 8003d48:	444b      	add	r3, r9
 8003d4a:	106d      	asrs	r5, r5, #1
 8003d4c:	429d      	cmp	r5, r3
 8003d4e:	bf38      	it	cc
 8003d50:	461d      	movcc	r5, r3
 8003d52:	0553      	lsls	r3, r2, #21
 8003d54:	d527      	bpl.n	8003da6 <__ssputs_r+0x8e>
 8003d56:	4629      	mov	r1, r5
 8003d58:	f7ff ff52 	bl	8003c00 <_malloc_r>
 8003d5c:	4606      	mov	r6, r0
 8003d5e:	b360      	cbz	r0, 8003dba <__ssputs_r+0xa2>
 8003d60:	6921      	ldr	r1, [r4, #16]
 8003d62:	464a      	mov	r2, r9
 8003d64:	f7ff fed2 	bl	8003b0c <memcpy>
 8003d68:	89a3      	ldrh	r3, [r4, #12]
 8003d6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d72:	81a3      	strh	r3, [r4, #12]
 8003d74:	6126      	str	r6, [r4, #16]
 8003d76:	6165      	str	r5, [r4, #20]
 8003d78:	444e      	add	r6, r9
 8003d7a:	eba5 0509 	sub.w	r5, r5, r9
 8003d7e:	6026      	str	r6, [r4, #0]
 8003d80:	60a5      	str	r5, [r4, #8]
 8003d82:	463e      	mov	r6, r7
 8003d84:	42be      	cmp	r6, r7
 8003d86:	d900      	bls.n	8003d8a <__ssputs_r+0x72>
 8003d88:	463e      	mov	r6, r7
 8003d8a:	6820      	ldr	r0, [r4, #0]
 8003d8c:	4632      	mov	r2, r6
 8003d8e:	4641      	mov	r1, r8
 8003d90:	f000 faa8 	bl	80042e4 <memmove>
 8003d94:	68a3      	ldr	r3, [r4, #8]
 8003d96:	1b9b      	subs	r3, r3, r6
 8003d98:	60a3      	str	r3, [r4, #8]
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	4433      	add	r3, r6
 8003d9e:	6023      	str	r3, [r4, #0]
 8003da0:	2000      	movs	r0, #0
 8003da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da6:	462a      	mov	r2, r5
 8003da8:	f000 fac6 	bl	8004338 <_realloc_r>
 8003dac:	4606      	mov	r6, r0
 8003dae:	2800      	cmp	r0, #0
 8003db0:	d1e0      	bne.n	8003d74 <__ssputs_r+0x5c>
 8003db2:	6921      	ldr	r1, [r4, #16]
 8003db4:	4650      	mov	r0, sl
 8003db6:	f7ff feb7 	bl	8003b28 <_free_r>
 8003dba:	230c      	movs	r3, #12
 8003dbc:	f8ca 3000 	str.w	r3, [sl]
 8003dc0:	89a3      	ldrh	r3, [r4, #12]
 8003dc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dc6:	81a3      	strh	r3, [r4, #12]
 8003dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dcc:	e7e9      	b.n	8003da2 <__ssputs_r+0x8a>
	...

08003dd0 <_svfiprintf_r>:
 8003dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd4:	4698      	mov	r8, r3
 8003dd6:	898b      	ldrh	r3, [r1, #12]
 8003dd8:	061b      	lsls	r3, r3, #24
 8003dda:	b09d      	sub	sp, #116	@ 0x74
 8003ddc:	4607      	mov	r7, r0
 8003dde:	460d      	mov	r5, r1
 8003de0:	4614      	mov	r4, r2
 8003de2:	d510      	bpl.n	8003e06 <_svfiprintf_r+0x36>
 8003de4:	690b      	ldr	r3, [r1, #16]
 8003de6:	b973      	cbnz	r3, 8003e06 <_svfiprintf_r+0x36>
 8003de8:	2140      	movs	r1, #64	@ 0x40
 8003dea:	f7ff ff09 	bl	8003c00 <_malloc_r>
 8003dee:	6028      	str	r0, [r5, #0]
 8003df0:	6128      	str	r0, [r5, #16]
 8003df2:	b930      	cbnz	r0, 8003e02 <_svfiprintf_r+0x32>
 8003df4:	230c      	movs	r3, #12
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfc:	b01d      	add	sp, #116	@ 0x74
 8003dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e02:	2340      	movs	r3, #64	@ 0x40
 8003e04:	616b      	str	r3, [r5, #20]
 8003e06:	2300      	movs	r3, #0
 8003e08:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e0a:	2320      	movs	r3, #32
 8003e0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e10:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e14:	2330      	movs	r3, #48	@ 0x30
 8003e16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003fb4 <_svfiprintf_r+0x1e4>
 8003e1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e1e:	f04f 0901 	mov.w	r9, #1
 8003e22:	4623      	mov	r3, r4
 8003e24:	469a      	mov	sl, r3
 8003e26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e2a:	b10a      	cbz	r2, 8003e30 <_svfiprintf_r+0x60>
 8003e2c:	2a25      	cmp	r2, #37	@ 0x25
 8003e2e:	d1f9      	bne.n	8003e24 <_svfiprintf_r+0x54>
 8003e30:	ebba 0b04 	subs.w	fp, sl, r4
 8003e34:	d00b      	beq.n	8003e4e <_svfiprintf_r+0x7e>
 8003e36:	465b      	mov	r3, fp
 8003e38:	4622      	mov	r2, r4
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	4638      	mov	r0, r7
 8003e3e:	f7ff ff6b 	bl	8003d18 <__ssputs_r>
 8003e42:	3001      	adds	r0, #1
 8003e44:	f000 80a7 	beq.w	8003f96 <_svfiprintf_r+0x1c6>
 8003e48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e4a:	445a      	add	r2, fp
 8003e4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 809f 	beq.w	8003f96 <_svfiprintf_r+0x1c6>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e62:	f10a 0a01 	add.w	sl, sl, #1
 8003e66:	9304      	str	r3, [sp, #16]
 8003e68:	9307      	str	r3, [sp, #28]
 8003e6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e70:	4654      	mov	r4, sl
 8003e72:	2205      	movs	r2, #5
 8003e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e78:	484e      	ldr	r0, [pc, #312]	@ (8003fb4 <_svfiprintf_r+0x1e4>)
 8003e7a:	f7fc f9e9 	bl	8000250 <memchr>
 8003e7e:	9a04      	ldr	r2, [sp, #16]
 8003e80:	b9d8      	cbnz	r0, 8003eba <_svfiprintf_r+0xea>
 8003e82:	06d0      	lsls	r0, r2, #27
 8003e84:	bf44      	itt	mi
 8003e86:	2320      	movmi	r3, #32
 8003e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e8c:	0711      	lsls	r1, r2, #28
 8003e8e:	bf44      	itt	mi
 8003e90:	232b      	movmi	r3, #43	@ 0x2b
 8003e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e96:	f89a 3000 	ldrb.w	r3, [sl]
 8003e9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e9c:	d015      	beq.n	8003eca <_svfiprintf_r+0xfa>
 8003e9e:	9a07      	ldr	r2, [sp, #28]
 8003ea0:	4654      	mov	r4, sl
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	f04f 0c0a 	mov.w	ip, #10
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eae:	3b30      	subs	r3, #48	@ 0x30
 8003eb0:	2b09      	cmp	r3, #9
 8003eb2:	d94b      	bls.n	8003f4c <_svfiprintf_r+0x17c>
 8003eb4:	b1b0      	cbz	r0, 8003ee4 <_svfiprintf_r+0x114>
 8003eb6:	9207      	str	r2, [sp, #28]
 8003eb8:	e014      	b.n	8003ee4 <_svfiprintf_r+0x114>
 8003eba:	eba0 0308 	sub.w	r3, r0, r8
 8003ebe:	fa09 f303 	lsl.w	r3, r9, r3
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	9304      	str	r3, [sp, #16]
 8003ec6:	46a2      	mov	sl, r4
 8003ec8:	e7d2      	b.n	8003e70 <_svfiprintf_r+0xa0>
 8003eca:	9b03      	ldr	r3, [sp, #12]
 8003ecc:	1d19      	adds	r1, r3, #4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	9103      	str	r1, [sp, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bfbb      	ittet	lt
 8003ed6:	425b      	neglt	r3, r3
 8003ed8:	f042 0202 	orrlt.w	r2, r2, #2
 8003edc:	9307      	strge	r3, [sp, #28]
 8003ede:	9307      	strlt	r3, [sp, #28]
 8003ee0:	bfb8      	it	lt
 8003ee2:	9204      	strlt	r2, [sp, #16]
 8003ee4:	7823      	ldrb	r3, [r4, #0]
 8003ee6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ee8:	d10a      	bne.n	8003f00 <_svfiprintf_r+0x130>
 8003eea:	7863      	ldrb	r3, [r4, #1]
 8003eec:	2b2a      	cmp	r3, #42	@ 0x2a
 8003eee:	d132      	bne.n	8003f56 <_svfiprintf_r+0x186>
 8003ef0:	9b03      	ldr	r3, [sp, #12]
 8003ef2:	1d1a      	adds	r2, r3, #4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	9203      	str	r2, [sp, #12]
 8003ef8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003efc:	3402      	adds	r4, #2
 8003efe:	9305      	str	r3, [sp, #20]
 8003f00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003fc4 <_svfiprintf_r+0x1f4>
 8003f04:	7821      	ldrb	r1, [r4, #0]
 8003f06:	2203      	movs	r2, #3
 8003f08:	4650      	mov	r0, sl
 8003f0a:	f7fc f9a1 	bl	8000250 <memchr>
 8003f0e:	b138      	cbz	r0, 8003f20 <_svfiprintf_r+0x150>
 8003f10:	9b04      	ldr	r3, [sp, #16]
 8003f12:	eba0 000a 	sub.w	r0, r0, sl
 8003f16:	2240      	movs	r2, #64	@ 0x40
 8003f18:	4082      	lsls	r2, r0
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	3401      	adds	r4, #1
 8003f1e:	9304      	str	r3, [sp, #16]
 8003f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f24:	4824      	ldr	r0, [pc, #144]	@ (8003fb8 <_svfiprintf_r+0x1e8>)
 8003f26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f2a:	2206      	movs	r2, #6
 8003f2c:	f7fc f990 	bl	8000250 <memchr>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d036      	beq.n	8003fa2 <_svfiprintf_r+0x1d2>
 8003f34:	4b21      	ldr	r3, [pc, #132]	@ (8003fbc <_svfiprintf_r+0x1ec>)
 8003f36:	bb1b      	cbnz	r3, 8003f80 <_svfiprintf_r+0x1b0>
 8003f38:	9b03      	ldr	r3, [sp, #12]
 8003f3a:	3307      	adds	r3, #7
 8003f3c:	f023 0307 	bic.w	r3, r3, #7
 8003f40:	3308      	adds	r3, #8
 8003f42:	9303      	str	r3, [sp, #12]
 8003f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f46:	4433      	add	r3, r6
 8003f48:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f4a:	e76a      	b.n	8003e22 <_svfiprintf_r+0x52>
 8003f4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f50:	460c      	mov	r4, r1
 8003f52:	2001      	movs	r0, #1
 8003f54:	e7a8      	b.n	8003ea8 <_svfiprintf_r+0xd8>
 8003f56:	2300      	movs	r3, #0
 8003f58:	3401      	adds	r4, #1
 8003f5a:	9305      	str	r3, [sp, #20]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	f04f 0c0a 	mov.w	ip, #10
 8003f62:	4620      	mov	r0, r4
 8003f64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f68:	3a30      	subs	r2, #48	@ 0x30
 8003f6a:	2a09      	cmp	r2, #9
 8003f6c:	d903      	bls.n	8003f76 <_svfiprintf_r+0x1a6>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0c6      	beq.n	8003f00 <_svfiprintf_r+0x130>
 8003f72:	9105      	str	r1, [sp, #20]
 8003f74:	e7c4      	b.n	8003f00 <_svfiprintf_r+0x130>
 8003f76:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e7f0      	b.n	8003f62 <_svfiprintf_r+0x192>
 8003f80:	ab03      	add	r3, sp, #12
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	462a      	mov	r2, r5
 8003f86:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc0 <_svfiprintf_r+0x1f0>)
 8003f88:	a904      	add	r1, sp, #16
 8003f8a:	4638      	mov	r0, r7
 8003f8c:	f3af 8000 	nop.w
 8003f90:	1c42      	adds	r2, r0, #1
 8003f92:	4606      	mov	r6, r0
 8003f94:	d1d6      	bne.n	8003f44 <_svfiprintf_r+0x174>
 8003f96:	89ab      	ldrh	r3, [r5, #12]
 8003f98:	065b      	lsls	r3, r3, #25
 8003f9a:	f53f af2d 	bmi.w	8003df8 <_svfiprintf_r+0x28>
 8003f9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003fa0:	e72c      	b.n	8003dfc <_svfiprintf_r+0x2c>
 8003fa2:	ab03      	add	r3, sp, #12
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	462a      	mov	r2, r5
 8003fa8:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <_svfiprintf_r+0x1f0>)
 8003faa:	a904      	add	r1, sp, #16
 8003fac:	4638      	mov	r0, r7
 8003fae:	f000 f879 	bl	80040a4 <_printf_i>
 8003fb2:	e7ed      	b.n	8003f90 <_svfiprintf_r+0x1c0>
 8003fb4:	080044b0 	.word	0x080044b0
 8003fb8:	080044ba 	.word	0x080044ba
 8003fbc:	00000000 	.word	0x00000000
 8003fc0:	08003d19 	.word	0x08003d19
 8003fc4:	080044b6 	.word	0x080044b6

08003fc8 <_printf_common>:
 8003fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fcc:	4616      	mov	r6, r2
 8003fce:	4698      	mov	r8, r3
 8003fd0:	688a      	ldr	r2, [r1, #8]
 8003fd2:	690b      	ldr	r3, [r1, #16]
 8003fd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	bfb8      	it	lt
 8003fdc:	4613      	movlt	r3, r2
 8003fde:	6033      	str	r3, [r6, #0]
 8003fe0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fe4:	4607      	mov	r7, r0
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	b10a      	cbz	r2, 8003fee <_printf_common+0x26>
 8003fea:	3301      	adds	r3, #1
 8003fec:	6033      	str	r3, [r6, #0]
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	0699      	lsls	r1, r3, #26
 8003ff2:	bf42      	ittt	mi
 8003ff4:	6833      	ldrmi	r3, [r6, #0]
 8003ff6:	3302      	addmi	r3, #2
 8003ff8:	6033      	strmi	r3, [r6, #0]
 8003ffa:	6825      	ldr	r5, [r4, #0]
 8003ffc:	f015 0506 	ands.w	r5, r5, #6
 8004000:	d106      	bne.n	8004010 <_printf_common+0x48>
 8004002:	f104 0a19 	add.w	sl, r4, #25
 8004006:	68e3      	ldr	r3, [r4, #12]
 8004008:	6832      	ldr	r2, [r6, #0]
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	42ab      	cmp	r3, r5
 800400e:	dc26      	bgt.n	800405e <_printf_common+0x96>
 8004010:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004014:	6822      	ldr	r2, [r4, #0]
 8004016:	3b00      	subs	r3, #0
 8004018:	bf18      	it	ne
 800401a:	2301      	movne	r3, #1
 800401c:	0692      	lsls	r2, r2, #26
 800401e:	d42b      	bmi.n	8004078 <_printf_common+0xb0>
 8004020:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004024:	4641      	mov	r1, r8
 8004026:	4638      	mov	r0, r7
 8004028:	47c8      	blx	r9
 800402a:	3001      	adds	r0, #1
 800402c:	d01e      	beq.n	800406c <_printf_common+0xa4>
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	6922      	ldr	r2, [r4, #16]
 8004032:	f003 0306 	and.w	r3, r3, #6
 8004036:	2b04      	cmp	r3, #4
 8004038:	bf02      	ittt	eq
 800403a:	68e5      	ldreq	r5, [r4, #12]
 800403c:	6833      	ldreq	r3, [r6, #0]
 800403e:	1aed      	subeq	r5, r5, r3
 8004040:	68a3      	ldr	r3, [r4, #8]
 8004042:	bf0c      	ite	eq
 8004044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004048:	2500      	movne	r5, #0
 800404a:	4293      	cmp	r3, r2
 800404c:	bfc4      	itt	gt
 800404e:	1a9b      	subgt	r3, r3, r2
 8004050:	18ed      	addgt	r5, r5, r3
 8004052:	2600      	movs	r6, #0
 8004054:	341a      	adds	r4, #26
 8004056:	42b5      	cmp	r5, r6
 8004058:	d11a      	bne.n	8004090 <_printf_common+0xc8>
 800405a:	2000      	movs	r0, #0
 800405c:	e008      	b.n	8004070 <_printf_common+0xa8>
 800405e:	2301      	movs	r3, #1
 8004060:	4652      	mov	r2, sl
 8004062:	4641      	mov	r1, r8
 8004064:	4638      	mov	r0, r7
 8004066:	47c8      	blx	r9
 8004068:	3001      	adds	r0, #1
 800406a:	d103      	bne.n	8004074 <_printf_common+0xac>
 800406c:	f04f 30ff 	mov.w	r0, #4294967295
 8004070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004074:	3501      	adds	r5, #1
 8004076:	e7c6      	b.n	8004006 <_printf_common+0x3e>
 8004078:	18e1      	adds	r1, r4, r3
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	2030      	movs	r0, #48	@ 0x30
 800407e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004082:	4422      	add	r2, r4
 8004084:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004088:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800408c:	3302      	adds	r3, #2
 800408e:	e7c7      	b.n	8004020 <_printf_common+0x58>
 8004090:	2301      	movs	r3, #1
 8004092:	4622      	mov	r2, r4
 8004094:	4641      	mov	r1, r8
 8004096:	4638      	mov	r0, r7
 8004098:	47c8      	blx	r9
 800409a:	3001      	adds	r0, #1
 800409c:	d0e6      	beq.n	800406c <_printf_common+0xa4>
 800409e:	3601      	adds	r6, #1
 80040a0:	e7d9      	b.n	8004056 <_printf_common+0x8e>
	...

080040a4 <_printf_i>:
 80040a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040a8:	7e0f      	ldrb	r7, [r1, #24]
 80040aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040ac:	2f78      	cmp	r7, #120	@ 0x78
 80040ae:	4691      	mov	r9, r2
 80040b0:	4680      	mov	r8, r0
 80040b2:	460c      	mov	r4, r1
 80040b4:	469a      	mov	sl, r3
 80040b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80040ba:	d807      	bhi.n	80040cc <_printf_i+0x28>
 80040bc:	2f62      	cmp	r7, #98	@ 0x62
 80040be:	d80a      	bhi.n	80040d6 <_printf_i+0x32>
 80040c0:	2f00      	cmp	r7, #0
 80040c2:	f000 80d2 	beq.w	800426a <_printf_i+0x1c6>
 80040c6:	2f58      	cmp	r7, #88	@ 0x58
 80040c8:	f000 80b9 	beq.w	800423e <_printf_i+0x19a>
 80040cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040d4:	e03a      	b.n	800414c <_printf_i+0xa8>
 80040d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040da:	2b15      	cmp	r3, #21
 80040dc:	d8f6      	bhi.n	80040cc <_printf_i+0x28>
 80040de:	a101      	add	r1, pc, #4	@ (adr r1, 80040e4 <_printf_i+0x40>)
 80040e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040e4:	0800413d 	.word	0x0800413d
 80040e8:	08004151 	.word	0x08004151
 80040ec:	080040cd 	.word	0x080040cd
 80040f0:	080040cd 	.word	0x080040cd
 80040f4:	080040cd 	.word	0x080040cd
 80040f8:	080040cd 	.word	0x080040cd
 80040fc:	08004151 	.word	0x08004151
 8004100:	080040cd 	.word	0x080040cd
 8004104:	080040cd 	.word	0x080040cd
 8004108:	080040cd 	.word	0x080040cd
 800410c:	080040cd 	.word	0x080040cd
 8004110:	08004251 	.word	0x08004251
 8004114:	0800417b 	.word	0x0800417b
 8004118:	0800420b 	.word	0x0800420b
 800411c:	080040cd 	.word	0x080040cd
 8004120:	080040cd 	.word	0x080040cd
 8004124:	08004273 	.word	0x08004273
 8004128:	080040cd 	.word	0x080040cd
 800412c:	0800417b 	.word	0x0800417b
 8004130:	080040cd 	.word	0x080040cd
 8004134:	080040cd 	.word	0x080040cd
 8004138:	08004213 	.word	0x08004213
 800413c:	6833      	ldr	r3, [r6, #0]
 800413e:	1d1a      	adds	r2, r3, #4
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6032      	str	r2, [r6, #0]
 8004144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004148:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800414c:	2301      	movs	r3, #1
 800414e:	e09d      	b.n	800428c <_printf_i+0x1e8>
 8004150:	6833      	ldr	r3, [r6, #0]
 8004152:	6820      	ldr	r0, [r4, #0]
 8004154:	1d19      	adds	r1, r3, #4
 8004156:	6031      	str	r1, [r6, #0]
 8004158:	0606      	lsls	r6, r0, #24
 800415a:	d501      	bpl.n	8004160 <_printf_i+0xbc>
 800415c:	681d      	ldr	r5, [r3, #0]
 800415e:	e003      	b.n	8004168 <_printf_i+0xc4>
 8004160:	0645      	lsls	r5, r0, #25
 8004162:	d5fb      	bpl.n	800415c <_printf_i+0xb8>
 8004164:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004168:	2d00      	cmp	r5, #0
 800416a:	da03      	bge.n	8004174 <_printf_i+0xd0>
 800416c:	232d      	movs	r3, #45	@ 0x2d
 800416e:	426d      	negs	r5, r5
 8004170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004174:	4859      	ldr	r0, [pc, #356]	@ (80042dc <_printf_i+0x238>)
 8004176:	230a      	movs	r3, #10
 8004178:	e011      	b.n	800419e <_printf_i+0xfa>
 800417a:	6821      	ldr	r1, [r4, #0]
 800417c:	6833      	ldr	r3, [r6, #0]
 800417e:	0608      	lsls	r0, r1, #24
 8004180:	f853 5b04 	ldr.w	r5, [r3], #4
 8004184:	d402      	bmi.n	800418c <_printf_i+0xe8>
 8004186:	0649      	lsls	r1, r1, #25
 8004188:	bf48      	it	mi
 800418a:	b2ad      	uxthmi	r5, r5
 800418c:	2f6f      	cmp	r7, #111	@ 0x6f
 800418e:	4853      	ldr	r0, [pc, #332]	@ (80042dc <_printf_i+0x238>)
 8004190:	6033      	str	r3, [r6, #0]
 8004192:	bf14      	ite	ne
 8004194:	230a      	movne	r3, #10
 8004196:	2308      	moveq	r3, #8
 8004198:	2100      	movs	r1, #0
 800419a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800419e:	6866      	ldr	r6, [r4, #4]
 80041a0:	60a6      	str	r6, [r4, #8]
 80041a2:	2e00      	cmp	r6, #0
 80041a4:	bfa2      	ittt	ge
 80041a6:	6821      	ldrge	r1, [r4, #0]
 80041a8:	f021 0104 	bicge.w	r1, r1, #4
 80041ac:	6021      	strge	r1, [r4, #0]
 80041ae:	b90d      	cbnz	r5, 80041b4 <_printf_i+0x110>
 80041b0:	2e00      	cmp	r6, #0
 80041b2:	d04b      	beq.n	800424c <_printf_i+0x1a8>
 80041b4:	4616      	mov	r6, r2
 80041b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80041ba:	fb03 5711 	mls	r7, r3, r1, r5
 80041be:	5dc7      	ldrb	r7, [r0, r7]
 80041c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041c4:	462f      	mov	r7, r5
 80041c6:	42bb      	cmp	r3, r7
 80041c8:	460d      	mov	r5, r1
 80041ca:	d9f4      	bls.n	80041b6 <_printf_i+0x112>
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d10b      	bne.n	80041e8 <_printf_i+0x144>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	07df      	lsls	r7, r3, #31
 80041d4:	d508      	bpl.n	80041e8 <_printf_i+0x144>
 80041d6:	6923      	ldr	r3, [r4, #16]
 80041d8:	6861      	ldr	r1, [r4, #4]
 80041da:	4299      	cmp	r1, r3
 80041dc:	bfde      	ittt	le
 80041de:	2330      	movle	r3, #48	@ 0x30
 80041e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041e8:	1b92      	subs	r2, r2, r6
 80041ea:	6122      	str	r2, [r4, #16]
 80041ec:	f8cd a000 	str.w	sl, [sp]
 80041f0:	464b      	mov	r3, r9
 80041f2:	aa03      	add	r2, sp, #12
 80041f4:	4621      	mov	r1, r4
 80041f6:	4640      	mov	r0, r8
 80041f8:	f7ff fee6 	bl	8003fc8 <_printf_common>
 80041fc:	3001      	adds	r0, #1
 80041fe:	d14a      	bne.n	8004296 <_printf_i+0x1f2>
 8004200:	f04f 30ff 	mov.w	r0, #4294967295
 8004204:	b004      	add	sp, #16
 8004206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	f043 0320 	orr.w	r3, r3, #32
 8004210:	6023      	str	r3, [r4, #0]
 8004212:	4833      	ldr	r0, [pc, #204]	@ (80042e0 <_printf_i+0x23c>)
 8004214:	2778      	movs	r7, #120	@ 0x78
 8004216:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	6831      	ldr	r1, [r6, #0]
 800421e:	061f      	lsls	r7, r3, #24
 8004220:	f851 5b04 	ldr.w	r5, [r1], #4
 8004224:	d402      	bmi.n	800422c <_printf_i+0x188>
 8004226:	065f      	lsls	r7, r3, #25
 8004228:	bf48      	it	mi
 800422a:	b2ad      	uxthmi	r5, r5
 800422c:	6031      	str	r1, [r6, #0]
 800422e:	07d9      	lsls	r1, r3, #31
 8004230:	bf44      	itt	mi
 8004232:	f043 0320 	orrmi.w	r3, r3, #32
 8004236:	6023      	strmi	r3, [r4, #0]
 8004238:	b11d      	cbz	r5, 8004242 <_printf_i+0x19e>
 800423a:	2310      	movs	r3, #16
 800423c:	e7ac      	b.n	8004198 <_printf_i+0xf4>
 800423e:	4827      	ldr	r0, [pc, #156]	@ (80042dc <_printf_i+0x238>)
 8004240:	e7e9      	b.n	8004216 <_printf_i+0x172>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	f023 0320 	bic.w	r3, r3, #32
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	e7f6      	b.n	800423a <_printf_i+0x196>
 800424c:	4616      	mov	r6, r2
 800424e:	e7bd      	b.n	80041cc <_printf_i+0x128>
 8004250:	6833      	ldr	r3, [r6, #0]
 8004252:	6825      	ldr	r5, [r4, #0]
 8004254:	6961      	ldr	r1, [r4, #20]
 8004256:	1d18      	adds	r0, r3, #4
 8004258:	6030      	str	r0, [r6, #0]
 800425a:	062e      	lsls	r6, r5, #24
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	d501      	bpl.n	8004264 <_printf_i+0x1c0>
 8004260:	6019      	str	r1, [r3, #0]
 8004262:	e002      	b.n	800426a <_printf_i+0x1c6>
 8004264:	0668      	lsls	r0, r5, #25
 8004266:	d5fb      	bpl.n	8004260 <_printf_i+0x1bc>
 8004268:	8019      	strh	r1, [r3, #0]
 800426a:	2300      	movs	r3, #0
 800426c:	6123      	str	r3, [r4, #16]
 800426e:	4616      	mov	r6, r2
 8004270:	e7bc      	b.n	80041ec <_printf_i+0x148>
 8004272:	6833      	ldr	r3, [r6, #0]
 8004274:	1d1a      	adds	r2, r3, #4
 8004276:	6032      	str	r2, [r6, #0]
 8004278:	681e      	ldr	r6, [r3, #0]
 800427a:	6862      	ldr	r2, [r4, #4]
 800427c:	2100      	movs	r1, #0
 800427e:	4630      	mov	r0, r6
 8004280:	f7fb ffe6 	bl	8000250 <memchr>
 8004284:	b108      	cbz	r0, 800428a <_printf_i+0x1e6>
 8004286:	1b80      	subs	r0, r0, r6
 8004288:	6060      	str	r0, [r4, #4]
 800428a:	6863      	ldr	r3, [r4, #4]
 800428c:	6123      	str	r3, [r4, #16]
 800428e:	2300      	movs	r3, #0
 8004290:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004294:	e7aa      	b.n	80041ec <_printf_i+0x148>
 8004296:	6923      	ldr	r3, [r4, #16]
 8004298:	4632      	mov	r2, r6
 800429a:	4649      	mov	r1, r9
 800429c:	4640      	mov	r0, r8
 800429e:	47d0      	blx	sl
 80042a0:	3001      	adds	r0, #1
 80042a2:	d0ad      	beq.n	8004200 <_printf_i+0x15c>
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	079b      	lsls	r3, r3, #30
 80042a8:	d413      	bmi.n	80042d2 <_printf_i+0x22e>
 80042aa:	68e0      	ldr	r0, [r4, #12]
 80042ac:	9b03      	ldr	r3, [sp, #12]
 80042ae:	4298      	cmp	r0, r3
 80042b0:	bfb8      	it	lt
 80042b2:	4618      	movlt	r0, r3
 80042b4:	e7a6      	b.n	8004204 <_printf_i+0x160>
 80042b6:	2301      	movs	r3, #1
 80042b8:	4632      	mov	r2, r6
 80042ba:	4649      	mov	r1, r9
 80042bc:	4640      	mov	r0, r8
 80042be:	47d0      	blx	sl
 80042c0:	3001      	adds	r0, #1
 80042c2:	d09d      	beq.n	8004200 <_printf_i+0x15c>
 80042c4:	3501      	adds	r5, #1
 80042c6:	68e3      	ldr	r3, [r4, #12]
 80042c8:	9903      	ldr	r1, [sp, #12]
 80042ca:	1a5b      	subs	r3, r3, r1
 80042cc:	42ab      	cmp	r3, r5
 80042ce:	dcf2      	bgt.n	80042b6 <_printf_i+0x212>
 80042d0:	e7eb      	b.n	80042aa <_printf_i+0x206>
 80042d2:	2500      	movs	r5, #0
 80042d4:	f104 0619 	add.w	r6, r4, #25
 80042d8:	e7f5      	b.n	80042c6 <_printf_i+0x222>
 80042da:	bf00      	nop
 80042dc:	080044c1 	.word	0x080044c1
 80042e0:	080044d2 	.word	0x080044d2

080042e4 <memmove>:
 80042e4:	4288      	cmp	r0, r1
 80042e6:	b510      	push	{r4, lr}
 80042e8:	eb01 0402 	add.w	r4, r1, r2
 80042ec:	d902      	bls.n	80042f4 <memmove+0x10>
 80042ee:	4284      	cmp	r4, r0
 80042f0:	4623      	mov	r3, r4
 80042f2:	d807      	bhi.n	8004304 <memmove+0x20>
 80042f4:	1e43      	subs	r3, r0, #1
 80042f6:	42a1      	cmp	r1, r4
 80042f8:	d008      	beq.n	800430c <memmove+0x28>
 80042fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004302:	e7f8      	b.n	80042f6 <memmove+0x12>
 8004304:	4402      	add	r2, r0
 8004306:	4601      	mov	r1, r0
 8004308:	428a      	cmp	r2, r1
 800430a:	d100      	bne.n	800430e <memmove+0x2a>
 800430c:	bd10      	pop	{r4, pc}
 800430e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004316:	e7f7      	b.n	8004308 <memmove+0x24>

08004318 <_sbrk_r>:
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4d06      	ldr	r5, [pc, #24]	@ (8004334 <_sbrk_r+0x1c>)
 800431c:	2300      	movs	r3, #0
 800431e:	4604      	mov	r4, r0
 8004320:	4608      	mov	r0, r1
 8004322:	602b      	str	r3, [r5, #0]
 8004324:	f7fc fd74 	bl	8000e10 <_sbrk>
 8004328:	1c43      	adds	r3, r0, #1
 800432a:	d102      	bne.n	8004332 <_sbrk_r+0x1a>
 800432c:	682b      	ldr	r3, [r5, #0]
 800432e:	b103      	cbz	r3, 8004332 <_sbrk_r+0x1a>
 8004330:	6023      	str	r3, [r4, #0]
 8004332:	bd38      	pop	{r3, r4, r5, pc}
 8004334:	20000354 	.word	0x20000354

08004338 <_realloc_r>:
 8004338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800433c:	4680      	mov	r8, r0
 800433e:	4615      	mov	r5, r2
 8004340:	460c      	mov	r4, r1
 8004342:	b921      	cbnz	r1, 800434e <_realloc_r+0x16>
 8004344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004348:	4611      	mov	r1, r2
 800434a:	f7ff bc59 	b.w	8003c00 <_malloc_r>
 800434e:	b92a      	cbnz	r2, 800435c <_realloc_r+0x24>
 8004350:	f7ff fbea 	bl	8003b28 <_free_r>
 8004354:	2400      	movs	r4, #0
 8004356:	4620      	mov	r0, r4
 8004358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800435c:	f000 f81a 	bl	8004394 <_malloc_usable_size_r>
 8004360:	4285      	cmp	r5, r0
 8004362:	4606      	mov	r6, r0
 8004364:	d802      	bhi.n	800436c <_realloc_r+0x34>
 8004366:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800436a:	d8f4      	bhi.n	8004356 <_realloc_r+0x1e>
 800436c:	4629      	mov	r1, r5
 800436e:	4640      	mov	r0, r8
 8004370:	f7ff fc46 	bl	8003c00 <_malloc_r>
 8004374:	4607      	mov	r7, r0
 8004376:	2800      	cmp	r0, #0
 8004378:	d0ec      	beq.n	8004354 <_realloc_r+0x1c>
 800437a:	42b5      	cmp	r5, r6
 800437c:	462a      	mov	r2, r5
 800437e:	4621      	mov	r1, r4
 8004380:	bf28      	it	cs
 8004382:	4632      	movcs	r2, r6
 8004384:	f7ff fbc2 	bl	8003b0c <memcpy>
 8004388:	4621      	mov	r1, r4
 800438a:	4640      	mov	r0, r8
 800438c:	f7ff fbcc 	bl	8003b28 <_free_r>
 8004390:	463c      	mov	r4, r7
 8004392:	e7e0      	b.n	8004356 <_realloc_r+0x1e>

08004394 <_malloc_usable_size_r>:
 8004394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004398:	1f18      	subs	r0, r3, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	bfbc      	itt	lt
 800439e:	580b      	ldrlt	r3, [r1, r0]
 80043a0:	18c0      	addlt	r0, r0, r3
 80043a2:	4770      	bx	lr

080043a4 <_init>:
 80043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a6:	bf00      	nop
 80043a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043aa:	bc08      	pop	{r3}
 80043ac:	469e      	mov	lr, r3
 80043ae:	4770      	bx	lr

080043b0 <_fini>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	bf00      	nop
 80043b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b6:	bc08      	pop	{r3}
 80043b8:	469e      	mov	lr, r3
 80043ba:	4770      	bx	lr
