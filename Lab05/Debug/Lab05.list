
Lab05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006414  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08006618  08006618  00007618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069c8  080069c8  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  080069c8  080069c8  000079c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069d0  080069d0  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069d0  080069d0  000079d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069d4  080069d4  000079d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080069d8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  200001d4  08006bac  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08006bac  00008494  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b71a  00000000  00000000  00008202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e33  00000000  00000000  0001391c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  00015750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c2  00000000  00000000  00016040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028673  00000000  00000000  00016702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf70  00000000  00000000  0003ed75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7fdc  00000000  00000000  0004bce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143cc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003218  00000000  00000000  00143d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00146f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	080065fc 	.word	0x080065fc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	080065fc 	.word	0x080065fc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f2:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x98>)
 80005f4:	4a21      	ldr	r2, [pc, #132]	@ (800067c <MX_ADC1_Init+0x9c>)
 80005f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <MX_ADC1_Init+0x98>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000604:	4b1c      	ldr	r3, [pc, #112]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800060a:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_ADC1_Init+0x98>)
 800060c:	2201      	movs	r2, #1
 800060e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000610:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000618:	4b17      	ldr	r3, [pc, #92]	@ (8000678 <MX_ADC1_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061e:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000620:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <MX_ADC1_Init+0xa0>)
 8000622:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000624:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800062a:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <MX_ADC1_Init+0x98>)
 800062c:	2201      	movs	r2, #1
 800062e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000630:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_ADC1_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063e:	480e      	ldr	r0, [pc, #56]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000640:	f000 fd7a 	bl	8001138 <HAL_ADC_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800064a:	f000 fb09 	bl	8000c60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800064e:	230a      	movs	r3, #10
 8000650:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000652:	2301      	movs	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065a:	463b      	mov	r3, r7
 800065c:	4619      	mov	r1, r3
 800065e:	4806      	ldr	r0, [pc, #24]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000660:	f000 fe8a 	bl	8001378 <HAL_ADC_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800066a:	f000 faf9 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200001f0 	.word	0x200001f0
 800067c:	40012000 	.word	0x40012000
 8000680:	0f000001 	.word	0x0f000001

08000684 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	@ 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a15      	ldr	r2, [pc, #84]	@ (80006f8 <HAL_ADC_MspInit+0x74>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d123      	bne.n	80006ee <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006aa:	4a14      	ldr	r2, [pc, #80]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d6:	2301      	movs	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006da:	2303      	movs	r3, #3
 80006dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	@ (8000700 <HAL_ADC_MspInit+0x7c>)
 80006ea:	f001 f9f3 	bl	8001ad4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	@ 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40012000 	.word	0x40012000
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020800 	.word	0x40020800

08000704 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	@ 0x28
 8000708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b3f      	ldr	r3, [pc, #252]	@ (8000818 <MX_GPIO_Init+0x114>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a3e      	ldr	r2, [pc, #248]	@ (8000818 <MX_GPIO_Init+0x114>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b3c      	ldr	r3, [pc, #240]	@ (8000818 <MX_GPIO_Init+0x114>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000732:	4b39      	ldr	r3, [pc, #228]	@ (8000818 <MX_GPIO_Init+0x114>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a38      	ldr	r2, [pc, #224]	@ (8000818 <MX_GPIO_Init+0x114>)
 8000738:	f043 0320 	orr.w	r3, r3, #32
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b36      	ldr	r3, [pc, #216]	@ (8000818 <MX_GPIO_Init+0x114>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0320 	and.w	r3, r3, #32
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074a:	4b33      	ldr	r3, [pc, #204]	@ (8000818 <MX_GPIO_Init+0x114>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a32      	ldr	r2, [pc, #200]	@ (8000818 <MX_GPIO_Init+0x114>)
 8000750:	f043 0310 	orr.w	r3, r3, #16
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b30      	ldr	r3, [pc, #192]	@ (8000818 <MX_GPIO_Init+0x114>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0310 	and.w	r3, r3, #16
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000762:	4b2d      	ldr	r3, [pc, #180]	@ (8000818 <MX_GPIO_Init+0x114>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a2c      	ldr	r2, [pc, #176]	@ (8000818 <MX_GPIO_Init+0x114>)
 8000768:	f043 0308 	orr.w	r3, r3, #8
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b2a      	ldr	r3, [pc, #168]	@ (8000818 <MX_GPIO_Init+0x114>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0308 	and.w	r3, r3, #8
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800077a:	4b27      	ldr	r3, [pc, #156]	@ (8000818 <MX_GPIO_Init+0x114>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a26      	ldr	r2, [pc, #152]	@ (8000818 <MX_GPIO_Init+0x114>)
 8000780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <MX_GPIO_Init+0x114>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000798:	4820      	ldr	r0, [pc, #128]	@ (800081c <MX_GPIO_Init+0x118>)
 800079a:	f001 fb47 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a4:	481e      	ldr	r0, [pc, #120]	@ (8000820 <MX_GPIO_Init+0x11c>)
 80007a6:	f001 fb41 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_14, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 80007b0:	481c      	ldr	r0, [pc, #112]	@ (8000824 <MX_GPIO_Init+0x120>)
 80007b2:	f001 fb3b 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4813      	ldr	r0, [pc, #76]	@ (800081c <MX_GPIO_Init+0x118>)
 80007d0:	f001 f980 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	480c      	ldr	r0, [pc, #48]	@ (8000820 <MX_GPIO_Init+0x11c>)
 80007ee:	f001 f971 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80007f2:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	@ (8000824 <MX_GPIO_Init+0x120>)
 800080c:	f001 f962 	bl	8001ad4 <HAL_GPIO_Init>

}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	@ 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40021400 	.word	0x40021400
 8000820:	40021000 	.word	0x40021000
 8000824:	40021800 	.word	0x40021800

08000828 <displayHEX>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void displayHEX(uint32_t num ,float voltage)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b092      	sub	sp, #72	@ 0x48
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	ed87 0a00 	vstr	s0, [r7]
    char buffer[50];
    sprintf(buffer, "ADC1_CH10 0x%08lX Vin = %.2f V\r\n", num, voltage);
 8000834:	edd7 7a00 	vldr	s15, [r7]
 8000838:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	ed8d 7b00 	vstr	d7, [sp]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	490b      	ldr	r1, [pc, #44]	@ (8000874 <displayHEX+0x4c>)
 8000848:	4618      	mov	r0, r3
 800084a:	f003 fe17 	bl	800447c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fd44 	bl	80002e0 <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	b29a      	uxth	r2, r3
 800085c:	f107 010c 	add.w	r1, r7, #12
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	4804      	ldr	r0, [pc, #16]	@ (8000878 <displayHEX+0x50>)
 8000866:	f002 fc05 	bl	8003074 <HAL_UART_Transmit>
}
 800086a:	bf00      	nop
 800086c:	3740      	adds	r7, #64	@ 0x40
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	08006618 	.word	0x08006618
 8000878:	200002bc 	.word	0x200002bc

0800087c <displayLavel>:
void displayLavel(uint32_t adcValue){
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	uint8_t level = (adcValue*4) / 4095;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	009a      	lsls	r2, r3, #2
 8000888:	4b4e      	ldr	r3, [pc, #312]	@ (80009c4 <displayLavel+0x148>)
 800088a:	fba3 1302 	umull	r1, r3, r3, r2
 800088e:	1ad2      	subs	r2, r2, r3
 8000890:	0852      	lsrs	r2, r2, #1
 8000892:	4413      	add	r3, r2
 8000894:	0adb      	lsrs	r3, r3, #11
 8000896:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOG ,GPIO_PIN_9, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800089e:	484a      	ldr	r0, [pc, #296]	@ (80009c8 <displayLavel+0x14c>)
 80008a0:	f001 fac4 	bl	8001e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG ,GPIO_PIN_14, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008aa:	4847      	ldr	r0, [pc, #284]	@ (80009c8 <displayLavel+0x14c>)
 80008ac:	f001 fabe 	bl	8001e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF ,GPIO_PIN_15, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b6:	4845      	ldr	r0, [pc, #276]	@ (80009cc <displayLavel+0x150>)
 80008b8:	f001 fab8 	bl	8001e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE ,GPIO_PIN_13, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c2:	4843      	ldr	r0, [pc, #268]	@ (80009d0 <displayLavel+0x154>)
 80008c4:	f001 fab2 	bl	8001e2c <HAL_GPIO_WritePin>

	switch(level){
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	d874      	bhi.n	80009b8 <displayLavel+0x13c>
 80008ce:	a201      	add	r2, pc, #4	@ (adr r2, 80008d4 <displayLavel+0x58>)
 80008d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d4:	080009b9 	.word	0x080009b9
 80008d8:	080008e9 	.word	0x080008e9
 80008dc:	0800091b 	.word	0x0800091b
 80008e0:	0800094d 	.word	0x0800094d
 80008e4:	0800097f 	.word	0x0800097f
		case 0:

		break;
		case 1:
			HAL_GPIO_WritePin(GPIOG ,GPIO_PIN_9, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008ee:	4836      	ldr	r0, [pc, #216]	@ (80009c8 <displayLavel+0x14c>)
 80008f0:	f001 fa9c 	bl	8001e2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG ,GPIO_PIN_14, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008fa:	4833      	ldr	r0, [pc, #204]	@ (80009c8 <displayLavel+0x14c>)
 80008fc:	f001 fa96 	bl	8001e2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF ,GPIO_PIN_15, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000906:	4831      	ldr	r0, [pc, #196]	@ (80009cc <displayLavel+0x150>)
 8000908:	f001 fa90 	bl	8001e2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE ,GPIO_PIN_13, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000912:	482f      	ldr	r0, [pc, #188]	@ (80009d0 <displayLavel+0x154>)
 8000914:	f001 fa8a 	bl	8001e2c <HAL_GPIO_WritePin>
		break;
 8000918:	e04f      	b.n	80009ba <displayLavel+0x13e>
		case 2:
			HAL_GPIO_WritePin(GPIOG ,GPIO_PIN_14, GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000920:	4829      	ldr	r0, [pc, #164]	@ (80009c8 <displayLavel+0x14c>)
 8000922:	f001 fa83 	bl	8001e2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG ,GPIO_PIN_9, GPIO_PIN_SET);
 8000926:	2201      	movs	r2, #1
 8000928:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800092c:	4826      	ldr	r0, [pc, #152]	@ (80009c8 <displayLavel+0x14c>)
 800092e:	f001 fa7d 	bl	8001e2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF ,GPIO_PIN_15, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000938:	4824      	ldr	r0, [pc, #144]	@ (80009cc <displayLavel+0x150>)
 800093a:	f001 fa77 	bl	8001e2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE ,GPIO_PIN_13, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000944:	4822      	ldr	r0, [pc, #136]	@ (80009d0 <displayLavel+0x154>)
 8000946:	f001 fa71 	bl	8001e2c <HAL_GPIO_WritePin>
		break;
 800094a:	e036      	b.n	80009ba <displayLavel+0x13e>
		case 3:
			HAL_GPIO_WritePin(GPIOG ,GPIO_PIN_14, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000952:	481d      	ldr	r0, [pc, #116]	@ (80009c8 <displayLavel+0x14c>)
 8000954:	f001 fa6a 	bl	8001e2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE ,GPIO_PIN_13, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800095e:	481c      	ldr	r0, [pc, #112]	@ (80009d0 <displayLavel+0x154>)
 8000960:	f001 fa64 	bl	8001e2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG ,GPIO_PIN_9, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800096a:	4817      	ldr	r0, [pc, #92]	@ (80009c8 <displayLavel+0x14c>)
 800096c:	f001 fa5e 	bl	8001e2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF ,GPIO_PIN_15, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000976:	4815      	ldr	r0, [pc, #84]	@ (80009cc <displayLavel+0x150>)
 8000978:	f001 fa58 	bl	8001e2c <HAL_GPIO_WritePin>
		break;
 800097c:	e01d      	b.n	80009ba <displayLavel+0x13e>
		case 4:
			HAL_GPIO_WritePin(GPIOG ,GPIO_PIN_9, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000984:	4810      	ldr	r0, [pc, #64]	@ (80009c8 <displayLavel+0x14c>)
 8000986:	f001 fa51 	bl	8001e2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG ,GPIO_PIN_14, GPIO_PIN_SET);
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000990:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <displayLavel+0x14c>)
 8000992:	f001 fa4b 	bl	8001e2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF ,GPIO_PIN_15, GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800099c:	480b      	ldr	r0, [pc, #44]	@ (80009cc <displayLavel+0x150>)
 800099e:	f001 fa45 	bl	8001e2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE ,GPIO_PIN_13, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a8:	4809      	ldr	r0, [pc, #36]	@ (80009d0 <displayLavel+0x154>)
 80009aa:	f001 fa3f 	bl	8001e2c <HAL_GPIO_WritePin>
			HAL_Delay(300);
 80009ae:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009b2:	f000 fb9d 	bl	80010f0 <HAL_Delay>
		break;
 80009b6:	e000      	b.n	80009ba <displayLavel+0x13e>
		default:
			break;
 80009b8:	bf00      	nop
	}
}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	00100101 	.word	0x00100101
 80009c8:	40021800 	.word	0x40021800
 80009cc:	40021400 	.word	0x40021400
 80009d0:	40021000 	.word	0x40021000

080009d4 <average_8>:
int average_8(int x)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	static int samples[8];
	static int i = 0;
	static int total = 0;

	total += x - samples[i];
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <average_8+0x54>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a12      	ldr	r2, [pc, #72]	@ (8000a2c <average_8+0x58>)
 80009e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	1ad2      	subs	r2, r2, r3
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <average_8+0x5c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000a30 <average_8+0x5c>)
 80009f2:	6013      	str	r3, [r2, #0]
	samples[i] = x;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <average_8+0x54>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	490c      	ldr	r1, [pc, #48]	@ (8000a2c <average_8+0x58>)
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	i = (i==7 ? 0 : i+1);
 8000a00:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <average_8+0x54>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b07      	cmp	r3, #7
 8000a06:	d003      	beq.n	8000a10 <average_8+0x3c>
 8000a08:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <average_8+0x54>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	e000      	b.n	8000a12 <average_8+0x3e>
 8000a10:	2300      	movs	r3, #0
 8000a12:	4a05      	ldr	r2, [pc, #20]	@ (8000a28 <average_8+0x54>)
 8000a14:	6013      	str	r3, [r2, #0]
	return total>>3;
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <average_8+0x5c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	10db      	asrs	r3, r3, #3
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	20000248 	.word	0x20000248
 8000a2c:	2000024c 	.word	0x2000024c
 8000a30:	2000026c 	.word	0x2000026c

08000a34 <average_16>:
int average_16(int x)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	static int samples[16];
	static int i = 0;
	static int total = 0;

	total += x - samples[i];
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <average_16+0x54>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <average_16+0x58>)
 8000a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	1ad2      	subs	r2, r2, r3
 8000a4a:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <average_16+0x5c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a0f      	ldr	r2, [pc, #60]	@ (8000a90 <average_16+0x5c>)
 8000a52:	6013      	str	r3, [r2, #0]
	samples[i] = x;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <average_16+0x54>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	490c      	ldr	r1, [pc, #48]	@ (8000a8c <average_16+0x58>)
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	i = (i == 15 ? 0 : i+1);
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <average_16+0x54>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b0f      	cmp	r3, #15
 8000a66:	d003      	beq.n	8000a70 <average_16+0x3c>
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <average_16+0x54>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	e000      	b.n	8000a72 <average_16+0x3e>
 8000a70:	2300      	movs	r3, #0
 8000a72:	4a05      	ldr	r2, [pc, #20]	@ (8000a88 <average_16+0x54>)
 8000a74:	6013      	str	r3, [r2, #0]
	return total >> 4;
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <average_16+0x5c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	111b      	asrs	r3, r3, #4
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	20000270 	.word	0x20000270
 8000a8c:	20000274 	.word	0x20000274
 8000a90:	200002b4 	.word	0x200002b4

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a98:	f000 f8b6 	bl	8000c08 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9c:	f000 facb 	bl	8001036 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa0:	f000 f856 	bl	8000b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa4:	f7ff fe2e 	bl	8000704 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000aa8:	f7ff fd9a 	bl	80005e0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000aac:	f000 fa0a 	bl	8000ec4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000ab0:	4820      	ldr	r0, [pc, #128]	@ (8000b34 <main+0xa0>)
 8000ab2:	f000 fb85 	bl	80011c0 <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 adc_val = HAL_ADC_GetValue(&hadc1);
 8000ab6:	481f      	ldr	r0, [pc, #124]	@ (8000b34 <main+0xa0>)
 8000ab8:	f000 fc50 	bl	800135c <HAL_ADC_GetValue>
 8000abc:	4603      	mov	r3, r0
 8000abe:	4a1e      	ldr	r2, [pc, #120]	@ (8000b38 <main+0xa4>)
 8000ac0:	6013      	str	r3, [r2, #0]
	 adc_avg_8 = average_8(adc_val);
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b38 <main+0xa4>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ff84 	bl	80009d4 <average_8>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b3c <main+0xa8>)
 8000ad2:	601a      	str	r2, [r3, #0]
	 adc_avg_16 = average_16(adc_val);
 8000ad4:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <main+0xa4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ffab 	bl	8000a34 <average_16>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <main+0xac>)
 8000ae4:	601a      	str	r2, [r3, #0]
	 voltage = (adc_val * 3.3f) / 4095.0f;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <main+0xa4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	ee07 3a90 	vmov	s15, r3
 8000aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000af2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000b44 <main+0xb0>
 8000af6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000afa:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8000b48 <main+0xb4>
 8000afe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b02:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <main+0xb8>)
 8000b04:	edc3 7a00 	vstr	s15, [r3]
	 displayHEX(adc_val, voltage);
 8000b08:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <main+0xa4>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b4c <main+0xb8>)
 8000b0e:	edd2 7a00 	vldr	s15, [r2]
 8000b12:	eeb0 0a67 	vmov.f32	s0, s15
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fe86 	bl	8000828 <displayHEX>
	 displayLavel(adc_val);
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <main+0xa4>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff feab 	bl	800087c <displayLavel>
	 HAL_Delay(300);
 8000b26:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000b2a:	f000 fae1 	bl	80010f0 <HAL_Delay>
	 adc_val = HAL_ADC_GetValue(&hadc1);
 8000b2e:	bf00      	nop
 8000b30:	e7c1      	b.n	8000ab6 <main+0x22>
 8000b32:	bf00      	nop
 8000b34:	200001f0 	.word	0x200001f0
 8000b38:	20000238 	.word	0x20000238
 8000b3c:	2000023c 	.word	0x2000023c
 8000b40:	20000240 	.word	0x20000240
 8000b44:	40533333 	.word	0x40533333
 8000b48:	457ff000 	.word	0x457ff000
 8000b4c:	20000244 	.word	0x20000244

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b094      	sub	sp, #80	@ 0x50
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	2234      	movs	r2, #52	@ 0x34
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f003 fcef 	bl	8004542 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b74:	4b22      	ldr	r3, [pc, #136]	@ (8000c00 <SystemClock_Config+0xb0>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b78:	4a21      	ldr	r2, [pc, #132]	@ (8000c00 <SystemClock_Config+0xb0>)
 8000b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b80:	4b1f      	ldr	r3, [pc, #124]	@ (8000c00 <SystemClock_Config+0xb0>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <SystemClock_Config+0xb4>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b94:	4a1b      	ldr	r2, [pc, #108]	@ (8000c04 <SystemClock_Config+0xb4>)
 8000b96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <SystemClock_Config+0xb4>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bac:	2301      	movs	r3, #1
 8000bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f001 f94f 	bl	8001e60 <HAL_RCC_OscConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000bc8:	f000 f84a 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bcc:	230f      	movs	r3, #15
 8000bce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 fbe8 	bl	80023bc <HAL_RCC_ClockConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bf2:	f000 f835 	bl	8000c60 <Error_Handler>
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3750      	adds	r7, #80	@ 0x50
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40007000 	.word	0x40007000

08000c08 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c0e:	463b      	mov	r3, r7
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c1a:	f000 fee3 	bl	80019e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c2a:	231f      	movs	r3, #31
 8000c2c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c2e:	2387      	movs	r3, #135	@ 0x87
 8000c30:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c36:	2300      	movs	r3, #0
 8000c38:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 ff01 	bl	8001a54 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c52:	2004      	movs	r0, #4
 8000c54:	f000 fede 	bl	8001a14 <HAL_MPU_Enable>

}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <Error_Handler+0x8>

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <NMI_Handler+0x4>

08000cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <MemManage_Handler+0x4>

08000ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0a:	f000 f9d1 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  return 1;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <_kill>:

int _kill(int pid, int sig)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d2c:	f003 fc5c 	bl	80045e8 <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2216      	movs	r2, #22
 8000d34:	601a      	str	r2, [r3, #0]
  return -1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <_exit>:

void _exit (int status)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d4a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ffe7 	bl	8000d22 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <_exit+0x12>

08000d58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	e00a      	b.n	8000d80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d6a:	f3af 8000 	nop.w
 8000d6e:	4601      	mov	r1, r0
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	60ba      	str	r2, [r7, #8]
 8000d76:	b2ca      	uxtb	r2, r1
 8000d78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	dbf0      	blt.n	8000d6a <_read+0x12>
  }

  return len;
 8000d88:	687b      	ldr	r3, [r7, #4]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	e009      	b.n	8000db8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	60ba      	str	r2, [r7, #8]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	3301      	adds	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	dbf1      	blt.n	8000da4 <_write+0x12>
  }
  return len;
 8000dc0:	687b      	ldr	r3, [r7, #4]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <_close>:

int _close(int file)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000df2:	605a      	str	r2, [r3, #4]
  return 0;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <_isatty>:

int _isatty(int file)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e3c:	4a14      	ldr	r2, [pc, #80]	@ (8000e90 <_sbrk+0x5c>)
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <_sbrk+0x60>)
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e48:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e50:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <_sbrk+0x64>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	@ (8000e9c <_sbrk+0x68>)
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e56:	4b10      	ldr	r3, [pc, #64]	@ (8000e98 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d207      	bcs.n	8000e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e64:	f003 fbc0 	bl	80045e8 <__errno>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	e009      	b.n	8000e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e74:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	4a05      	ldr	r2, [pc, #20]	@ (8000e98 <_sbrk+0x64>)
 8000e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20080000 	.word	0x20080000
 8000e94:	00000400 	.word	0x00000400
 8000e98:	200002b8 	.word	0x200002b8
 8000e9c:	20000498 	.word	0x20000498

08000ea0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <SystemInit+0x20>)
 8000ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ec0 <SystemInit+0x20>)
 8000eac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <MX_USART3_UART_Init+0x58>)
 8000eca:	4a15      	ldr	r2, [pc, #84]	@ (8000f20 <MX_USART3_UART_Init+0x5c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ece:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <MX_USART3_UART_Init+0x58>)
 8000ed0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ed4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_USART3_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <MX_USART3_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_USART3_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MX_USART3_UART_Init+0x58>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <MX_USART3_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <MX_USART3_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <MX_USART3_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <MX_USART3_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_USART3_UART_Init+0x58>)
 8000f08:	f002 f866 	bl	8002fd8 <HAL_UART_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f12:	f7ff fea5 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200002bc 	.word	0x200002bc
 8000f20:	40004800 	.word	0x40004800

08000f24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0ae      	sub	sp, #184	@ 0xb8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2290      	movs	r2, #144	@ 0x90
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f003 fafc 	bl	8004542 <memset>
  if(uartHandle->Instance==USART3)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a22      	ldr	r2, [pc, #136]	@ (8000fd8 <HAL_UART_MspInit+0xb4>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d13c      	bne.n	8000fce <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f58:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fc10 	bl	8002788 <HAL_RCCEx_PeriphCLKConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f6e:	f7ff fe77 	bl	8000c60 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f72:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <HAL_UART_MspInit+0xb8>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	4a19      	ldr	r2, [pc, #100]	@ (8000fdc <HAL_UART_MspInit+0xb8>)
 8000f78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <HAL_UART_MspInit+0xb8>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <HAL_UART_MspInit+0xb8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a13      	ldr	r2, [pc, #76]	@ (8000fdc <HAL_UART_MspInit+0xb8>)
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <HAL_UART_MspInit+0xb8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fa2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fbc:	2307      	movs	r3, #7
 8000fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <HAL_UART_MspInit+0xbc>)
 8000fca:	f000 fd83 	bl	8001ad4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fce:	bf00      	nop
 8000fd0:	37b8      	adds	r7, #184	@ 0xb8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40004800 	.word	0x40004800
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020c00 	.word	0x40020c00

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800101c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe8:	f7ff ff5a 	bl	8000ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	@ (8001024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	@ (8001030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001012:	f003 faef 	bl	80045f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fd3d 	bl	8000a94 <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001028:	080069d8 	.word	0x080069d8
  ldr r2, =_sbss
 800102c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001030:	20000494 	.word	0x20000494

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>

08001036 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103a:	2003      	movs	r0, #3
 800103c:	f000 fc9e 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001040:	200f      	movs	r0, #15
 8001042:	f000 f805 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001046:	f7ff fe11 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fcab 	bl	80019ca <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 fc81 	bl	8001992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	@ (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000344 	.word	0x20000344

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000344 	.word	0x20000344

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008

08001138 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e031      	b.n	80011b2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fa94 	bl	8000684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	2b00      	cmp	r3, #0
 8001174:	d116      	bne.n	80011a4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800117a:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <HAL_ADC_Init+0x84>)
 800117c:	4013      	ands	r3, r2
 800117e:	f043 0202 	orr.w	r2, r3, #2
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 fa4c 	bl	8001624 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	f023 0303 	bic.w	r3, r3, #3
 800119a:	f043 0201 	orr.w	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80011a2:	e001      	b.n	80011a8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	ffffeefd 	.word	0xffffeefd

080011c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <HAL_ADC_Start+0x1a>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e0ad      	b.n	8001336 <HAL_ADC_Start+0x176>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d018      	beq.n	8001222 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0201 	orr.w	r2, r2, #1
 80011fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001200:	4b50      	ldr	r3, [pc, #320]	@ (8001344 <HAL_ADC_Start+0x184>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a50      	ldr	r2, [pc, #320]	@ (8001348 <HAL_ADC_Start+0x188>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	0c9a      	lsrs	r2, r3, #18
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001214:	e002      	b.n	800121c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3b01      	subs	r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f9      	bne.n	8001216 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b01      	cmp	r3, #1
 800122e:	d175      	bne.n	800131c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001234:	4b45      	ldr	r3, [pc, #276]	@ (800134c <HAL_ADC_Start+0x18c>)
 8001236:	4013      	ands	r3, r2
 8001238:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800124a:	2b00      	cmp	r3, #0
 800124c:	d007      	beq.n	800125e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001256:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800126a:	d106      	bne.n	800127a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001270:	f023 0206 	bic.w	r2, r3, #6
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	645a      	str	r2, [r3, #68]	@ 0x44
 8001278:	e002      	b.n	8001280 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001290:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001292:	4b2f      	ldr	r3, [pc, #188]	@ (8001350 <HAL_ADC_Start+0x190>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 031f 	and.w	r3, r3, #31
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10f      	bne.n	80012be <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d143      	bne.n	8001334 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	e03a      	b.n	8001334 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a24      	ldr	r2, [pc, #144]	@ (8001354 <HAL_ADC_Start+0x194>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d10e      	bne.n	80012e6 <HAL_ADC_Start+0x126>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d107      	bne.n	80012e6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012e4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80012e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <HAL_ADC_Start+0x190>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0310 	and.w	r3, r3, #16
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d120      	bne.n	8001334 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a18      	ldr	r2, [pc, #96]	@ (8001358 <HAL_ADC_Start+0x198>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d11b      	bne.n	8001334 <HAL_ADC_Start+0x174>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d114      	bne.n	8001334 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	e00b      	b.n	8001334 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	f043 0210 	orr.w	r2, r3, #16
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132c:	f043 0201 	orr.w	r2, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000000 	.word	0x20000000
 8001348:	431bde83 	.word	0x431bde83
 800134c:	fffff8fe 	.word	0xfffff8fe
 8001350:	40012300 	.word	0x40012300
 8001354:	40012000 	.word	0x40012000
 8001358:	40012200 	.word	0x40012200

0800135c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x1c>
 8001390:	2302      	movs	r3, #2
 8001392:	e136      	b.n	8001602 <HAL_ADC_ConfigChannel+0x28a>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b09      	cmp	r3, #9
 80013a2:	d93a      	bls.n	800141a <HAL_ADC_ConfigChannel+0xa2>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80013ac:	d035      	beq.n	800141a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68d9      	ldr	r1, [r3, #12]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	461a      	mov	r2, r3
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	3b1e      	subs	r3, #30
 80013c4:	2207      	movs	r2, #7
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	400a      	ands	r2, r1
 80013d2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a8d      	ldr	r2, [pc, #564]	@ (8001610 <HAL_ADC_ConfigChannel+0x298>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d10a      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68d9      	ldr	r1, [r3, #12]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	061a      	lsls	r2, r3, #24
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013f2:	e035      	b.n	8001460 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68d9      	ldr	r1, [r3, #12]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	4618      	mov	r0, r3
 8001406:	4603      	mov	r3, r0
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4403      	add	r3, r0
 800140c:	3b1e      	subs	r3, #30
 800140e:	409a      	lsls	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001418:	e022      	b.n	8001460 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6919      	ldr	r1, [r3, #16]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	461a      	mov	r2, r3
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	2207      	movs	r2, #7
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43da      	mvns	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	400a      	ands	r2, r1
 800143c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6919      	ldr	r1, [r3, #16]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	4603      	mov	r3, r0
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4403      	add	r3, r0
 8001456:	409a      	lsls	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b06      	cmp	r3, #6
 8001466:	d824      	bhi.n	80014b2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	3b05      	subs	r3, #5
 800147a:	221f      	movs	r2, #31
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43da      	mvns	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	400a      	ands	r2, r1
 8001488:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	b29b      	uxth	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	3b05      	subs	r3, #5
 80014a4:	fa00 f203 	lsl.w	r2, r0, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80014b0:	e04c      	b.n	800154c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	d824      	bhi.n	8001504 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	3b23      	subs	r3, #35	@ 0x23
 80014cc:	221f      	movs	r2, #31
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	400a      	ands	r2, r1
 80014da:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	3b23      	subs	r3, #35	@ 0x23
 80014f6:	fa00 f203 	lsl.w	r2, r0, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	631a      	str	r2, [r3, #48]	@ 0x30
 8001502:	e023      	b.n	800154c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	3b41      	subs	r3, #65	@ 0x41
 8001516:	221f      	movs	r2, #31
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43da      	mvns	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	400a      	ands	r2, r1
 8001524:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b29b      	uxth	r3, r3
 8001532:	4618      	mov	r0, r3
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	3b41      	subs	r3, #65	@ 0x41
 8001540:	fa00 f203 	lsl.w	r2, r0, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a30      	ldr	r2, [pc, #192]	@ (8001614 <HAL_ADC_ConfigChannel+0x29c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10a      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1f4>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800155e:	d105      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001560:	4b2d      	ldr	r3, [pc, #180]	@ (8001618 <HAL_ADC_ConfigChannel+0x2a0>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4a2c      	ldr	r2, [pc, #176]	@ (8001618 <HAL_ADC_ConfigChannel+0x2a0>)
 8001566:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800156a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a28      	ldr	r2, [pc, #160]	@ (8001614 <HAL_ADC_ConfigChannel+0x29c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d10f      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x21e>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b12      	cmp	r3, #18
 800157c:	d10b      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800157e:	4b26      	ldr	r3, [pc, #152]	@ (8001618 <HAL_ADC_ConfigChannel+0x2a0>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4a25      	ldr	r2, [pc, #148]	@ (8001618 <HAL_ADC_ConfigChannel+0x2a0>)
 8001584:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001588:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800158a:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <HAL_ADC_ConfigChannel+0x2a0>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4a22      	ldr	r2, [pc, #136]	@ (8001618 <HAL_ADC_ConfigChannel+0x2a0>)
 8001590:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001594:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a1e      	ldr	r2, [pc, #120]	@ (8001614 <HAL_ADC_ConfigChannel+0x29c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d12b      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x280>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001610 <HAL_ADC_ConfigChannel+0x298>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d003      	beq.n	80015b2 <HAL_ADC_ConfigChannel+0x23a>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b11      	cmp	r3, #17
 80015b0:	d122      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80015b2:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <HAL_ADC_ConfigChannel+0x2a0>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4a18      	ldr	r2, [pc, #96]	@ (8001618 <HAL_ADC_ConfigChannel+0x2a0>)
 80015b8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80015bc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80015be:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <HAL_ADC_ConfigChannel+0x2a0>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	4a15      	ldr	r2, [pc, #84]	@ (8001618 <HAL_ADC_ConfigChannel+0x2a0>)
 80015c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015c8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a10      	ldr	r2, [pc, #64]	@ (8001610 <HAL_ADC_ConfigChannel+0x298>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d111      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <HAL_ADC_ConfigChannel+0x2a4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a11      	ldr	r2, [pc, #68]	@ (8001620 <HAL_ADC_ConfigChannel+0x2a8>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	0c9a      	lsrs	r2, r3, #18
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80015ea:	e002      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f9      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	10000012 	.word	0x10000012
 8001614:	40012000 	.word	0x40012000
 8001618:	40012300 	.word	0x40012300
 800161c:	20000000 	.word	0x20000000
 8001620:	431bde83 	.word	0x431bde83

08001624 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800162c:	4b78      	ldr	r3, [pc, #480]	@ (8001810 <ADC_Init+0x1ec>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	4a77      	ldr	r2, [pc, #476]	@ (8001810 <ADC_Init+0x1ec>)
 8001632:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001636:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001638:	4b75      	ldr	r3, [pc, #468]	@ (8001810 <ADC_Init+0x1ec>)
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4973      	ldr	r1, [pc, #460]	@ (8001810 <ADC_Init+0x1ec>)
 8001642:	4313      	orrs	r3, r2
 8001644:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001654:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6859      	ldr	r1, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	021a      	lsls	r2, r3, #8
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001678:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800169a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6899      	ldr	r1, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b2:	4a58      	ldr	r2, [pc, #352]	@ (8001814 <ADC_Init+0x1f0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d022      	beq.n	80016fe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6899      	ldr	r1, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	e00f      	b.n	800171e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800170c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800171c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0202 	bic.w	r2, r2, #2
 800172c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6899      	ldr	r1, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	005a      	lsls	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d01b      	beq.n	8001784 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800175a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800176a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6859      	ldr	r1, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001776:	3b01      	subs	r3, #1
 8001778:	035a      	lsls	r2, r3, #13
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	e007      	b.n	8001794 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001792:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80017a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	051a      	lsls	r2, r3, #20
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6899      	ldr	r1, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017d6:	025a      	lsls	r2, r3, #9
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6899      	ldr	r1, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	029a      	lsls	r2, r3, #10
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	609a      	str	r2, [r3, #8]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	40012300 	.word	0x40012300
 8001814:	0f000001 	.word	0x0f000001

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <__NVIC_SetPriorityGrouping+0x40>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <__NVIC_SetPriorityGrouping+0x44>)
 8001842:	4313      	orrs	r3, r2
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	@ (8001858 <__NVIC_SetPriorityGrouping+0x40>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00
 800185c:	05fa0000 	.word	0x05fa0000

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	@ (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	@ (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	@ 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	@ 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001948:	d301      	bcc.n	800194e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <SysTick_Config+0x40>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001956:	210f      	movs	r1, #15
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f7ff ff8e 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <SysTick_Config+0x40>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <SysTick_Config+0x40>)
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff47 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a4:	f7ff ff5c 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	6978      	ldr	r0, [r7, #20]
 80019b0:	f7ff ff8e 	bl	80018d0 <NVIC_EncodePriority>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff5d 	bl	800187c <__NVIC_SetPriority>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffb0 	bl	8001938 <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019e8:	f3bf 8f5f 	dmb	sy
}
 80019ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80019ee:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <HAL_MPU_Disable+0x28>)
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	4a06      	ldr	r2, [pc, #24]	@ (8001a0c <HAL_MPU_Disable+0x28>)
 80019f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80019fa:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <HAL_MPU_Disable+0x2c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	605a      	str	r2, [r3, #4]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00
 8001a10:	e000ed90 	.word	0xe000ed90

08001a14 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a4c <HAL_MPU_Enable+0x38>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a26:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_MPU_Enable+0x3c>)
 8001a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2a:	4a09      	ldr	r2, [pc, #36]	@ (8001a50 <HAL_MPU_Enable+0x3c>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a30:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a32:	f3bf 8f4f 	dsb	sy
}
 8001a36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a38:	f3bf 8f6f 	isb	sy
}
 8001a3c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed90 	.word	0xe000ed90
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	785a      	ldrb	r2, [r3, #1]
 8001a60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <HAL_MPU_ConfigRegion+0x7c>)
 8001a62:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <HAL_MPU_ConfigRegion+0x7c>)
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	4a19      	ldr	r2, [pc, #100]	@ (8001ad0 <HAL_MPU_ConfigRegion+0x7c>)
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001a70:	4a17      	ldr	r2, [pc, #92]	@ (8001ad0 <HAL_MPU_ConfigRegion+0x7c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7b1b      	ldrb	r3, [r3, #12]
 8001a7c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7adb      	ldrb	r3, [r3, #11]
 8001a82:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7a9b      	ldrb	r3, [r3, #10]
 8001a8a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7b5b      	ldrb	r3, [r3, #13]
 8001a92:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7b9b      	ldrb	r3, [r3, #14]
 8001a9a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7bdb      	ldrb	r3, [r3, #15]
 8001aa2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001aa4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7a5b      	ldrb	r3, [r3, #9]
 8001aaa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001aac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7a1b      	ldrb	r3, [r3, #8]
 8001ab2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ab4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	7812      	ldrb	r2, [r2, #0]
 8001aba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001abc:	4a04      	ldr	r2, [pc, #16]	@ (8001ad0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001abe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ac0:	6113      	str	r3, [r2, #16]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed90 	.word	0xe000ed90

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	@ 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	e175      	b.n	8001de0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001af4:	2201      	movs	r2, #1
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	f040 8164 	bne.w	8001dda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d005      	beq.n	8001b2a <HAL_GPIO_Init+0x56>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d130      	bne.n	8001b8c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2203      	movs	r2, #3
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 0201 	and.w	r2, r3, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d017      	beq.n	8001bc8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d123      	bne.n	8001c1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	08da      	lsrs	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3208      	adds	r2, #8
 8001bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	08da      	lsrs	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3208      	adds	r2, #8
 8001c16:	69b9      	ldr	r1, [r7, #24]
 8001c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0203 	and.w	r2, r3, #3
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80be 	beq.w	8001dda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	4b66      	ldr	r3, [pc, #408]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	4a65      	ldr	r2, [pc, #404]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6a:	4b63      	ldr	r3, [pc, #396]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c76:	4a61      	ldr	r2, [pc, #388]	@ (8001dfc <HAL_GPIO_Init+0x328>)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a58      	ldr	r2, [pc, #352]	@ (8001e00 <HAL_GPIO_Init+0x32c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d037      	beq.n	8001d12 <HAL_GPIO_Init+0x23e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a57      	ldr	r2, [pc, #348]	@ (8001e04 <HAL_GPIO_Init+0x330>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d031      	beq.n	8001d0e <HAL_GPIO_Init+0x23a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a56      	ldr	r2, [pc, #344]	@ (8001e08 <HAL_GPIO_Init+0x334>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d02b      	beq.n	8001d0a <HAL_GPIO_Init+0x236>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a55      	ldr	r2, [pc, #340]	@ (8001e0c <HAL_GPIO_Init+0x338>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d025      	beq.n	8001d06 <HAL_GPIO_Init+0x232>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a54      	ldr	r2, [pc, #336]	@ (8001e10 <HAL_GPIO_Init+0x33c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d01f      	beq.n	8001d02 <HAL_GPIO_Init+0x22e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a53      	ldr	r2, [pc, #332]	@ (8001e14 <HAL_GPIO_Init+0x340>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d019      	beq.n	8001cfe <HAL_GPIO_Init+0x22a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a52      	ldr	r2, [pc, #328]	@ (8001e18 <HAL_GPIO_Init+0x344>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <HAL_GPIO_Init+0x226>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a51      	ldr	r2, [pc, #324]	@ (8001e1c <HAL_GPIO_Init+0x348>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_GPIO_Init+0x222>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a50      	ldr	r2, [pc, #320]	@ (8001e20 <HAL_GPIO_Init+0x34c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d007      	beq.n	8001cf2 <HAL_GPIO_Init+0x21e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4f      	ldr	r2, [pc, #316]	@ (8001e24 <HAL_GPIO_Init+0x350>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_GPIO_Init+0x21a>
 8001cea:	2309      	movs	r3, #9
 8001cec:	e012      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001cee:	230a      	movs	r3, #10
 8001cf0:	e010      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001cf2:	2308      	movs	r3, #8
 8001cf4:	e00e      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001cf6:	2307      	movs	r3, #7
 8001cf8:	e00c      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	e00a      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001cfe:	2305      	movs	r3, #5
 8001d00:	e008      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001d02:	2304      	movs	r3, #4
 8001d04:	e006      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001d06:	2303      	movs	r3, #3
 8001d08:	e004      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e002      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001d12:	2300      	movs	r3, #0
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	f002 0203 	and.w	r2, r2, #3
 8001d1a:	0092      	lsls	r2, r2, #2
 8001d1c:	4093      	lsls	r3, r2
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d24:	4935      	ldr	r1, [pc, #212]	@ (8001dfc <HAL_GPIO_Init+0x328>)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d32:	4b3d      	ldr	r3, [pc, #244]	@ (8001e28 <HAL_GPIO_Init+0x354>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d56:	4a34      	ldr	r2, [pc, #208]	@ (8001e28 <HAL_GPIO_Init+0x354>)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d5c:	4b32      	ldr	r3, [pc, #200]	@ (8001e28 <HAL_GPIO_Init+0x354>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d80:	4a29      	ldr	r2, [pc, #164]	@ (8001e28 <HAL_GPIO_Init+0x354>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d86:	4b28      	ldr	r3, [pc, #160]	@ (8001e28 <HAL_GPIO_Init+0x354>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001daa:	4a1f      	ldr	r2, [pc, #124]	@ (8001e28 <HAL_GPIO_Init+0x354>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e28 <HAL_GPIO_Init+0x354>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd4:	4a14      	ldr	r2, [pc, #80]	@ (8001e28 <HAL_GPIO_Init+0x354>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2b0f      	cmp	r3, #15
 8001de4:	f67f ae86 	bls.w	8001af4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	3724      	adds	r7, #36	@ 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40013800 	.word	0x40013800
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40020400 	.word	0x40020400
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020c00 	.word	0x40020c00
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40021400 	.word	0x40021400
 8001e18:	40021800 	.word	0x40021800
 8001e1c:	40021c00 	.word	0x40021c00
 8001e20:	40022000 	.word	0x40022000
 8001e24:	40022400 	.word	0x40022400
 8001e28:	40013c00 	.word	0x40013c00

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e48:	e003      	b.n	8001e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	041a      	lsls	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	619a      	str	r2, [r3, #24]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e29b      	b.n	80023ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8087 	beq.w	8001f92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e84:	4b96      	ldr	r3, [pc, #600]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d00c      	beq.n	8001eaa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e90:	4b93      	ldr	r3, [pc, #588]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 030c 	and.w	r3, r3, #12
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d112      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x62>
 8001e9c:	4b90      	ldr	r3, [pc, #576]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ea8:	d10b      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eaa:	4b8d      	ldr	r3, [pc, #564]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d06c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x130>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d168      	bne.n	8001f90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e275      	b.n	80023ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eca:	d106      	bne.n	8001eda <HAL_RCC_OscConfig+0x7a>
 8001ecc:	4b84      	ldr	r3, [pc, #528]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a83      	ldr	r2, [pc, #524]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	e02e      	b.n	8001f38 <HAL_RCC_OscConfig+0xd8>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x9c>
 8001ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a7e      	ldr	r2, [pc, #504]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001ee8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b7c      	ldr	r3, [pc, #496]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a7b      	ldr	r2, [pc, #492]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001ef4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e01d      	b.n	8001f38 <HAL_RCC_OscConfig+0xd8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0xc0>
 8001f06:	4b76      	ldr	r3, [pc, #472]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a75      	ldr	r2, [pc, #468]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b73      	ldr	r3, [pc, #460]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a72      	ldr	r2, [pc, #456]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e00b      	b.n	8001f38 <HAL_RCC_OscConfig+0xd8>
 8001f20:	4b6f      	ldr	r3, [pc, #444]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a6e      	ldr	r2, [pc, #440]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b6c      	ldr	r3, [pc, #432]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a6b      	ldr	r2, [pc, #428]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff f8ca 	bl	80010d8 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff f8c6 	bl	80010d8 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	@ 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e229      	b.n	80023ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	4b61      	ldr	r3, [pc, #388]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0xe8>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff f8b6 	bl	80010d8 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff f8b2 	bl	80010d8 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	@ 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e215      	b.n	80023ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	4b57      	ldr	r3, [pc, #348]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x110>
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d069      	beq.n	8002072 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f9e:	4b50      	ldr	r3, [pc, #320]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00b      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001faa:	4b4d      	ldr	r3, [pc, #308]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d11c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x190>
 8001fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d116      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	4b47      	ldr	r3, [pc, #284]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_RCC_OscConfig+0x17a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e1e9      	b.n	80023ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fda:	4b41      	ldr	r3, [pc, #260]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	493d      	ldr	r1, [pc, #244]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fee:	e040      	b.n	8002072 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d023      	beq.n	8002040 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff8:	4b39      	ldr	r3, [pc, #228]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a38      	ldr	r2, [pc, #224]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7ff f868 	bl	80010d8 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200c:	f7ff f864 	bl	80010d8 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e1c7      	b.n	80023ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201e:	4b30      	ldr	r3, [pc, #192]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202a:	4b2d      	ldr	r3, [pc, #180]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4929      	ldr	r1, [pc, #164]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]
 800203e:	e018      	b.n	8002072 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002040:	4b27      	ldr	r3, [pc, #156]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a26      	ldr	r2, [pc, #152]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8002046:	f023 0301 	bic.w	r3, r3, #1
 800204a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7ff f844 	bl	80010d8 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002054:	f7ff f840 	bl	80010d8 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e1a3      	b.n	80023ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d038      	beq.n	80020f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d019      	beq.n	80020ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002086:	4b16      	ldr	r3, [pc, #88]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 8002088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800208a:	4a15      	ldr	r2, [pc, #84]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002092:	f7ff f821 	bl	80010d8 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800209a:	f7ff f81d 	bl	80010d8 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e180      	b.n	80023ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ac:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 80020ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x23a>
 80020b8:	e01a      	b.n	80020f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ba:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 80020bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020be:	4a08      	ldr	r2, [pc, #32]	@ (80020e0 <HAL_RCC_OscConfig+0x280>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c6:	f7ff f807 	bl	80010d8 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ce:	f7ff f803 	bl	80010d8 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d903      	bls.n	80020e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e166      	b.n	80023ae <HAL_RCC_OscConfig+0x54e>
 80020e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e4:	4b92      	ldr	r3, [pc, #584]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 80020e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1ee      	bne.n	80020ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80a4 	beq.w	8002246 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fe:	4b8c      	ldr	r3, [pc, #560]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10d      	bne.n	8002126 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800210a:	4b89      	ldr	r3, [pc, #548]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	4a88      	ldr	r2, [pc, #544]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 8002110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002114:	6413      	str	r3, [r2, #64]	@ 0x40
 8002116:	4b86      	ldr	r3, [pc, #536]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002122:	2301      	movs	r3, #1
 8002124:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002126:	4b83      	ldr	r3, [pc, #524]	@ (8002334 <HAL_RCC_OscConfig+0x4d4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212e:	2b00      	cmp	r3, #0
 8002130:	d118      	bne.n	8002164 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002132:	4b80      	ldr	r3, [pc, #512]	@ (8002334 <HAL_RCC_OscConfig+0x4d4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a7f      	ldr	r2, [pc, #508]	@ (8002334 <HAL_RCC_OscConfig+0x4d4>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800213c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213e:	f7fe ffcb 	bl	80010d8 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002146:	f7fe ffc7 	bl	80010d8 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b64      	cmp	r3, #100	@ 0x64
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e12a      	b.n	80023ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002158:	4b76      	ldr	r3, [pc, #472]	@ (8002334 <HAL_RCC_OscConfig+0x4d4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x31a>
 800216c:	4b70      	ldr	r3, [pc, #448]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002170:	4a6f      	ldr	r2, [pc, #444]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6713      	str	r3, [r2, #112]	@ 0x70
 8002178:	e02d      	b.n	80021d6 <HAL_RCC_OscConfig+0x376>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0x33c>
 8002182:	4b6b      	ldr	r3, [pc, #428]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002186:	4a6a      	ldr	r2, [pc, #424]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	6713      	str	r3, [r2, #112]	@ 0x70
 800218e:	4b68      	ldr	r3, [pc, #416]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002192:	4a67      	ldr	r2, [pc, #412]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 8002194:	f023 0304 	bic.w	r3, r3, #4
 8002198:	6713      	str	r3, [r2, #112]	@ 0x70
 800219a:	e01c      	b.n	80021d6 <HAL_RCC_OscConfig+0x376>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	d10c      	bne.n	80021be <HAL_RCC_OscConfig+0x35e>
 80021a4:	4b62      	ldr	r3, [pc, #392]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a8:	4a61      	ldr	r2, [pc, #388]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b0:	4b5f      	ldr	r3, [pc, #380]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b4:	4a5e      	ldr	r2, [pc, #376]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80021bc:	e00b      	b.n	80021d6 <HAL_RCC_OscConfig+0x376>
 80021be:	4b5c      	ldr	r3, [pc, #368]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ca:	4b59      	ldr	r3, [pc, #356]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ce:	4a58      	ldr	r2, [pc, #352]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 80021d0:	f023 0304 	bic.w	r3, r3, #4
 80021d4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d015      	beq.n	800220a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021de:	f7fe ff7b 	bl	80010d8 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7fe ff77 	bl	80010d8 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0d8      	b.n	80023ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fc:	4b4c      	ldr	r3, [pc, #304]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0ee      	beq.n	80021e6 <HAL_RCC_OscConfig+0x386>
 8002208:	e014      	b.n	8002234 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220a:	f7fe ff65 	bl	80010d8 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7fe ff61 	bl	80010d8 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0c2      	b.n	80023ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002228:	4b41      	ldr	r3, [pc, #260]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1ee      	bne.n	8002212 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002234:	7dfb      	ldrb	r3, [r7, #23]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d105      	bne.n	8002246 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223a:	4b3d      	ldr	r3, [pc, #244]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	4a3c      	ldr	r2, [pc, #240]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 8002240:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002244:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80ae 	beq.w	80023ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002250:	4b37      	ldr	r3, [pc, #220]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	d06d      	beq.n	8002338 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d14b      	bne.n	80022fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002264:	4b32      	ldr	r3, [pc, #200]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a31      	ldr	r2, [pc, #196]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 800226a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800226e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe ff32 	bl	80010d8 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002278:	f7fe ff2e 	bl	80010d8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e091      	b.n	80023ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228a:	4b29      	ldr	r3, [pc, #164]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a4:	019b      	lsls	r3, r3, #6
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ac:	085b      	lsrs	r3, r3, #1
 80022ae:	3b01      	subs	r3, #1
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b8:	061b      	lsls	r3, r3, #24
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c0:	071b      	lsls	r3, r3, #28
 80022c2:	491b      	ldr	r1, [pc, #108]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c8:	4b19      	ldr	r3, [pc, #100]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a18      	ldr	r2, [pc, #96]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 80022ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe ff00 	bl	80010d8 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022dc:	f7fe fefc 	bl	80010d8 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e05f      	b.n	80023ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ee:	4b10      	ldr	r3, [pc, #64]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x47c>
 80022fa:	e057      	b.n	80023ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0b      	ldr	r2, [pc, #44]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 8002302:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe fee6 	bl	80010d8 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002310:	f7fe fee2 	bl	80010d8 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e045      	b.n	80023ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002322:	4b03      	ldr	r3, [pc, #12]	@ (8002330 <HAL_RCC_OscConfig+0x4d0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x4b0>
 800232e:	e03d      	b.n	80023ac <HAL_RCC_OscConfig+0x54c>
 8002330:	40023800 	.word	0x40023800
 8002334:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002338:	4b1f      	ldr	r3, [pc, #124]	@ (80023b8 <HAL_RCC_OscConfig+0x558>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d030      	beq.n	80023a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002350:	429a      	cmp	r2, r3
 8002352:	d129      	bne.n	80023a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d122      	bne.n	80023a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002368:	4013      	ands	r3, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800236e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002370:	4293      	cmp	r3, r2
 8002372:	d119      	bne.n	80023a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237e:	085b      	lsrs	r3, r3, #1
 8002380:	3b01      	subs	r3, #1
 8002382:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002384:	429a      	cmp	r2, r3
 8002386:	d10f      	bne.n	80023a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002392:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800

080023bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0d0      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d910      	bls.n	8002404 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b67      	ldr	r3, [pc, #412]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 020f 	bic.w	r2, r3, #15
 80023ea:	4965      	ldr	r1, [pc, #404]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b63      	ldr	r3, [pc, #396]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0b8      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d020      	beq.n	8002452 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800241c:	4b59      	ldr	r3, [pc, #356]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a58      	ldr	r2, [pc, #352]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 8002422:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002426:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002434:	4b53      	ldr	r3, [pc, #332]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4a52      	ldr	r2, [pc, #328]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 800243a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800243e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002440:	4b50      	ldr	r3, [pc, #320]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	494d      	ldr	r1, [pc, #308]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d040      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	4b47      	ldr	r3, [pc, #284]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d115      	bne.n	800249e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e07f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247e:	4b41      	ldr	r3, [pc, #260]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e073      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248e:	4b3d      	ldr	r3, [pc, #244]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e06b      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249e:	4b39      	ldr	r3, [pc, #228]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f023 0203 	bic.w	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4936      	ldr	r1, [pc, #216]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b0:	f7fe fe12 	bl	80010d8 <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b8:	f7fe fe0e 	bl	80010d8 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e053      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 020c 	and.w	r2, r3, #12
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1eb      	bne.n	80024b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e0:	4b27      	ldr	r3, [pc, #156]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d210      	bcs.n	8002510 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b24      	ldr	r3, [pc, #144]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 020f 	bic.w	r2, r3, #15
 80024f6:	4922      	ldr	r1, [pc, #136]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b20      	ldr	r3, [pc, #128]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e032      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800251c:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4916      	ldr	r1, [pc, #88]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800253a:	4b12      	ldr	r3, [pc, #72]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	490e      	ldr	r1, [pc, #56]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800254e:	f000 f821 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8002552:	4602      	mov	r2, r0
 8002554:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	490a      	ldr	r1, [pc, #40]	@ (8002588 <HAL_RCC_ClockConfig+0x1cc>)
 8002560:	5ccb      	ldrb	r3, [r1, r3]
 8002562:	fa22 f303 	lsr.w	r3, r2, r3
 8002566:	4a09      	ldr	r2, [pc, #36]	@ (800258c <HAL_RCC_ClockConfig+0x1d0>)
 8002568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800256a:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <HAL_RCC_ClockConfig+0x1d4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fd6e 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023c00 	.word	0x40023c00
 8002584:	40023800 	.word	0x40023800
 8002588:	0800663c 	.word	0x0800663c
 800258c:	20000000 	.word	0x20000000
 8002590:	20000004 	.word	0x20000004

08002594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002598:	b090      	sub	sp, #64	@ 0x40
 800259a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	637b      	str	r3, [r7, #52]	@ 0x34
 80025a0:	2300      	movs	r3, #0
 80025a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025a4:	2300      	movs	r3, #0
 80025a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ac:	4b59      	ldr	r3, [pc, #356]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d00d      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x40>
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	f200 80a1 	bhi.w	8002700 <HAL_RCC_GetSysClockFreq+0x16c>
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x34>
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0x3a>
 80025c6:	e09b      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025c8:	4b53      	ldr	r3, [pc, #332]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x184>)
 80025ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025cc:	e09b      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ce:	4b53      	ldr	r3, [pc, #332]	@ (800271c <HAL_RCC_GetSysClockFreq+0x188>)
 80025d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025d2:	e098      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x180>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025de:	4b4d      	ldr	r3, [pc, #308]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x180>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d028      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	2200      	movs	r2, #0
 80025f2:	623b      	str	r3, [r7, #32]
 80025f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025fc:	2100      	movs	r1, #0
 80025fe:	4b47      	ldr	r3, [pc, #284]	@ (800271c <HAL_RCC_GetSysClockFreq+0x188>)
 8002600:	fb03 f201 	mul.w	r2, r3, r1
 8002604:	2300      	movs	r3, #0
 8002606:	fb00 f303 	mul.w	r3, r0, r3
 800260a:	4413      	add	r3, r2
 800260c:	4a43      	ldr	r2, [pc, #268]	@ (800271c <HAL_RCC_GetSysClockFreq+0x188>)
 800260e:	fba0 1202 	umull	r1, r2, r0, r2
 8002612:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002614:	460a      	mov	r2, r1
 8002616:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800261a:	4413      	add	r3, r2
 800261c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800261e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002620:	2200      	movs	r2, #0
 8002622:	61bb      	str	r3, [r7, #24]
 8002624:	61fa      	str	r2, [r7, #28]
 8002626:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800262a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800262e:	f7fd fe5f 	bl	80002f0 <__aeabi_uldivmod>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4613      	mov	r3, r2
 8002638:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800263a:	e053      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263c:	4b35      	ldr	r3, [pc, #212]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x180>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	2200      	movs	r2, #0
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	617a      	str	r2, [r7, #20]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800264e:	f04f 0b00 	mov.w	fp, #0
 8002652:	4652      	mov	r2, sl
 8002654:	465b      	mov	r3, fp
 8002656:	f04f 0000 	mov.w	r0, #0
 800265a:	f04f 0100 	mov.w	r1, #0
 800265e:	0159      	lsls	r1, r3, #5
 8002660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002664:	0150      	lsls	r0, r2, #5
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	ebb2 080a 	subs.w	r8, r2, sl
 800266e:	eb63 090b 	sbc.w	r9, r3, fp
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800267e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002682:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002686:	ebb2 0408 	subs.w	r4, r2, r8
 800268a:	eb63 0509 	sbc.w	r5, r3, r9
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	00eb      	lsls	r3, r5, #3
 8002698:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800269c:	00e2      	lsls	r2, r4, #3
 800269e:	4614      	mov	r4, r2
 80026a0:	461d      	mov	r5, r3
 80026a2:	eb14 030a 	adds.w	r3, r4, sl
 80026a6:	603b      	str	r3, [r7, #0]
 80026a8:	eb45 030b 	adc.w	r3, r5, fp
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ba:	4629      	mov	r1, r5
 80026bc:	028b      	lsls	r3, r1, #10
 80026be:	4621      	mov	r1, r4
 80026c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026c4:	4621      	mov	r1, r4
 80026c6:	028a      	lsls	r2, r1, #10
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ce:	2200      	movs	r2, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	60fa      	str	r2, [r7, #12]
 80026d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026d8:	f7fd fe0a 	bl	80002f0 <__aeabi_uldivmod>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4613      	mov	r3, r2
 80026e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x180>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	3301      	adds	r3, #1
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80026f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026fe:	e002      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x184>)
 8002702:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002708:	4618      	mov	r0, r3
 800270a:	3740      	adds	r7, #64	@ 0x40
 800270c:	46bd      	mov	sp, r7
 800270e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	00f42400 	.word	0x00f42400
 800271c:	017d7840 	.word	0x017d7840

08002720 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002724:	4b03      	ldr	r3, [pc, #12]	@ (8002734 <HAL_RCC_GetHCLKFreq+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000000 	.word	0x20000000

08002738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800273c:	f7ff fff0 	bl	8002720 <HAL_RCC_GetHCLKFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	0a9b      	lsrs	r3, r3, #10
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	4903      	ldr	r1, [pc, #12]	@ (800275c <HAL_RCC_GetPCLK1Freq+0x24>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800
 800275c:	0800664c 	.word	0x0800664c

08002760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002764:	f7ff ffdc 	bl	8002720 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	0b5b      	lsrs	r3, r3, #13
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4903      	ldr	r1, [pc, #12]	@ (8002784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	0800664c 	.word	0x0800664c

08002788 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d012      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027b0:	4b69      	ldr	r3, [pc, #420]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a68      	ldr	r2, [pc, #416]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80027ba:	6093      	str	r3, [r2, #8]
 80027bc:	4b66      	ldr	r3, [pc, #408]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c4:	4964      	ldr	r1, [pc, #400]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80027d2:	2301      	movs	r3, #1
 80027d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d017      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f0:	4959      	ldr	r1, [pc, #356]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002800:	d101      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002802:	2301      	movs	r3, #1
 8002804:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800280e:	2301      	movs	r3, #1
 8002810:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d017      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800281e:	4b4e      	ldr	r3, [pc, #312]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002824:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	494a      	ldr	r1, [pc, #296]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800283c:	d101      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800283e:	2301      	movs	r3, #1
 8002840:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800284a:	2301      	movs	r3, #1
 800284c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800285a:	2301      	movs	r3, #1
 800285c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 808b 	beq.w	8002982 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800286c:	4b3a      	ldr	r3, [pc, #232]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	4a39      	ldr	r2, [pc, #228]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002876:	6413      	str	r3, [r2, #64]	@ 0x40
 8002878:	4b37      	ldr	r3, [pc, #220]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002884:	4b35      	ldr	r3, [pc, #212]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a34      	ldr	r2, [pc, #208]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800288a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800288e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002890:	f7fe fc22 	bl	80010d8 <HAL_GetTick>
 8002894:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002898:	f7fe fc1e 	bl	80010d8 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	@ 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e38f      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028aa:	4b2c      	ldr	r3, [pc, #176]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028b6:	4b28      	ldr	r3, [pc, #160]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d035      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d02e      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028d4:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028de:	4b1e      	ldr	r3, [pc, #120]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028f4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80028f6:	4a18      	ldr	r2, [pc, #96]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028fc:	4b16      	ldr	r3, [pc, #88]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b01      	cmp	r3, #1
 8002906:	d114      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe fbe6 	bl	80010d8 <HAL_GetTick>
 800290c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290e:	e00a      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002910:	f7fe fbe2 	bl	80010d8 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e351      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002926:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0ee      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800293a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800293e:	d111      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002940:	4b05      	ldr	r3, [pc, #20]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800294c:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800294e:	400b      	ands	r3, r1
 8002950:	4901      	ldr	r1, [pc, #4]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
 8002956:	e00b      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002958:	40023800 	.word	0x40023800
 800295c:	40007000 	.word	0x40007000
 8002960:	0ffffcff 	.word	0x0ffffcff
 8002964:	4bac      	ldr	r3, [pc, #688]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4aab      	ldr	r2, [pc, #684]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800296a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800296e:	6093      	str	r3, [r2, #8]
 8002970:	4ba9      	ldr	r3, [pc, #676]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002972:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297c:	49a6      	ldr	r1, [pc, #664]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297e:	4313      	orrs	r3, r2
 8002980:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	d010      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800298e:	4ba2      	ldr	r3, [pc, #648]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002994:	4aa0      	ldr	r2, [pc, #640]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002996:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800299a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800299e:	4b9e      	ldr	r3, [pc, #632]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a8:	499b      	ldr	r1, [pc, #620]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029bc:	4b96      	ldr	r3, [pc, #600]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029ca:	4993      	ldr	r1, [pc, #588]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029de:	4b8e      	ldr	r3, [pc, #568]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029ec:	498a      	ldr	r1, [pc, #552]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a00:	4b85      	ldr	r3, [pc, #532]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a0e:	4982      	ldr	r1, [pc, #520]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a22:	4b7d      	ldr	r3, [pc, #500]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a28:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a30:	4979      	ldr	r1, [pc, #484]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a44:	4b74      	ldr	r3, [pc, #464]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4a:	f023 0203 	bic.w	r2, r3, #3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	4971      	ldr	r1, [pc, #452]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a66:	4b6c      	ldr	r3, [pc, #432]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6c:	f023 020c 	bic.w	r2, r3, #12
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a74:	4968      	ldr	r1, [pc, #416]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a88:	4b63      	ldr	r3, [pc, #396]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a96:	4960      	ldr	r1, [pc, #384]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ab8:	4957      	ldr	r1, [pc, #348]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002acc:	4b52      	ldr	r3, [pc, #328]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ada:	494f      	ldr	r1, [pc, #316]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002aee:	4b4a      	ldr	r3, [pc, #296]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afc:	4946      	ldr	r1, [pc, #280]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b10:	4b41      	ldr	r3, [pc, #260]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b16:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1e:	493e      	ldr	r1, [pc, #248]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b32:	4b39      	ldr	r3, [pc, #228]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b38:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b40:	4935      	ldr	r1, [pc, #212]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b54:	4b30      	ldr	r3, [pc, #192]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b62:	492d      	ldr	r1, [pc, #180]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d011      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b76:	4b28      	ldr	r3, [pc, #160]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b84:	4924      	ldr	r1, [pc, #144]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b94:	d101      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b96:	2301      	movs	r3, #1
 8002b98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bb6:	4b18      	ldr	r3, [pc, #96]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bbc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc4:	4914      	ldr	r1, [pc, #80]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00b      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bde:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002be8:	490b      	ldr	r1, [pc, #44]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00f      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002bfc:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c02:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c0c:	4902      	ldr	r1, [pc, #8]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c14:	e002      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00b      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c28:	4b8a      	ldr	r3, [pc, #552]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c2e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c38:	4986      	ldr	r1, [pc, #536]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00b      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c4c:	4b81      	ldr	r3, [pc, #516]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c52:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c5c:	497d      	ldr	r1, [pc, #500]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d006      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80d6 	beq.w	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c78:	4b76      	ldr	r3, [pc, #472]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a75      	ldr	r2, [pc, #468]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c84:	f7fe fa28 	bl	80010d8 <HAL_GetTick>
 8002c88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c8c:	f7fe fa24 	bl	80010d8 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	@ 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e195      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d021      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d11d      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cbe:	4b65      	ldr	r3, [pc, #404]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ccc:	4b61      	ldr	r3, [pc, #388]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cd2:	0e1b      	lsrs	r3, r3, #24
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	019a      	lsls	r2, r3, #6
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	041b      	lsls	r3, r3, #16
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	061b      	lsls	r3, r3, #24
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	071b      	lsls	r3, r3, #28
 8002cf2:	4958      	ldr	r1, [pc, #352]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d0e:	d00a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d02e      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d24:	d129      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d26:	4b4b      	ldr	r3, [pc, #300]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d2c:	0c1b      	lsrs	r3, r3, #16
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d34:	4b47      	ldr	r3, [pc, #284]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d3a:	0f1b      	lsrs	r3, r3, #28
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	019a      	lsls	r2, r3, #6
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	041b      	lsls	r3, r3, #16
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	061b      	lsls	r3, r3, #24
 8002d54:	431a      	orrs	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	071b      	lsls	r3, r3, #28
 8002d5a:	493e      	ldr	r1, [pc, #248]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d62:	4b3c      	ldr	r3, [pc, #240]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d68:	f023 021f 	bic.w	r2, r3, #31
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	3b01      	subs	r3, #1
 8002d72:	4938      	ldr	r1, [pc, #224]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01d      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d86:	4b33      	ldr	r3, [pc, #204]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d8c:	0e1b      	lsrs	r3, r3, #24
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d94:	4b2f      	ldr	r3, [pc, #188]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d9a:	0f1b      	lsrs	r3, r3, #28
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	019a      	lsls	r2, r3, #6
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	041b      	lsls	r3, r3, #16
 8002dae:	431a      	orrs	r2, r3
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	061b      	lsls	r3, r3, #24
 8002db4:	431a      	orrs	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	071b      	lsls	r3, r3, #28
 8002dba:	4926      	ldr	r1, [pc, #152]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d011      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	019a      	lsls	r2, r3, #6
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	041b      	lsls	r3, r3, #16
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	061b      	lsls	r3, r3, #24
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	071b      	lsls	r3, r3, #28
 8002dea:	491a      	ldr	r1, [pc, #104]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002df2:	4b18      	ldr	r3, [pc, #96]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a17      	ldr	r2, [pc, #92]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfe:	f7fe f96b 	bl	80010d8 <HAL_GetTick>
 8002e02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e04:	e008      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e06:	f7fe f967 	bl	80010d8 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b64      	cmp	r3, #100	@ 0x64
 8002e12:	d901      	bls.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e0d8      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e18:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	f040 80ce 	bne.w	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e2c:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a08      	ldr	r2, [pc, #32]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e38:	f7fe f94e 	bl	80010d8 <HAL_GetTick>
 8002e3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e3e:	e00b      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e40:	f7fe f94a 	bl	80010d8 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	@ 0x64
 8002e4c:	d904      	bls.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e0bb      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e58:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e64:	d0ec      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d02e      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d12a      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e8e:	4b51      	ldr	r3, [pc, #324]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea2:	0f1b      	lsrs	r3, r3, #28
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	019a      	lsls	r2, r3, #6
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	061b      	lsls	r3, r3, #24
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	071b      	lsls	r3, r3, #28
 8002ec2:	4944      	ldr	r1, [pc, #272]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002eca:	4b42      	ldr	r3, [pc, #264]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ed0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	493d      	ldr	r1, [pc, #244]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d022      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ef4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ef8:	d11d      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002efa:	4b36      	ldr	r3, [pc, #216]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f00:	0e1b      	lsrs	r3, r3, #24
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f08:	4b32      	ldr	r3, [pc, #200]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0e:	0f1b      	lsrs	r3, r3, #28
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	019a      	lsls	r2, r3, #6
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	041b      	lsls	r3, r3, #16
 8002f22:	431a      	orrs	r2, r3
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	061b      	lsls	r3, r3, #24
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	071b      	lsls	r3, r3, #28
 8002f2e:	4929      	ldr	r1, [pc, #164]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d028      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f42:	4b24      	ldr	r3, [pc, #144]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f48:	0e1b      	lsrs	r3, r3, #24
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f50:	4b20      	ldr	r3, [pc, #128]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f56:	0c1b      	lsrs	r3, r3, #16
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	019a      	lsls	r2, r3, #6
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	041b      	lsls	r3, r3, #16
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	071b      	lsls	r3, r3, #28
 8002f76:	4917      	ldr	r1, [pc, #92]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f7e:	4b15      	ldr	r3, [pc, #84]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	4911      	ldr	r1, [pc, #68]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f94:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0e      	ldr	r2, [pc, #56]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa0:	f7fe f89a 	bl	80010d8 <HAL_GetTick>
 8002fa4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fa8:	f7fe f896 	bl	80010d8 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	@ 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e007      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fba:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fc6:	d1ef      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3720      	adds	r7, #32
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800

08002fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e040      	b.n	800306c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fd ff92 	bl	8000f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2224      	movs	r2, #36	@ 0x24
 8003004:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fb16 	bl	8003650 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f8af 	bl	8003188 <UART_SetConfig>
 800302a:	4603      	mov	r3, r0
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e01b      	b.n	800306c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fb95 	bl	8003794 <UART_CheckIdleState>
 800306a:	4603      	mov	r3, r0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	@ 0x28
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	4613      	mov	r3, r2
 8003082:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003088:	2b20      	cmp	r3, #32
 800308a:	d177      	bne.n	800317c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_UART_Transmit+0x24>
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e070      	b.n	800317e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2221      	movs	r2, #33	@ 0x21
 80030a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030aa:	f7fe f815 	bl	80010d8 <HAL_GetTick>
 80030ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	88fa      	ldrh	r2, [r7, #6]
 80030b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	88fa      	ldrh	r2, [r7, #6]
 80030bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030c8:	d108      	bne.n	80030dc <HAL_UART_Transmit+0x68>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d104      	bne.n	80030dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	e003      	b.n	80030e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030e4:	e02f      	b.n	8003146 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2180      	movs	r1, #128	@ 0x80
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 fbf7 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e03b      	b.n	800317e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10b      	bne.n	8003124 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800311a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	3302      	adds	r3, #2
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	e007      	b.n	8003134 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	781a      	ldrb	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3301      	adds	r3, #1
 8003132:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1c9      	bne.n	80030e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2200      	movs	r2, #0
 800315a:	2140      	movs	r1, #64	@ 0x40
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fbc1 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d004      	beq.n	8003172 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e005      	b.n	800317e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	e000      	b.n	800317e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
  }
}
 800317e:	4618      	mov	r0, r3
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4ba6      	ldr	r3, [pc, #664]	@ (800344c <UART_SetConfig+0x2c4>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	6979      	ldr	r1, [r7, #20]
 80031bc:	430b      	orrs	r3, r1
 80031be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a94      	ldr	r2, [pc, #592]	@ (8003450 <UART_SetConfig+0x2c8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d120      	bne.n	8003246 <UART_SetConfig+0xbe>
 8003204:	4b93      	ldr	r3, [pc, #588]	@ (8003454 <UART_SetConfig+0x2cc>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b03      	cmp	r3, #3
 8003210:	d816      	bhi.n	8003240 <UART_SetConfig+0xb8>
 8003212:	a201      	add	r2, pc, #4	@ (adr r2, 8003218 <UART_SetConfig+0x90>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	08003229 	.word	0x08003229
 800321c:	08003235 	.word	0x08003235
 8003220:	0800322f 	.word	0x0800322f
 8003224:	0800323b 	.word	0x0800323b
 8003228:	2301      	movs	r3, #1
 800322a:	77fb      	strb	r3, [r7, #31]
 800322c:	e150      	b.n	80034d0 <UART_SetConfig+0x348>
 800322e:	2302      	movs	r3, #2
 8003230:	77fb      	strb	r3, [r7, #31]
 8003232:	e14d      	b.n	80034d0 <UART_SetConfig+0x348>
 8003234:	2304      	movs	r3, #4
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	e14a      	b.n	80034d0 <UART_SetConfig+0x348>
 800323a:	2308      	movs	r3, #8
 800323c:	77fb      	strb	r3, [r7, #31]
 800323e:	e147      	b.n	80034d0 <UART_SetConfig+0x348>
 8003240:	2310      	movs	r3, #16
 8003242:	77fb      	strb	r3, [r7, #31]
 8003244:	e144      	b.n	80034d0 <UART_SetConfig+0x348>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a83      	ldr	r2, [pc, #524]	@ (8003458 <UART_SetConfig+0x2d0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d132      	bne.n	80032b6 <UART_SetConfig+0x12e>
 8003250:	4b80      	ldr	r3, [pc, #512]	@ (8003454 <UART_SetConfig+0x2cc>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b0c      	cmp	r3, #12
 800325c:	d828      	bhi.n	80032b0 <UART_SetConfig+0x128>
 800325e:	a201      	add	r2, pc, #4	@ (adr r2, 8003264 <UART_SetConfig+0xdc>)
 8003260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003264:	08003299 	.word	0x08003299
 8003268:	080032b1 	.word	0x080032b1
 800326c:	080032b1 	.word	0x080032b1
 8003270:	080032b1 	.word	0x080032b1
 8003274:	080032a5 	.word	0x080032a5
 8003278:	080032b1 	.word	0x080032b1
 800327c:	080032b1 	.word	0x080032b1
 8003280:	080032b1 	.word	0x080032b1
 8003284:	0800329f 	.word	0x0800329f
 8003288:	080032b1 	.word	0x080032b1
 800328c:	080032b1 	.word	0x080032b1
 8003290:	080032b1 	.word	0x080032b1
 8003294:	080032ab 	.word	0x080032ab
 8003298:	2300      	movs	r3, #0
 800329a:	77fb      	strb	r3, [r7, #31]
 800329c:	e118      	b.n	80034d0 <UART_SetConfig+0x348>
 800329e:	2302      	movs	r3, #2
 80032a0:	77fb      	strb	r3, [r7, #31]
 80032a2:	e115      	b.n	80034d0 <UART_SetConfig+0x348>
 80032a4:	2304      	movs	r3, #4
 80032a6:	77fb      	strb	r3, [r7, #31]
 80032a8:	e112      	b.n	80034d0 <UART_SetConfig+0x348>
 80032aa:	2308      	movs	r3, #8
 80032ac:	77fb      	strb	r3, [r7, #31]
 80032ae:	e10f      	b.n	80034d0 <UART_SetConfig+0x348>
 80032b0:	2310      	movs	r3, #16
 80032b2:	77fb      	strb	r3, [r7, #31]
 80032b4:	e10c      	b.n	80034d0 <UART_SetConfig+0x348>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a68      	ldr	r2, [pc, #416]	@ (800345c <UART_SetConfig+0x2d4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d120      	bne.n	8003302 <UART_SetConfig+0x17a>
 80032c0:	4b64      	ldr	r3, [pc, #400]	@ (8003454 <UART_SetConfig+0x2cc>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80032ca:	2b30      	cmp	r3, #48	@ 0x30
 80032cc:	d013      	beq.n	80032f6 <UART_SetConfig+0x16e>
 80032ce:	2b30      	cmp	r3, #48	@ 0x30
 80032d0:	d814      	bhi.n	80032fc <UART_SetConfig+0x174>
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d009      	beq.n	80032ea <UART_SetConfig+0x162>
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d810      	bhi.n	80032fc <UART_SetConfig+0x174>
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <UART_SetConfig+0x15c>
 80032de:	2b10      	cmp	r3, #16
 80032e0:	d006      	beq.n	80032f0 <UART_SetConfig+0x168>
 80032e2:	e00b      	b.n	80032fc <UART_SetConfig+0x174>
 80032e4:	2300      	movs	r3, #0
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	e0f2      	b.n	80034d0 <UART_SetConfig+0x348>
 80032ea:	2302      	movs	r3, #2
 80032ec:	77fb      	strb	r3, [r7, #31]
 80032ee:	e0ef      	b.n	80034d0 <UART_SetConfig+0x348>
 80032f0:	2304      	movs	r3, #4
 80032f2:	77fb      	strb	r3, [r7, #31]
 80032f4:	e0ec      	b.n	80034d0 <UART_SetConfig+0x348>
 80032f6:	2308      	movs	r3, #8
 80032f8:	77fb      	strb	r3, [r7, #31]
 80032fa:	e0e9      	b.n	80034d0 <UART_SetConfig+0x348>
 80032fc:	2310      	movs	r3, #16
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e0e6      	b.n	80034d0 <UART_SetConfig+0x348>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a56      	ldr	r2, [pc, #344]	@ (8003460 <UART_SetConfig+0x2d8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d120      	bne.n	800334e <UART_SetConfig+0x1c6>
 800330c:	4b51      	ldr	r3, [pc, #324]	@ (8003454 <UART_SetConfig+0x2cc>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003312:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003316:	2bc0      	cmp	r3, #192	@ 0xc0
 8003318:	d013      	beq.n	8003342 <UART_SetConfig+0x1ba>
 800331a:	2bc0      	cmp	r3, #192	@ 0xc0
 800331c:	d814      	bhi.n	8003348 <UART_SetConfig+0x1c0>
 800331e:	2b80      	cmp	r3, #128	@ 0x80
 8003320:	d009      	beq.n	8003336 <UART_SetConfig+0x1ae>
 8003322:	2b80      	cmp	r3, #128	@ 0x80
 8003324:	d810      	bhi.n	8003348 <UART_SetConfig+0x1c0>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <UART_SetConfig+0x1a8>
 800332a:	2b40      	cmp	r3, #64	@ 0x40
 800332c:	d006      	beq.n	800333c <UART_SetConfig+0x1b4>
 800332e:	e00b      	b.n	8003348 <UART_SetConfig+0x1c0>
 8003330:	2300      	movs	r3, #0
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	e0cc      	b.n	80034d0 <UART_SetConfig+0x348>
 8003336:	2302      	movs	r3, #2
 8003338:	77fb      	strb	r3, [r7, #31]
 800333a:	e0c9      	b.n	80034d0 <UART_SetConfig+0x348>
 800333c:	2304      	movs	r3, #4
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e0c6      	b.n	80034d0 <UART_SetConfig+0x348>
 8003342:	2308      	movs	r3, #8
 8003344:	77fb      	strb	r3, [r7, #31]
 8003346:	e0c3      	b.n	80034d0 <UART_SetConfig+0x348>
 8003348:	2310      	movs	r3, #16
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e0c0      	b.n	80034d0 <UART_SetConfig+0x348>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a44      	ldr	r2, [pc, #272]	@ (8003464 <UART_SetConfig+0x2dc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d125      	bne.n	80033a4 <UART_SetConfig+0x21c>
 8003358:	4b3e      	ldr	r3, [pc, #248]	@ (8003454 <UART_SetConfig+0x2cc>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003362:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003366:	d017      	beq.n	8003398 <UART_SetConfig+0x210>
 8003368:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800336c:	d817      	bhi.n	800339e <UART_SetConfig+0x216>
 800336e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003372:	d00b      	beq.n	800338c <UART_SetConfig+0x204>
 8003374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003378:	d811      	bhi.n	800339e <UART_SetConfig+0x216>
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <UART_SetConfig+0x1fe>
 800337e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003382:	d006      	beq.n	8003392 <UART_SetConfig+0x20a>
 8003384:	e00b      	b.n	800339e <UART_SetConfig+0x216>
 8003386:	2300      	movs	r3, #0
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	e0a1      	b.n	80034d0 <UART_SetConfig+0x348>
 800338c:	2302      	movs	r3, #2
 800338e:	77fb      	strb	r3, [r7, #31]
 8003390:	e09e      	b.n	80034d0 <UART_SetConfig+0x348>
 8003392:	2304      	movs	r3, #4
 8003394:	77fb      	strb	r3, [r7, #31]
 8003396:	e09b      	b.n	80034d0 <UART_SetConfig+0x348>
 8003398:	2308      	movs	r3, #8
 800339a:	77fb      	strb	r3, [r7, #31]
 800339c:	e098      	b.n	80034d0 <UART_SetConfig+0x348>
 800339e:	2310      	movs	r3, #16
 80033a0:	77fb      	strb	r3, [r7, #31]
 80033a2:	e095      	b.n	80034d0 <UART_SetConfig+0x348>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003468 <UART_SetConfig+0x2e0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d125      	bne.n	80033fa <UART_SetConfig+0x272>
 80033ae:	4b29      	ldr	r3, [pc, #164]	@ (8003454 <UART_SetConfig+0x2cc>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033bc:	d017      	beq.n	80033ee <UART_SetConfig+0x266>
 80033be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033c2:	d817      	bhi.n	80033f4 <UART_SetConfig+0x26c>
 80033c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033c8:	d00b      	beq.n	80033e2 <UART_SetConfig+0x25a>
 80033ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033ce:	d811      	bhi.n	80033f4 <UART_SetConfig+0x26c>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <UART_SetConfig+0x254>
 80033d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d8:	d006      	beq.n	80033e8 <UART_SetConfig+0x260>
 80033da:	e00b      	b.n	80033f4 <UART_SetConfig+0x26c>
 80033dc:	2301      	movs	r3, #1
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e076      	b.n	80034d0 <UART_SetConfig+0x348>
 80033e2:	2302      	movs	r3, #2
 80033e4:	77fb      	strb	r3, [r7, #31]
 80033e6:	e073      	b.n	80034d0 <UART_SetConfig+0x348>
 80033e8:	2304      	movs	r3, #4
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e070      	b.n	80034d0 <UART_SetConfig+0x348>
 80033ee:	2308      	movs	r3, #8
 80033f0:	77fb      	strb	r3, [r7, #31]
 80033f2:	e06d      	b.n	80034d0 <UART_SetConfig+0x348>
 80033f4:	2310      	movs	r3, #16
 80033f6:	77fb      	strb	r3, [r7, #31]
 80033f8:	e06a      	b.n	80034d0 <UART_SetConfig+0x348>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1b      	ldr	r2, [pc, #108]	@ (800346c <UART_SetConfig+0x2e4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d138      	bne.n	8003476 <UART_SetConfig+0x2ee>
 8003404:	4b13      	ldr	r3, [pc, #76]	@ (8003454 <UART_SetConfig+0x2cc>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800340e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003412:	d017      	beq.n	8003444 <UART_SetConfig+0x2bc>
 8003414:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003418:	d82a      	bhi.n	8003470 <UART_SetConfig+0x2e8>
 800341a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800341e:	d00b      	beq.n	8003438 <UART_SetConfig+0x2b0>
 8003420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003424:	d824      	bhi.n	8003470 <UART_SetConfig+0x2e8>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <UART_SetConfig+0x2aa>
 800342a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800342e:	d006      	beq.n	800343e <UART_SetConfig+0x2b6>
 8003430:	e01e      	b.n	8003470 <UART_SetConfig+0x2e8>
 8003432:	2300      	movs	r3, #0
 8003434:	77fb      	strb	r3, [r7, #31]
 8003436:	e04b      	b.n	80034d0 <UART_SetConfig+0x348>
 8003438:	2302      	movs	r3, #2
 800343a:	77fb      	strb	r3, [r7, #31]
 800343c:	e048      	b.n	80034d0 <UART_SetConfig+0x348>
 800343e:	2304      	movs	r3, #4
 8003440:	77fb      	strb	r3, [r7, #31]
 8003442:	e045      	b.n	80034d0 <UART_SetConfig+0x348>
 8003444:	2308      	movs	r3, #8
 8003446:	77fb      	strb	r3, [r7, #31]
 8003448:	e042      	b.n	80034d0 <UART_SetConfig+0x348>
 800344a:	bf00      	nop
 800344c:	efff69f3 	.word	0xefff69f3
 8003450:	40011000 	.word	0x40011000
 8003454:	40023800 	.word	0x40023800
 8003458:	40004400 	.word	0x40004400
 800345c:	40004800 	.word	0x40004800
 8003460:	40004c00 	.word	0x40004c00
 8003464:	40005000 	.word	0x40005000
 8003468:	40011400 	.word	0x40011400
 800346c:	40007800 	.word	0x40007800
 8003470:	2310      	movs	r3, #16
 8003472:	77fb      	strb	r3, [r7, #31]
 8003474:	e02c      	b.n	80034d0 <UART_SetConfig+0x348>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a72      	ldr	r2, [pc, #456]	@ (8003644 <UART_SetConfig+0x4bc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d125      	bne.n	80034cc <UART_SetConfig+0x344>
 8003480:	4b71      	ldr	r3, [pc, #452]	@ (8003648 <UART_SetConfig+0x4c0>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003486:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800348a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800348e:	d017      	beq.n	80034c0 <UART_SetConfig+0x338>
 8003490:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003494:	d817      	bhi.n	80034c6 <UART_SetConfig+0x33e>
 8003496:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800349a:	d00b      	beq.n	80034b4 <UART_SetConfig+0x32c>
 800349c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034a0:	d811      	bhi.n	80034c6 <UART_SetConfig+0x33e>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <UART_SetConfig+0x326>
 80034a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034aa:	d006      	beq.n	80034ba <UART_SetConfig+0x332>
 80034ac:	e00b      	b.n	80034c6 <UART_SetConfig+0x33e>
 80034ae:	2300      	movs	r3, #0
 80034b0:	77fb      	strb	r3, [r7, #31]
 80034b2:	e00d      	b.n	80034d0 <UART_SetConfig+0x348>
 80034b4:	2302      	movs	r3, #2
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e00a      	b.n	80034d0 <UART_SetConfig+0x348>
 80034ba:	2304      	movs	r3, #4
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e007      	b.n	80034d0 <UART_SetConfig+0x348>
 80034c0:	2308      	movs	r3, #8
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e004      	b.n	80034d0 <UART_SetConfig+0x348>
 80034c6:	2310      	movs	r3, #16
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	e001      	b.n	80034d0 <UART_SetConfig+0x348>
 80034cc:	2310      	movs	r3, #16
 80034ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034d8:	d15b      	bne.n	8003592 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80034da:	7ffb      	ldrb	r3, [r7, #31]
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d828      	bhi.n	8003532 <UART_SetConfig+0x3aa>
 80034e0:	a201      	add	r2, pc, #4	@ (adr r2, 80034e8 <UART_SetConfig+0x360>)
 80034e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e6:	bf00      	nop
 80034e8:	0800350d 	.word	0x0800350d
 80034ec:	08003515 	.word	0x08003515
 80034f0:	0800351d 	.word	0x0800351d
 80034f4:	08003533 	.word	0x08003533
 80034f8:	08003523 	.word	0x08003523
 80034fc:	08003533 	.word	0x08003533
 8003500:	08003533 	.word	0x08003533
 8003504:	08003533 	.word	0x08003533
 8003508:	0800352b 	.word	0x0800352b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800350c:	f7ff f914 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8003510:	61b8      	str	r0, [r7, #24]
        break;
 8003512:	e013      	b.n	800353c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003514:	f7ff f924 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 8003518:	61b8      	str	r0, [r7, #24]
        break;
 800351a:	e00f      	b.n	800353c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800351c:	4b4b      	ldr	r3, [pc, #300]	@ (800364c <UART_SetConfig+0x4c4>)
 800351e:	61bb      	str	r3, [r7, #24]
        break;
 8003520:	e00c      	b.n	800353c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003522:	f7ff f837 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8003526:	61b8      	str	r0, [r7, #24]
        break;
 8003528:	e008      	b.n	800353c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800352a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800352e:	61bb      	str	r3, [r7, #24]
        break;
 8003530:	e004      	b.n	800353c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	77bb      	strb	r3, [r7, #30]
        break;
 800353a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d074      	beq.n	800362c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	005a      	lsls	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	441a      	add	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	fbb2 f3f3 	udiv	r3, r2, r3
 8003556:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b0f      	cmp	r3, #15
 800355c:	d916      	bls.n	800358c <UART_SetConfig+0x404>
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003564:	d212      	bcs.n	800358c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	b29b      	uxth	r3, r3
 800356a:	f023 030f 	bic.w	r3, r3, #15
 800356e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	b29b      	uxth	r3, r3
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	b29a      	uxth	r2, r3
 800357c:	89fb      	ldrh	r3, [r7, #14]
 800357e:	4313      	orrs	r3, r2
 8003580:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	89fa      	ldrh	r2, [r7, #14]
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	e04f      	b.n	800362c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	77bb      	strb	r3, [r7, #30]
 8003590:	e04c      	b.n	800362c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003592:	7ffb      	ldrb	r3, [r7, #31]
 8003594:	2b08      	cmp	r3, #8
 8003596:	d828      	bhi.n	80035ea <UART_SetConfig+0x462>
 8003598:	a201      	add	r2, pc, #4	@ (adr r2, 80035a0 <UART_SetConfig+0x418>)
 800359a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359e:	bf00      	nop
 80035a0:	080035c5 	.word	0x080035c5
 80035a4:	080035cd 	.word	0x080035cd
 80035a8:	080035d5 	.word	0x080035d5
 80035ac:	080035eb 	.word	0x080035eb
 80035b0:	080035db 	.word	0x080035db
 80035b4:	080035eb 	.word	0x080035eb
 80035b8:	080035eb 	.word	0x080035eb
 80035bc:	080035eb 	.word	0x080035eb
 80035c0:	080035e3 	.word	0x080035e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035c4:	f7ff f8b8 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 80035c8:	61b8      	str	r0, [r7, #24]
        break;
 80035ca:	e013      	b.n	80035f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035cc:	f7ff f8c8 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 80035d0:	61b8      	str	r0, [r7, #24]
        break;
 80035d2:	e00f      	b.n	80035f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035d4:	4b1d      	ldr	r3, [pc, #116]	@ (800364c <UART_SetConfig+0x4c4>)
 80035d6:	61bb      	str	r3, [r7, #24]
        break;
 80035d8:	e00c      	b.n	80035f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035da:	f7fe ffdb 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 80035de:	61b8      	str	r0, [r7, #24]
        break;
 80035e0:	e008      	b.n	80035f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035e6:	61bb      	str	r3, [r7, #24]
        break;
 80035e8:	e004      	b.n	80035f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	77bb      	strb	r3, [r7, #30]
        break;
 80035f2:	bf00      	nop
    }

    if (pclk != 0U)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d018      	beq.n	800362c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	085a      	lsrs	r2, r3, #1
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	441a      	add	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	fbb2 f3f3 	udiv	r3, r2, r3
 800360c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	2b0f      	cmp	r3, #15
 8003612:	d909      	bls.n	8003628 <UART_SetConfig+0x4a0>
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800361a:	d205      	bcs.n	8003628 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	b29a      	uxth	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	e001      	b.n	800362c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003638:	7fbb      	ldrb	r3, [r7, #30]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40007c00 	.word	0x40007c00
 8003648:	40023800 	.word	0x40023800
 800364c:	00f42400 	.word	0x00f42400

08003650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01a      	beq.n	8003766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800374e:	d10a      	bne.n	8003766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	605a      	str	r2, [r3, #4]
  }
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b098      	sub	sp, #96	@ 0x60
 8003798:	af02      	add	r7, sp, #8
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037a4:	f7fd fc98 	bl	80010d8 <HAL_GetTick>
 80037a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d12e      	bne.n	8003816 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c0:	2200      	movs	r2, #0
 80037c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f88c 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d021      	beq.n	8003816 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037da:	e853 3f00 	ldrex	r3, [r3]
 80037de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80037f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e6      	bne.n	80037d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e062      	b.n	80038dc <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b04      	cmp	r3, #4
 8003822:	d149      	bne.n	80038b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003824:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800382c:	2200      	movs	r2, #0
 800382e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f856 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d03c      	beq.n	80038b8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	e853 3f00 	ldrex	r3, [r3]
 800384a:	623b      	str	r3, [r7, #32]
   return(result);
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800385c:	633b      	str	r3, [r7, #48]	@ 0x30
 800385e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003860:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003864:	e841 2300 	strex	r3, r2, [r1]
 8003868:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800386a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1e6      	bne.n	800383e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3308      	adds	r3, #8
 8003876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3308      	adds	r3, #8
 800388e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003890:	61fa      	str	r2, [r7, #28]
 8003892:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	69b9      	ldr	r1, [r7, #24]
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	e841 2300 	strex	r3, r2, [r1]
 800389c:	617b      	str	r3, [r7, #20]
   return(result);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e5      	bne.n	8003870 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e011      	b.n	80038dc <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3758      	adds	r7, #88	@ 0x58
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f4:	e04f      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d04b      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fe:	f7fd fbeb 	bl	80010d8 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <UART_WaitOnFlagUntilTimeout+0x30>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e04e      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	d037      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b80      	cmp	r3, #128	@ 0x80
 800392a:	d034      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b40      	cmp	r3, #64	@ 0x40
 8003930:	d031      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b08      	cmp	r3, #8
 800393e:	d110      	bne.n	8003962 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2208      	movs	r2, #8
 8003946:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f838 	bl	80039be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2208      	movs	r2, #8
 8003952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e029      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800396c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003970:	d111      	bne.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800397a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f81e 	bl	80039be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e00f      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69da      	ldr	r2, [r3, #28]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4013      	ands	r3, r2
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	bf0c      	ite	eq
 80039a6:	2301      	moveq	r3, #1
 80039a8:	2300      	movne	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d0a0      	beq.n	80038f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039be:	b480      	push	{r7}
 80039c0:	b095      	sub	sp, #84	@ 0x54
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80039e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e6      	bne.n	80039c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3308      	adds	r3, #8
 80039fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3308      	adds	r3, #8
 8003a16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e5      	bne.n	80039f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d118      	bne.n	8003a66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f023 0310 	bic.w	r3, r3, #16
 8003a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	6979      	ldr	r1, [r7, #20]
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e6      	bne.n	8003a34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a7a:	bf00      	nop
 8003a7c:	3754      	adds	r7, #84	@ 0x54
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <__cvt>:
 8003a86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a88:	ed2d 8b02 	vpush	{d8}
 8003a8c:	eeb0 8b40 	vmov.f64	d8, d0
 8003a90:	b085      	sub	sp, #20
 8003a92:	4617      	mov	r7, r2
 8003a94:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8003a96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a98:	ee18 2a90 	vmov	r2, s17
 8003a9c:	f025 0520 	bic.w	r5, r5, #32
 8003aa0:	2a00      	cmp	r2, #0
 8003aa2:	bfb6      	itet	lt
 8003aa4:	222d      	movlt	r2, #45	@ 0x2d
 8003aa6:	2200      	movge	r2, #0
 8003aa8:	eeb1 8b40 	vneglt.f64	d8, d0
 8003aac:	2d46      	cmp	r5, #70	@ 0x46
 8003aae:	460c      	mov	r4, r1
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	d004      	beq.n	8003abe <__cvt+0x38>
 8003ab4:	2d45      	cmp	r5, #69	@ 0x45
 8003ab6:	d100      	bne.n	8003aba <__cvt+0x34>
 8003ab8:	3401      	adds	r4, #1
 8003aba:	2102      	movs	r1, #2
 8003abc:	e000      	b.n	8003ac0 <__cvt+0x3a>
 8003abe:	2103      	movs	r1, #3
 8003ac0:	ab03      	add	r3, sp, #12
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	ab02      	add	r3, sp, #8
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	4622      	mov	r2, r4
 8003aca:	4633      	mov	r3, r6
 8003acc:	eeb0 0b48 	vmov.f64	d0, d8
 8003ad0:	f000 fe42 	bl	8004758 <_dtoa_r>
 8003ad4:	2d47      	cmp	r5, #71	@ 0x47
 8003ad6:	d114      	bne.n	8003b02 <__cvt+0x7c>
 8003ad8:	07fb      	lsls	r3, r7, #31
 8003ada:	d50a      	bpl.n	8003af2 <__cvt+0x6c>
 8003adc:	1902      	adds	r2, r0, r4
 8003ade:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae6:	bf08      	it	eq
 8003ae8:	9203      	streq	r2, [sp, #12]
 8003aea:	2130      	movs	r1, #48	@ 0x30
 8003aec:	9b03      	ldr	r3, [sp, #12]
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d319      	bcc.n	8003b26 <__cvt+0xa0>
 8003af2:	9b03      	ldr	r3, [sp, #12]
 8003af4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003af6:	1a1b      	subs	r3, r3, r0
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	b005      	add	sp, #20
 8003afc:	ecbd 8b02 	vpop	{d8}
 8003b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b02:	2d46      	cmp	r5, #70	@ 0x46
 8003b04:	eb00 0204 	add.w	r2, r0, r4
 8003b08:	d1e9      	bne.n	8003ade <__cvt+0x58>
 8003b0a:	7803      	ldrb	r3, [r0, #0]
 8003b0c:	2b30      	cmp	r3, #48	@ 0x30
 8003b0e:	d107      	bne.n	8003b20 <__cvt+0x9a>
 8003b10:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b18:	bf1c      	itt	ne
 8003b1a:	f1c4 0401 	rsbne	r4, r4, #1
 8003b1e:	6034      	strne	r4, [r6, #0]
 8003b20:	6833      	ldr	r3, [r6, #0]
 8003b22:	441a      	add	r2, r3
 8003b24:	e7db      	b.n	8003ade <__cvt+0x58>
 8003b26:	1c5c      	adds	r4, r3, #1
 8003b28:	9403      	str	r4, [sp, #12]
 8003b2a:	7019      	strb	r1, [r3, #0]
 8003b2c:	e7de      	b.n	8003aec <__cvt+0x66>

08003b2e <__exponent>:
 8003b2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b30:	2900      	cmp	r1, #0
 8003b32:	bfba      	itte	lt
 8003b34:	4249      	neglt	r1, r1
 8003b36:	232d      	movlt	r3, #45	@ 0x2d
 8003b38:	232b      	movge	r3, #43	@ 0x2b
 8003b3a:	2909      	cmp	r1, #9
 8003b3c:	7002      	strb	r2, [r0, #0]
 8003b3e:	7043      	strb	r3, [r0, #1]
 8003b40:	dd29      	ble.n	8003b96 <__exponent+0x68>
 8003b42:	f10d 0307 	add.w	r3, sp, #7
 8003b46:	461d      	mov	r5, r3
 8003b48:	270a      	movs	r7, #10
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003b50:	fb07 1416 	mls	r4, r7, r6, r1
 8003b54:	3430      	adds	r4, #48	@ 0x30
 8003b56:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	2c63      	cmp	r4, #99	@ 0x63
 8003b5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b62:	4631      	mov	r1, r6
 8003b64:	dcf1      	bgt.n	8003b4a <__exponent+0x1c>
 8003b66:	3130      	adds	r1, #48	@ 0x30
 8003b68:	1e94      	subs	r4, r2, #2
 8003b6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003b6e:	1c41      	adds	r1, r0, #1
 8003b70:	4623      	mov	r3, r4
 8003b72:	42ab      	cmp	r3, r5
 8003b74:	d30a      	bcc.n	8003b8c <__exponent+0x5e>
 8003b76:	f10d 0309 	add.w	r3, sp, #9
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	42ac      	cmp	r4, r5
 8003b7e:	bf88      	it	hi
 8003b80:	2300      	movhi	r3, #0
 8003b82:	3302      	adds	r3, #2
 8003b84:	4403      	add	r3, r0
 8003b86:	1a18      	subs	r0, r3, r0
 8003b88:	b003      	add	sp, #12
 8003b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003b90:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003b94:	e7ed      	b.n	8003b72 <__exponent+0x44>
 8003b96:	2330      	movs	r3, #48	@ 0x30
 8003b98:	3130      	adds	r1, #48	@ 0x30
 8003b9a:	7083      	strb	r3, [r0, #2]
 8003b9c:	70c1      	strb	r1, [r0, #3]
 8003b9e:	1d03      	adds	r3, r0, #4
 8003ba0:	e7f1      	b.n	8003b86 <__exponent+0x58>
 8003ba2:	0000      	movs	r0, r0
 8003ba4:	0000      	movs	r0, r0
	...

08003ba8 <_printf_float>:
 8003ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bac:	b08d      	sub	sp, #52	@ 0x34
 8003bae:	460c      	mov	r4, r1
 8003bb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003bb4:	4616      	mov	r6, r2
 8003bb6:	461f      	mov	r7, r3
 8003bb8:	4605      	mov	r5, r0
 8003bba:	f000 fccb 	bl	8004554 <_localeconv_r>
 8003bbe:	f8d0 b000 	ldr.w	fp, [r0]
 8003bc2:	4658      	mov	r0, fp
 8003bc4:	f7fc fb8c 	bl	80002e0 <strlen>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	930a      	str	r3, [sp, #40]	@ 0x28
 8003bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8003bd0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003bd4:	6822      	ldr	r2, [r4, #0]
 8003bd6:	9005      	str	r0, [sp, #20]
 8003bd8:	3307      	adds	r3, #7
 8003bda:	f023 0307 	bic.w	r3, r3, #7
 8003bde:	f103 0108 	add.w	r1, r3, #8
 8003be2:	f8c8 1000 	str.w	r1, [r8]
 8003be6:	ed93 0b00 	vldr	d0, [r3]
 8003bea:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8003e48 <_printf_float+0x2a0>
 8003bee:	eeb0 7bc0 	vabs.f64	d7, d0
 8003bf2:	eeb4 7b46 	vcmp.f64	d7, d6
 8003bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8003bfe:	dd24      	ble.n	8003c4a <_printf_float+0xa2>
 8003c00:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c08:	d502      	bpl.n	8003c10 <_printf_float+0x68>
 8003c0a:	232d      	movs	r3, #45	@ 0x2d
 8003c0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c10:	498f      	ldr	r1, [pc, #572]	@ (8003e50 <_printf_float+0x2a8>)
 8003c12:	4b90      	ldr	r3, [pc, #576]	@ (8003e54 <_printf_float+0x2ac>)
 8003c14:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8003c18:	bf94      	ite	ls
 8003c1a:	4688      	movls	r8, r1
 8003c1c:	4698      	movhi	r8, r3
 8003c1e:	f022 0204 	bic.w	r2, r2, #4
 8003c22:	2303      	movs	r3, #3
 8003c24:	6123      	str	r3, [r4, #16]
 8003c26:	6022      	str	r2, [r4, #0]
 8003c28:	f04f 0a00 	mov.w	sl, #0
 8003c2c:	9700      	str	r7, [sp, #0]
 8003c2e:	4633      	mov	r3, r6
 8003c30:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003c32:	4621      	mov	r1, r4
 8003c34:	4628      	mov	r0, r5
 8003c36:	f000 f9d1 	bl	8003fdc <_printf_common>
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	f040 8089 	bne.w	8003d52 <_printf_float+0x1aa>
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
 8003c44:	b00d      	add	sp, #52	@ 0x34
 8003c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c4a:	eeb4 0b40 	vcmp.f64	d0, d0
 8003c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c52:	d709      	bvc.n	8003c68 <_printf_float+0xc0>
 8003c54:	ee10 3a90 	vmov	r3, s1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bfbc      	itt	lt
 8003c5c:	232d      	movlt	r3, #45	@ 0x2d
 8003c5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003c62:	497d      	ldr	r1, [pc, #500]	@ (8003e58 <_printf_float+0x2b0>)
 8003c64:	4b7d      	ldr	r3, [pc, #500]	@ (8003e5c <_printf_float+0x2b4>)
 8003c66:	e7d5      	b.n	8003c14 <_printf_float+0x6c>
 8003c68:	6863      	ldr	r3, [r4, #4]
 8003c6a:	1c59      	adds	r1, r3, #1
 8003c6c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8003c70:	d139      	bne.n	8003ce6 <_printf_float+0x13e>
 8003c72:	2306      	movs	r3, #6
 8003c74:	6063      	str	r3, [r4, #4]
 8003c76:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	6022      	str	r2, [r4, #0]
 8003c7e:	9303      	str	r3, [sp, #12]
 8003c80:	ab0a      	add	r3, sp, #40	@ 0x28
 8003c82:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8003c86:	ab09      	add	r3, sp, #36	@ 0x24
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	6861      	ldr	r1, [r4, #4]
 8003c8c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003c90:	4628      	mov	r0, r5
 8003c92:	f7ff fef8 	bl	8003a86 <__cvt>
 8003c96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003c9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003c9c:	4680      	mov	r8, r0
 8003c9e:	d129      	bne.n	8003cf4 <_printf_float+0x14c>
 8003ca0:	1cc8      	adds	r0, r1, #3
 8003ca2:	db02      	blt.n	8003caa <_printf_float+0x102>
 8003ca4:	6863      	ldr	r3, [r4, #4]
 8003ca6:	4299      	cmp	r1, r3
 8003ca8:	dd41      	ble.n	8003d2e <_printf_float+0x186>
 8003caa:	f1a9 0902 	sub.w	r9, r9, #2
 8003cae:	fa5f f989 	uxtb.w	r9, r9
 8003cb2:	3901      	subs	r1, #1
 8003cb4:	464a      	mov	r2, r9
 8003cb6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003cba:	9109      	str	r1, [sp, #36]	@ 0x24
 8003cbc:	f7ff ff37 	bl	8003b2e <__exponent>
 8003cc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003cc2:	1813      	adds	r3, r2, r0
 8003cc4:	2a01      	cmp	r2, #1
 8003cc6:	4682      	mov	sl, r0
 8003cc8:	6123      	str	r3, [r4, #16]
 8003cca:	dc02      	bgt.n	8003cd2 <_printf_float+0x12a>
 8003ccc:	6822      	ldr	r2, [r4, #0]
 8003cce:	07d2      	lsls	r2, r2, #31
 8003cd0:	d501      	bpl.n	8003cd6 <_printf_float+0x12e>
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	6123      	str	r3, [r4, #16]
 8003cd6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0a6      	beq.n	8003c2c <_printf_float+0x84>
 8003cde:	232d      	movs	r3, #45	@ 0x2d
 8003ce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ce4:	e7a2      	b.n	8003c2c <_printf_float+0x84>
 8003ce6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003cea:	d1c4      	bne.n	8003c76 <_printf_float+0xce>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1c2      	bne.n	8003c76 <_printf_float+0xce>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e7bf      	b.n	8003c74 <_printf_float+0xcc>
 8003cf4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8003cf8:	d9db      	bls.n	8003cb2 <_printf_float+0x10a>
 8003cfa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8003cfe:	d118      	bne.n	8003d32 <_printf_float+0x18a>
 8003d00:	2900      	cmp	r1, #0
 8003d02:	6863      	ldr	r3, [r4, #4]
 8003d04:	dd0b      	ble.n	8003d1e <_printf_float+0x176>
 8003d06:	6121      	str	r1, [r4, #16]
 8003d08:	b913      	cbnz	r3, 8003d10 <_printf_float+0x168>
 8003d0a:	6822      	ldr	r2, [r4, #0]
 8003d0c:	07d0      	lsls	r0, r2, #31
 8003d0e:	d502      	bpl.n	8003d16 <_printf_float+0x16e>
 8003d10:	3301      	adds	r3, #1
 8003d12:	440b      	add	r3, r1
 8003d14:	6123      	str	r3, [r4, #16]
 8003d16:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003d18:	f04f 0a00 	mov.w	sl, #0
 8003d1c:	e7db      	b.n	8003cd6 <_printf_float+0x12e>
 8003d1e:	b913      	cbnz	r3, 8003d26 <_printf_float+0x17e>
 8003d20:	6822      	ldr	r2, [r4, #0]
 8003d22:	07d2      	lsls	r2, r2, #31
 8003d24:	d501      	bpl.n	8003d2a <_printf_float+0x182>
 8003d26:	3302      	adds	r3, #2
 8003d28:	e7f4      	b.n	8003d14 <_printf_float+0x16c>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e7f2      	b.n	8003d14 <_printf_float+0x16c>
 8003d2e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8003d32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003d34:	4299      	cmp	r1, r3
 8003d36:	db05      	blt.n	8003d44 <_printf_float+0x19c>
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	6121      	str	r1, [r4, #16]
 8003d3c:	07d8      	lsls	r0, r3, #31
 8003d3e:	d5ea      	bpl.n	8003d16 <_printf_float+0x16e>
 8003d40:	1c4b      	adds	r3, r1, #1
 8003d42:	e7e7      	b.n	8003d14 <_printf_float+0x16c>
 8003d44:	2900      	cmp	r1, #0
 8003d46:	bfd4      	ite	le
 8003d48:	f1c1 0202 	rsble	r2, r1, #2
 8003d4c:	2201      	movgt	r2, #1
 8003d4e:	4413      	add	r3, r2
 8003d50:	e7e0      	b.n	8003d14 <_printf_float+0x16c>
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	055a      	lsls	r2, r3, #21
 8003d56:	d407      	bmi.n	8003d68 <_printf_float+0x1c0>
 8003d58:	6923      	ldr	r3, [r4, #16]
 8003d5a:	4642      	mov	r2, r8
 8003d5c:	4631      	mov	r1, r6
 8003d5e:	4628      	mov	r0, r5
 8003d60:	47b8      	blx	r7
 8003d62:	3001      	adds	r0, #1
 8003d64:	d12a      	bne.n	8003dbc <_printf_float+0x214>
 8003d66:	e76b      	b.n	8003c40 <_printf_float+0x98>
 8003d68:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8003d6c:	f240 80e0 	bls.w	8003f30 <_printf_float+0x388>
 8003d70:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8003d74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7c:	d133      	bne.n	8003de6 <_printf_float+0x23e>
 8003d7e:	4a38      	ldr	r2, [pc, #224]	@ (8003e60 <_printf_float+0x2b8>)
 8003d80:	2301      	movs	r3, #1
 8003d82:	4631      	mov	r1, r6
 8003d84:	4628      	mov	r0, r5
 8003d86:	47b8      	blx	r7
 8003d88:	3001      	adds	r0, #1
 8003d8a:	f43f af59 	beq.w	8003c40 <_printf_float+0x98>
 8003d8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003d92:	4543      	cmp	r3, r8
 8003d94:	db02      	blt.n	8003d9c <_printf_float+0x1f4>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	07d8      	lsls	r0, r3, #31
 8003d9a:	d50f      	bpl.n	8003dbc <_printf_float+0x214>
 8003d9c:	9b05      	ldr	r3, [sp, #20]
 8003d9e:	465a      	mov	r2, fp
 8003da0:	4631      	mov	r1, r6
 8003da2:	4628      	mov	r0, r5
 8003da4:	47b8      	blx	r7
 8003da6:	3001      	adds	r0, #1
 8003da8:	f43f af4a 	beq.w	8003c40 <_printf_float+0x98>
 8003dac:	f04f 0900 	mov.w	r9, #0
 8003db0:	f108 38ff 	add.w	r8, r8, #4294967295
 8003db4:	f104 0a1a 	add.w	sl, r4, #26
 8003db8:	45c8      	cmp	r8, r9
 8003dba:	dc09      	bgt.n	8003dd0 <_printf_float+0x228>
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	079b      	lsls	r3, r3, #30
 8003dc0:	f100 8107 	bmi.w	8003fd2 <_printf_float+0x42a>
 8003dc4:	68e0      	ldr	r0, [r4, #12]
 8003dc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003dc8:	4298      	cmp	r0, r3
 8003dca:	bfb8      	it	lt
 8003dcc:	4618      	movlt	r0, r3
 8003dce:	e739      	b.n	8003c44 <_printf_float+0x9c>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	4652      	mov	r2, sl
 8003dd4:	4631      	mov	r1, r6
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	47b8      	blx	r7
 8003dda:	3001      	adds	r0, #1
 8003ddc:	f43f af30 	beq.w	8003c40 <_printf_float+0x98>
 8003de0:	f109 0901 	add.w	r9, r9, #1
 8003de4:	e7e8      	b.n	8003db8 <_printf_float+0x210>
 8003de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	dc3b      	bgt.n	8003e64 <_printf_float+0x2bc>
 8003dec:	4a1c      	ldr	r2, [pc, #112]	@ (8003e60 <_printf_float+0x2b8>)
 8003dee:	2301      	movs	r3, #1
 8003df0:	4631      	mov	r1, r6
 8003df2:	4628      	mov	r0, r5
 8003df4:	47b8      	blx	r7
 8003df6:	3001      	adds	r0, #1
 8003df8:	f43f af22 	beq.w	8003c40 <_printf_float+0x98>
 8003dfc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003e00:	ea59 0303 	orrs.w	r3, r9, r3
 8003e04:	d102      	bne.n	8003e0c <_printf_float+0x264>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	07d9      	lsls	r1, r3, #31
 8003e0a:	d5d7      	bpl.n	8003dbc <_printf_float+0x214>
 8003e0c:	9b05      	ldr	r3, [sp, #20]
 8003e0e:	465a      	mov	r2, fp
 8003e10:	4631      	mov	r1, r6
 8003e12:	4628      	mov	r0, r5
 8003e14:	47b8      	blx	r7
 8003e16:	3001      	adds	r0, #1
 8003e18:	f43f af12 	beq.w	8003c40 <_printf_float+0x98>
 8003e1c:	f04f 0a00 	mov.w	sl, #0
 8003e20:	f104 0b1a 	add.w	fp, r4, #26
 8003e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e26:	425b      	negs	r3, r3
 8003e28:	4553      	cmp	r3, sl
 8003e2a:	dc01      	bgt.n	8003e30 <_printf_float+0x288>
 8003e2c:	464b      	mov	r3, r9
 8003e2e:	e794      	b.n	8003d5a <_printf_float+0x1b2>
 8003e30:	2301      	movs	r3, #1
 8003e32:	465a      	mov	r2, fp
 8003e34:	4631      	mov	r1, r6
 8003e36:	4628      	mov	r0, r5
 8003e38:	47b8      	blx	r7
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	f43f af00 	beq.w	8003c40 <_printf_float+0x98>
 8003e40:	f10a 0a01 	add.w	sl, sl, #1
 8003e44:	e7ee      	b.n	8003e24 <_printf_float+0x27c>
 8003e46:	bf00      	nop
 8003e48:	ffffffff 	.word	0xffffffff
 8003e4c:	7fefffff 	.word	0x7fefffff
 8003e50:	08006654 	.word	0x08006654
 8003e54:	08006658 	.word	0x08006658
 8003e58:	0800665c 	.word	0x0800665c
 8003e5c:	08006660 	.word	0x08006660
 8003e60:	08006664 	.word	0x08006664
 8003e64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003e6a:	4553      	cmp	r3, sl
 8003e6c:	bfa8      	it	ge
 8003e6e:	4653      	movge	r3, sl
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	4699      	mov	r9, r3
 8003e74:	dc37      	bgt.n	8003ee6 <_printf_float+0x33e>
 8003e76:	2300      	movs	r3, #0
 8003e78:	9307      	str	r3, [sp, #28]
 8003e7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e7e:	f104 021a 	add.w	r2, r4, #26
 8003e82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e84:	9907      	ldr	r1, [sp, #28]
 8003e86:	9306      	str	r3, [sp, #24]
 8003e88:	eba3 0309 	sub.w	r3, r3, r9
 8003e8c:	428b      	cmp	r3, r1
 8003e8e:	dc31      	bgt.n	8003ef4 <_printf_float+0x34c>
 8003e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e92:	459a      	cmp	sl, r3
 8003e94:	dc3b      	bgt.n	8003f0e <_printf_float+0x366>
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	07da      	lsls	r2, r3, #31
 8003e9a:	d438      	bmi.n	8003f0e <_printf_float+0x366>
 8003e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e9e:	ebaa 0903 	sub.w	r9, sl, r3
 8003ea2:	9b06      	ldr	r3, [sp, #24]
 8003ea4:	ebaa 0303 	sub.w	r3, sl, r3
 8003ea8:	4599      	cmp	r9, r3
 8003eaa:	bfa8      	it	ge
 8003eac:	4699      	movge	r9, r3
 8003eae:	f1b9 0f00 	cmp.w	r9, #0
 8003eb2:	dc34      	bgt.n	8003f1e <_printf_float+0x376>
 8003eb4:	f04f 0800 	mov.w	r8, #0
 8003eb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ebc:	f104 0b1a 	add.w	fp, r4, #26
 8003ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ec2:	ebaa 0303 	sub.w	r3, sl, r3
 8003ec6:	eba3 0309 	sub.w	r3, r3, r9
 8003eca:	4543      	cmp	r3, r8
 8003ecc:	f77f af76 	ble.w	8003dbc <_printf_float+0x214>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	465a      	mov	r2, fp
 8003ed4:	4631      	mov	r1, r6
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	47b8      	blx	r7
 8003eda:	3001      	adds	r0, #1
 8003edc:	f43f aeb0 	beq.w	8003c40 <_printf_float+0x98>
 8003ee0:	f108 0801 	add.w	r8, r8, #1
 8003ee4:	e7ec      	b.n	8003ec0 <_printf_float+0x318>
 8003ee6:	4642      	mov	r2, r8
 8003ee8:	4631      	mov	r1, r6
 8003eea:	4628      	mov	r0, r5
 8003eec:	47b8      	blx	r7
 8003eee:	3001      	adds	r0, #1
 8003ef0:	d1c1      	bne.n	8003e76 <_printf_float+0x2ce>
 8003ef2:	e6a5      	b.n	8003c40 <_printf_float+0x98>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	4631      	mov	r1, r6
 8003ef8:	4628      	mov	r0, r5
 8003efa:	9206      	str	r2, [sp, #24]
 8003efc:	47b8      	blx	r7
 8003efe:	3001      	adds	r0, #1
 8003f00:	f43f ae9e 	beq.w	8003c40 <_printf_float+0x98>
 8003f04:	9b07      	ldr	r3, [sp, #28]
 8003f06:	9a06      	ldr	r2, [sp, #24]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	9307      	str	r3, [sp, #28]
 8003f0c:	e7b9      	b.n	8003e82 <_printf_float+0x2da>
 8003f0e:	9b05      	ldr	r3, [sp, #20]
 8003f10:	465a      	mov	r2, fp
 8003f12:	4631      	mov	r1, r6
 8003f14:	4628      	mov	r0, r5
 8003f16:	47b8      	blx	r7
 8003f18:	3001      	adds	r0, #1
 8003f1a:	d1bf      	bne.n	8003e9c <_printf_float+0x2f4>
 8003f1c:	e690      	b.n	8003c40 <_printf_float+0x98>
 8003f1e:	9a06      	ldr	r2, [sp, #24]
 8003f20:	464b      	mov	r3, r9
 8003f22:	4442      	add	r2, r8
 8003f24:	4631      	mov	r1, r6
 8003f26:	4628      	mov	r0, r5
 8003f28:	47b8      	blx	r7
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d1c2      	bne.n	8003eb4 <_printf_float+0x30c>
 8003f2e:	e687      	b.n	8003c40 <_printf_float+0x98>
 8003f30:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8003f34:	f1b9 0f01 	cmp.w	r9, #1
 8003f38:	dc01      	bgt.n	8003f3e <_printf_float+0x396>
 8003f3a:	07db      	lsls	r3, r3, #31
 8003f3c:	d536      	bpl.n	8003fac <_printf_float+0x404>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	4642      	mov	r2, r8
 8003f42:	4631      	mov	r1, r6
 8003f44:	4628      	mov	r0, r5
 8003f46:	47b8      	blx	r7
 8003f48:	3001      	adds	r0, #1
 8003f4a:	f43f ae79 	beq.w	8003c40 <_printf_float+0x98>
 8003f4e:	9b05      	ldr	r3, [sp, #20]
 8003f50:	465a      	mov	r2, fp
 8003f52:	4631      	mov	r1, r6
 8003f54:	4628      	mov	r0, r5
 8003f56:	47b8      	blx	r7
 8003f58:	3001      	adds	r0, #1
 8003f5a:	f43f ae71 	beq.w	8003c40 <_printf_float+0x98>
 8003f5e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8003f62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6a:	f109 39ff 	add.w	r9, r9, #4294967295
 8003f6e:	d018      	beq.n	8003fa2 <_printf_float+0x3fa>
 8003f70:	464b      	mov	r3, r9
 8003f72:	f108 0201 	add.w	r2, r8, #1
 8003f76:	4631      	mov	r1, r6
 8003f78:	4628      	mov	r0, r5
 8003f7a:	47b8      	blx	r7
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	d10c      	bne.n	8003f9a <_printf_float+0x3f2>
 8003f80:	e65e      	b.n	8003c40 <_printf_float+0x98>
 8003f82:	2301      	movs	r3, #1
 8003f84:	465a      	mov	r2, fp
 8003f86:	4631      	mov	r1, r6
 8003f88:	4628      	mov	r0, r5
 8003f8a:	47b8      	blx	r7
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	f43f ae57 	beq.w	8003c40 <_printf_float+0x98>
 8003f92:	f108 0801 	add.w	r8, r8, #1
 8003f96:	45c8      	cmp	r8, r9
 8003f98:	dbf3      	blt.n	8003f82 <_printf_float+0x3da>
 8003f9a:	4653      	mov	r3, sl
 8003f9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003fa0:	e6dc      	b.n	8003d5c <_printf_float+0x1b4>
 8003fa2:	f04f 0800 	mov.w	r8, #0
 8003fa6:	f104 0b1a 	add.w	fp, r4, #26
 8003faa:	e7f4      	b.n	8003f96 <_printf_float+0x3ee>
 8003fac:	2301      	movs	r3, #1
 8003fae:	4642      	mov	r2, r8
 8003fb0:	e7e1      	b.n	8003f76 <_printf_float+0x3ce>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	464a      	mov	r2, r9
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	4628      	mov	r0, r5
 8003fba:	47b8      	blx	r7
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	f43f ae3f 	beq.w	8003c40 <_printf_float+0x98>
 8003fc2:	f108 0801 	add.w	r8, r8, #1
 8003fc6:	68e3      	ldr	r3, [r4, #12]
 8003fc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003fca:	1a5b      	subs	r3, r3, r1
 8003fcc:	4543      	cmp	r3, r8
 8003fce:	dcf0      	bgt.n	8003fb2 <_printf_float+0x40a>
 8003fd0:	e6f8      	b.n	8003dc4 <_printf_float+0x21c>
 8003fd2:	f04f 0800 	mov.w	r8, #0
 8003fd6:	f104 0919 	add.w	r9, r4, #25
 8003fda:	e7f4      	b.n	8003fc6 <_printf_float+0x41e>

08003fdc <_printf_common>:
 8003fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe0:	4616      	mov	r6, r2
 8003fe2:	4698      	mov	r8, r3
 8003fe4:	688a      	ldr	r2, [r1, #8]
 8003fe6:	690b      	ldr	r3, [r1, #16]
 8003fe8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fec:	4293      	cmp	r3, r2
 8003fee:	bfb8      	it	lt
 8003ff0:	4613      	movlt	r3, r2
 8003ff2:	6033      	str	r3, [r6, #0]
 8003ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ff8:	4607      	mov	r7, r0
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	b10a      	cbz	r2, 8004002 <_printf_common+0x26>
 8003ffe:	3301      	adds	r3, #1
 8004000:	6033      	str	r3, [r6, #0]
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	0699      	lsls	r1, r3, #26
 8004006:	bf42      	ittt	mi
 8004008:	6833      	ldrmi	r3, [r6, #0]
 800400a:	3302      	addmi	r3, #2
 800400c:	6033      	strmi	r3, [r6, #0]
 800400e:	6825      	ldr	r5, [r4, #0]
 8004010:	f015 0506 	ands.w	r5, r5, #6
 8004014:	d106      	bne.n	8004024 <_printf_common+0x48>
 8004016:	f104 0a19 	add.w	sl, r4, #25
 800401a:	68e3      	ldr	r3, [r4, #12]
 800401c:	6832      	ldr	r2, [r6, #0]
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	42ab      	cmp	r3, r5
 8004022:	dc26      	bgt.n	8004072 <_printf_common+0x96>
 8004024:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004028:	6822      	ldr	r2, [r4, #0]
 800402a:	3b00      	subs	r3, #0
 800402c:	bf18      	it	ne
 800402e:	2301      	movne	r3, #1
 8004030:	0692      	lsls	r2, r2, #26
 8004032:	d42b      	bmi.n	800408c <_printf_common+0xb0>
 8004034:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004038:	4641      	mov	r1, r8
 800403a:	4638      	mov	r0, r7
 800403c:	47c8      	blx	r9
 800403e:	3001      	adds	r0, #1
 8004040:	d01e      	beq.n	8004080 <_printf_common+0xa4>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	6922      	ldr	r2, [r4, #16]
 8004046:	f003 0306 	and.w	r3, r3, #6
 800404a:	2b04      	cmp	r3, #4
 800404c:	bf02      	ittt	eq
 800404e:	68e5      	ldreq	r5, [r4, #12]
 8004050:	6833      	ldreq	r3, [r6, #0]
 8004052:	1aed      	subeq	r5, r5, r3
 8004054:	68a3      	ldr	r3, [r4, #8]
 8004056:	bf0c      	ite	eq
 8004058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800405c:	2500      	movne	r5, #0
 800405e:	4293      	cmp	r3, r2
 8004060:	bfc4      	itt	gt
 8004062:	1a9b      	subgt	r3, r3, r2
 8004064:	18ed      	addgt	r5, r5, r3
 8004066:	2600      	movs	r6, #0
 8004068:	341a      	adds	r4, #26
 800406a:	42b5      	cmp	r5, r6
 800406c:	d11a      	bne.n	80040a4 <_printf_common+0xc8>
 800406e:	2000      	movs	r0, #0
 8004070:	e008      	b.n	8004084 <_printf_common+0xa8>
 8004072:	2301      	movs	r3, #1
 8004074:	4652      	mov	r2, sl
 8004076:	4641      	mov	r1, r8
 8004078:	4638      	mov	r0, r7
 800407a:	47c8      	blx	r9
 800407c:	3001      	adds	r0, #1
 800407e:	d103      	bne.n	8004088 <_printf_common+0xac>
 8004080:	f04f 30ff 	mov.w	r0, #4294967295
 8004084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004088:	3501      	adds	r5, #1
 800408a:	e7c6      	b.n	800401a <_printf_common+0x3e>
 800408c:	18e1      	adds	r1, r4, r3
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	2030      	movs	r0, #48	@ 0x30
 8004092:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004096:	4422      	add	r2, r4
 8004098:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800409c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040a0:	3302      	adds	r3, #2
 80040a2:	e7c7      	b.n	8004034 <_printf_common+0x58>
 80040a4:	2301      	movs	r3, #1
 80040a6:	4622      	mov	r2, r4
 80040a8:	4641      	mov	r1, r8
 80040aa:	4638      	mov	r0, r7
 80040ac:	47c8      	blx	r9
 80040ae:	3001      	adds	r0, #1
 80040b0:	d0e6      	beq.n	8004080 <_printf_common+0xa4>
 80040b2:	3601      	adds	r6, #1
 80040b4:	e7d9      	b.n	800406a <_printf_common+0x8e>
	...

080040b8 <_printf_i>:
 80040b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040bc:	7e0f      	ldrb	r7, [r1, #24]
 80040be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040c0:	2f78      	cmp	r7, #120	@ 0x78
 80040c2:	4691      	mov	r9, r2
 80040c4:	4680      	mov	r8, r0
 80040c6:	460c      	mov	r4, r1
 80040c8:	469a      	mov	sl, r3
 80040ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80040ce:	d807      	bhi.n	80040e0 <_printf_i+0x28>
 80040d0:	2f62      	cmp	r7, #98	@ 0x62
 80040d2:	d80a      	bhi.n	80040ea <_printf_i+0x32>
 80040d4:	2f00      	cmp	r7, #0
 80040d6:	f000 80d2 	beq.w	800427e <_printf_i+0x1c6>
 80040da:	2f58      	cmp	r7, #88	@ 0x58
 80040dc:	f000 80b9 	beq.w	8004252 <_printf_i+0x19a>
 80040e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040e8:	e03a      	b.n	8004160 <_printf_i+0xa8>
 80040ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040ee:	2b15      	cmp	r3, #21
 80040f0:	d8f6      	bhi.n	80040e0 <_printf_i+0x28>
 80040f2:	a101      	add	r1, pc, #4	@ (adr r1, 80040f8 <_printf_i+0x40>)
 80040f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040f8:	08004151 	.word	0x08004151
 80040fc:	08004165 	.word	0x08004165
 8004100:	080040e1 	.word	0x080040e1
 8004104:	080040e1 	.word	0x080040e1
 8004108:	080040e1 	.word	0x080040e1
 800410c:	080040e1 	.word	0x080040e1
 8004110:	08004165 	.word	0x08004165
 8004114:	080040e1 	.word	0x080040e1
 8004118:	080040e1 	.word	0x080040e1
 800411c:	080040e1 	.word	0x080040e1
 8004120:	080040e1 	.word	0x080040e1
 8004124:	08004265 	.word	0x08004265
 8004128:	0800418f 	.word	0x0800418f
 800412c:	0800421f 	.word	0x0800421f
 8004130:	080040e1 	.word	0x080040e1
 8004134:	080040e1 	.word	0x080040e1
 8004138:	08004287 	.word	0x08004287
 800413c:	080040e1 	.word	0x080040e1
 8004140:	0800418f 	.word	0x0800418f
 8004144:	080040e1 	.word	0x080040e1
 8004148:	080040e1 	.word	0x080040e1
 800414c:	08004227 	.word	0x08004227
 8004150:	6833      	ldr	r3, [r6, #0]
 8004152:	1d1a      	adds	r2, r3, #4
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6032      	str	r2, [r6, #0]
 8004158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800415c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004160:	2301      	movs	r3, #1
 8004162:	e09d      	b.n	80042a0 <_printf_i+0x1e8>
 8004164:	6833      	ldr	r3, [r6, #0]
 8004166:	6820      	ldr	r0, [r4, #0]
 8004168:	1d19      	adds	r1, r3, #4
 800416a:	6031      	str	r1, [r6, #0]
 800416c:	0606      	lsls	r6, r0, #24
 800416e:	d501      	bpl.n	8004174 <_printf_i+0xbc>
 8004170:	681d      	ldr	r5, [r3, #0]
 8004172:	e003      	b.n	800417c <_printf_i+0xc4>
 8004174:	0645      	lsls	r5, r0, #25
 8004176:	d5fb      	bpl.n	8004170 <_printf_i+0xb8>
 8004178:	f9b3 5000 	ldrsh.w	r5, [r3]
 800417c:	2d00      	cmp	r5, #0
 800417e:	da03      	bge.n	8004188 <_printf_i+0xd0>
 8004180:	232d      	movs	r3, #45	@ 0x2d
 8004182:	426d      	negs	r5, r5
 8004184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004188:	4859      	ldr	r0, [pc, #356]	@ (80042f0 <_printf_i+0x238>)
 800418a:	230a      	movs	r3, #10
 800418c:	e011      	b.n	80041b2 <_printf_i+0xfa>
 800418e:	6821      	ldr	r1, [r4, #0]
 8004190:	6833      	ldr	r3, [r6, #0]
 8004192:	0608      	lsls	r0, r1, #24
 8004194:	f853 5b04 	ldr.w	r5, [r3], #4
 8004198:	d402      	bmi.n	80041a0 <_printf_i+0xe8>
 800419a:	0649      	lsls	r1, r1, #25
 800419c:	bf48      	it	mi
 800419e:	b2ad      	uxthmi	r5, r5
 80041a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80041a2:	4853      	ldr	r0, [pc, #332]	@ (80042f0 <_printf_i+0x238>)
 80041a4:	6033      	str	r3, [r6, #0]
 80041a6:	bf14      	ite	ne
 80041a8:	230a      	movne	r3, #10
 80041aa:	2308      	moveq	r3, #8
 80041ac:	2100      	movs	r1, #0
 80041ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80041b2:	6866      	ldr	r6, [r4, #4]
 80041b4:	60a6      	str	r6, [r4, #8]
 80041b6:	2e00      	cmp	r6, #0
 80041b8:	bfa2      	ittt	ge
 80041ba:	6821      	ldrge	r1, [r4, #0]
 80041bc:	f021 0104 	bicge.w	r1, r1, #4
 80041c0:	6021      	strge	r1, [r4, #0]
 80041c2:	b90d      	cbnz	r5, 80041c8 <_printf_i+0x110>
 80041c4:	2e00      	cmp	r6, #0
 80041c6:	d04b      	beq.n	8004260 <_printf_i+0x1a8>
 80041c8:	4616      	mov	r6, r2
 80041ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80041ce:	fb03 5711 	mls	r7, r3, r1, r5
 80041d2:	5dc7      	ldrb	r7, [r0, r7]
 80041d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041d8:	462f      	mov	r7, r5
 80041da:	42bb      	cmp	r3, r7
 80041dc:	460d      	mov	r5, r1
 80041de:	d9f4      	bls.n	80041ca <_printf_i+0x112>
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d10b      	bne.n	80041fc <_printf_i+0x144>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	07df      	lsls	r7, r3, #31
 80041e8:	d508      	bpl.n	80041fc <_printf_i+0x144>
 80041ea:	6923      	ldr	r3, [r4, #16]
 80041ec:	6861      	ldr	r1, [r4, #4]
 80041ee:	4299      	cmp	r1, r3
 80041f0:	bfde      	ittt	le
 80041f2:	2330      	movle	r3, #48	@ 0x30
 80041f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041fc:	1b92      	subs	r2, r2, r6
 80041fe:	6122      	str	r2, [r4, #16]
 8004200:	f8cd a000 	str.w	sl, [sp]
 8004204:	464b      	mov	r3, r9
 8004206:	aa03      	add	r2, sp, #12
 8004208:	4621      	mov	r1, r4
 800420a:	4640      	mov	r0, r8
 800420c:	f7ff fee6 	bl	8003fdc <_printf_common>
 8004210:	3001      	adds	r0, #1
 8004212:	d14a      	bne.n	80042aa <_printf_i+0x1f2>
 8004214:	f04f 30ff 	mov.w	r0, #4294967295
 8004218:	b004      	add	sp, #16
 800421a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	f043 0320 	orr.w	r3, r3, #32
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	4833      	ldr	r0, [pc, #204]	@ (80042f4 <_printf_i+0x23c>)
 8004228:	2778      	movs	r7, #120	@ 0x78
 800422a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	6831      	ldr	r1, [r6, #0]
 8004232:	061f      	lsls	r7, r3, #24
 8004234:	f851 5b04 	ldr.w	r5, [r1], #4
 8004238:	d402      	bmi.n	8004240 <_printf_i+0x188>
 800423a:	065f      	lsls	r7, r3, #25
 800423c:	bf48      	it	mi
 800423e:	b2ad      	uxthmi	r5, r5
 8004240:	6031      	str	r1, [r6, #0]
 8004242:	07d9      	lsls	r1, r3, #31
 8004244:	bf44      	itt	mi
 8004246:	f043 0320 	orrmi.w	r3, r3, #32
 800424a:	6023      	strmi	r3, [r4, #0]
 800424c:	b11d      	cbz	r5, 8004256 <_printf_i+0x19e>
 800424e:	2310      	movs	r3, #16
 8004250:	e7ac      	b.n	80041ac <_printf_i+0xf4>
 8004252:	4827      	ldr	r0, [pc, #156]	@ (80042f0 <_printf_i+0x238>)
 8004254:	e7e9      	b.n	800422a <_printf_i+0x172>
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	f023 0320 	bic.w	r3, r3, #32
 800425c:	6023      	str	r3, [r4, #0]
 800425e:	e7f6      	b.n	800424e <_printf_i+0x196>
 8004260:	4616      	mov	r6, r2
 8004262:	e7bd      	b.n	80041e0 <_printf_i+0x128>
 8004264:	6833      	ldr	r3, [r6, #0]
 8004266:	6825      	ldr	r5, [r4, #0]
 8004268:	6961      	ldr	r1, [r4, #20]
 800426a:	1d18      	adds	r0, r3, #4
 800426c:	6030      	str	r0, [r6, #0]
 800426e:	062e      	lsls	r6, r5, #24
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	d501      	bpl.n	8004278 <_printf_i+0x1c0>
 8004274:	6019      	str	r1, [r3, #0]
 8004276:	e002      	b.n	800427e <_printf_i+0x1c6>
 8004278:	0668      	lsls	r0, r5, #25
 800427a:	d5fb      	bpl.n	8004274 <_printf_i+0x1bc>
 800427c:	8019      	strh	r1, [r3, #0]
 800427e:	2300      	movs	r3, #0
 8004280:	6123      	str	r3, [r4, #16]
 8004282:	4616      	mov	r6, r2
 8004284:	e7bc      	b.n	8004200 <_printf_i+0x148>
 8004286:	6833      	ldr	r3, [r6, #0]
 8004288:	1d1a      	adds	r2, r3, #4
 800428a:	6032      	str	r2, [r6, #0]
 800428c:	681e      	ldr	r6, [r3, #0]
 800428e:	6862      	ldr	r2, [r4, #4]
 8004290:	2100      	movs	r1, #0
 8004292:	4630      	mov	r0, r6
 8004294:	f7fb ffd4 	bl	8000240 <memchr>
 8004298:	b108      	cbz	r0, 800429e <_printf_i+0x1e6>
 800429a:	1b80      	subs	r0, r0, r6
 800429c:	6060      	str	r0, [r4, #4]
 800429e:	6863      	ldr	r3, [r4, #4]
 80042a0:	6123      	str	r3, [r4, #16]
 80042a2:	2300      	movs	r3, #0
 80042a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042a8:	e7aa      	b.n	8004200 <_printf_i+0x148>
 80042aa:	6923      	ldr	r3, [r4, #16]
 80042ac:	4632      	mov	r2, r6
 80042ae:	4649      	mov	r1, r9
 80042b0:	4640      	mov	r0, r8
 80042b2:	47d0      	blx	sl
 80042b4:	3001      	adds	r0, #1
 80042b6:	d0ad      	beq.n	8004214 <_printf_i+0x15c>
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	079b      	lsls	r3, r3, #30
 80042bc:	d413      	bmi.n	80042e6 <_printf_i+0x22e>
 80042be:	68e0      	ldr	r0, [r4, #12]
 80042c0:	9b03      	ldr	r3, [sp, #12]
 80042c2:	4298      	cmp	r0, r3
 80042c4:	bfb8      	it	lt
 80042c6:	4618      	movlt	r0, r3
 80042c8:	e7a6      	b.n	8004218 <_printf_i+0x160>
 80042ca:	2301      	movs	r3, #1
 80042cc:	4632      	mov	r2, r6
 80042ce:	4649      	mov	r1, r9
 80042d0:	4640      	mov	r0, r8
 80042d2:	47d0      	blx	sl
 80042d4:	3001      	adds	r0, #1
 80042d6:	d09d      	beq.n	8004214 <_printf_i+0x15c>
 80042d8:	3501      	adds	r5, #1
 80042da:	68e3      	ldr	r3, [r4, #12]
 80042dc:	9903      	ldr	r1, [sp, #12]
 80042de:	1a5b      	subs	r3, r3, r1
 80042e0:	42ab      	cmp	r3, r5
 80042e2:	dcf2      	bgt.n	80042ca <_printf_i+0x212>
 80042e4:	e7eb      	b.n	80042be <_printf_i+0x206>
 80042e6:	2500      	movs	r5, #0
 80042e8:	f104 0619 	add.w	r6, r4, #25
 80042ec:	e7f5      	b.n	80042da <_printf_i+0x222>
 80042ee:	bf00      	nop
 80042f0:	08006666 	.word	0x08006666
 80042f4:	08006677 	.word	0x08006677

080042f8 <std>:
 80042f8:	2300      	movs	r3, #0
 80042fa:	b510      	push	{r4, lr}
 80042fc:	4604      	mov	r4, r0
 80042fe:	e9c0 3300 	strd	r3, r3, [r0]
 8004302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004306:	6083      	str	r3, [r0, #8]
 8004308:	8181      	strh	r1, [r0, #12]
 800430a:	6643      	str	r3, [r0, #100]	@ 0x64
 800430c:	81c2      	strh	r2, [r0, #14]
 800430e:	6183      	str	r3, [r0, #24]
 8004310:	4619      	mov	r1, r3
 8004312:	2208      	movs	r2, #8
 8004314:	305c      	adds	r0, #92	@ 0x5c
 8004316:	f000 f914 	bl	8004542 <memset>
 800431a:	4b0d      	ldr	r3, [pc, #52]	@ (8004350 <std+0x58>)
 800431c:	6263      	str	r3, [r4, #36]	@ 0x24
 800431e:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <std+0x5c>)
 8004320:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004322:	4b0d      	ldr	r3, [pc, #52]	@ (8004358 <std+0x60>)
 8004324:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004326:	4b0d      	ldr	r3, [pc, #52]	@ (800435c <std+0x64>)
 8004328:	6323      	str	r3, [r4, #48]	@ 0x30
 800432a:	4b0d      	ldr	r3, [pc, #52]	@ (8004360 <std+0x68>)
 800432c:	6224      	str	r4, [r4, #32]
 800432e:	429c      	cmp	r4, r3
 8004330:	d006      	beq.n	8004340 <std+0x48>
 8004332:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004336:	4294      	cmp	r4, r2
 8004338:	d002      	beq.n	8004340 <std+0x48>
 800433a:	33d0      	adds	r3, #208	@ 0xd0
 800433c:	429c      	cmp	r4, r3
 800433e:	d105      	bne.n	800434c <std+0x54>
 8004340:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004348:	f000 b978 	b.w	800463c <__retarget_lock_init_recursive>
 800434c:	bd10      	pop	{r4, pc}
 800434e:	bf00      	nop
 8004350:	080044bd 	.word	0x080044bd
 8004354:	080044df 	.word	0x080044df
 8004358:	08004517 	.word	0x08004517
 800435c:	0800453b 	.word	0x0800453b
 8004360:	20000348 	.word	0x20000348

08004364 <stdio_exit_handler>:
 8004364:	4a02      	ldr	r2, [pc, #8]	@ (8004370 <stdio_exit_handler+0xc>)
 8004366:	4903      	ldr	r1, [pc, #12]	@ (8004374 <stdio_exit_handler+0x10>)
 8004368:	4803      	ldr	r0, [pc, #12]	@ (8004378 <stdio_exit_handler+0x14>)
 800436a:	f000 b869 	b.w	8004440 <_fwalk_sglue>
 800436e:	bf00      	nop
 8004370:	2000000c 	.word	0x2000000c
 8004374:	08005ec1 	.word	0x08005ec1
 8004378:	2000001c 	.word	0x2000001c

0800437c <cleanup_stdio>:
 800437c:	6841      	ldr	r1, [r0, #4]
 800437e:	4b0c      	ldr	r3, [pc, #48]	@ (80043b0 <cleanup_stdio+0x34>)
 8004380:	4299      	cmp	r1, r3
 8004382:	b510      	push	{r4, lr}
 8004384:	4604      	mov	r4, r0
 8004386:	d001      	beq.n	800438c <cleanup_stdio+0x10>
 8004388:	f001 fd9a 	bl	8005ec0 <_fflush_r>
 800438c:	68a1      	ldr	r1, [r4, #8]
 800438e:	4b09      	ldr	r3, [pc, #36]	@ (80043b4 <cleanup_stdio+0x38>)
 8004390:	4299      	cmp	r1, r3
 8004392:	d002      	beq.n	800439a <cleanup_stdio+0x1e>
 8004394:	4620      	mov	r0, r4
 8004396:	f001 fd93 	bl	8005ec0 <_fflush_r>
 800439a:	68e1      	ldr	r1, [r4, #12]
 800439c:	4b06      	ldr	r3, [pc, #24]	@ (80043b8 <cleanup_stdio+0x3c>)
 800439e:	4299      	cmp	r1, r3
 80043a0:	d004      	beq.n	80043ac <cleanup_stdio+0x30>
 80043a2:	4620      	mov	r0, r4
 80043a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043a8:	f001 bd8a 	b.w	8005ec0 <_fflush_r>
 80043ac:	bd10      	pop	{r4, pc}
 80043ae:	bf00      	nop
 80043b0:	20000348 	.word	0x20000348
 80043b4:	200003b0 	.word	0x200003b0
 80043b8:	20000418 	.word	0x20000418

080043bc <global_stdio_init.part.0>:
 80043bc:	b510      	push	{r4, lr}
 80043be:	4b0b      	ldr	r3, [pc, #44]	@ (80043ec <global_stdio_init.part.0+0x30>)
 80043c0:	4c0b      	ldr	r4, [pc, #44]	@ (80043f0 <global_stdio_init.part.0+0x34>)
 80043c2:	4a0c      	ldr	r2, [pc, #48]	@ (80043f4 <global_stdio_init.part.0+0x38>)
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	4620      	mov	r0, r4
 80043c8:	2200      	movs	r2, #0
 80043ca:	2104      	movs	r1, #4
 80043cc:	f7ff ff94 	bl	80042f8 <std>
 80043d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043d4:	2201      	movs	r2, #1
 80043d6:	2109      	movs	r1, #9
 80043d8:	f7ff ff8e 	bl	80042f8 <std>
 80043dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043e0:	2202      	movs	r2, #2
 80043e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043e6:	2112      	movs	r1, #18
 80043e8:	f7ff bf86 	b.w	80042f8 <std>
 80043ec:	20000480 	.word	0x20000480
 80043f0:	20000348 	.word	0x20000348
 80043f4:	08004365 	.word	0x08004365

080043f8 <__sfp_lock_acquire>:
 80043f8:	4801      	ldr	r0, [pc, #4]	@ (8004400 <__sfp_lock_acquire+0x8>)
 80043fa:	f000 b920 	b.w	800463e <__retarget_lock_acquire_recursive>
 80043fe:	bf00      	nop
 8004400:	20000489 	.word	0x20000489

08004404 <__sfp_lock_release>:
 8004404:	4801      	ldr	r0, [pc, #4]	@ (800440c <__sfp_lock_release+0x8>)
 8004406:	f000 b91b 	b.w	8004640 <__retarget_lock_release_recursive>
 800440a:	bf00      	nop
 800440c:	20000489 	.word	0x20000489

08004410 <__sinit>:
 8004410:	b510      	push	{r4, lr}
 8004412:	4604      	mov	r4, r0
 8004414:	f7ff fff0 	bl	80043f8 <__sfp_lock_acquire>
 8004418:	6a23      	ldr	r3, [r4, #32]
 800441a:	b11b      	cbz	r3, 8004424 <__sinit+0x14>
 800441c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004420:	f7ff bff0 	b.w	8004404 <__sfp_lock_release>
 8004424:	4b04      	ldr	r3, [pc, #16]	@ (8004438 <__sinit+0x28>)
 8004426:	6223      	str	r3, [r4, #32]
 8004428:	4b04      	ldr	r3, [pc, #16]	@ (800443c <__sinit+0x2c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f5      	bne.n	800441c <__sinit+0xc>
 8004430:	f7ff ffc4 	bl	80043bc <global_stdio_init.part.0>
 8004434:	e7f2      	b.n	800441c <__sinit+0xc>
 8004436:	bf00      	nop
 8004438:	0800437d 	.word	0x0800437d
 800443c:	20000480 	.word	0x20000480

08004440 <_fwalk_sglue>:
 8004440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004444:	4607      	mov	r7, r0
 8004446:	4688      	mov	r8, r1
 8004448:	4614      	mov	r4, r2
 800444a:	2600      	movs	r6, #0
 800444c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004450:	f1b9 0901 	subs.w	r9, r9, #1
 8004454:	d505      	bpl.n	8004462 <_fwalk_sglue+0x22>
 8004456:	6824      	ldr	r4, [r4, #0]
 8004458:	2c00      	cmp	r4, #0
 800445a:	d1f7      	bne.n	800444c <_fwalk_sglue+0xc>
 800445c:	4630      	mov	r0, r6
 800445e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004462:	89ab      	ldrh	r3, [r5, #12]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d907      	bls.n	8004478 <_fwalk_sglue+0x38>
 8004468:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800446c:	3301      	adds	r3, #1
 800446e:	d003      	beq.n	8004478 <_fwalk_sglue+0x38>
 8004470:	4629      	mov	r1, r5
 8004472:	4638      	mov	r0, r7
 8004474:	47c0      	blx	r8
 8004476:	4306      	orrs	r6, r0
 8004478:	3568      	adds	r5, #104	@ 0x68
 800447a:	e7e9      	b.n	8004450 <_fwalk_sglue+0x10>

0800447c <siprintf>:
 800447c:	b40e      	push	{r1, r2, r3}
 800447e:	b500      	push	{lr}
 8004480:	b09c      	sub	sp, #112	@ 0x70
 8004482:	ab1d      	add	r3, sp, #116	@ 0x74
 8004484:	9002      	str	r0, [sp, #8]
 8004486:	9006      	str	r0, [sp, #24]
 8004488:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800448c:	4809      	ldr	r0, [pc, #36]	@ (80044b4 <siprintf+0x38>)
 800448e:	9107      	str	r1, [sp, #28]
 8004490:	9104      	str	r1, [sp, #16]
 8004492:	4909      	ldr	r1, [pc, #36]	@ (80044b8 <siprintf+0x3c>)
 8004494:	f853 2b04 	ldr.w	r2, [r3], #4
 8004498:	9105      	str	r1, [sp, #20]
 800449a:	6800      	ldr	r0, [r0, #0]
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	a902      	add	r1, sp, #8
 80044a0:	f001 fb8e 	bl	8005bc0 <_svfiprintf_r>
 80044a4:	9b02      	ldr	r3, [sp, #8]
 80044a6:	2200      	movs	r2, #0
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	b01c      	add	sp, #112	@ 0x70
 80044ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80044b0:	b003      	add	sp, #12
 80044b2:	4770      	bx	lr
 80044b4:	20000018 	.word	0x20000018
 80044b8:	ffff0208 	.word	0xffff0208

080044bc <__sread>:
 80044bc:	b510      	push	{r4, lr}
 80044be:	460c      	mov	r4, r1
 80044c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c4:	f000 f86c 	bl	80045a0 <_read_r>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	bfab      	itete	ge
 80044cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80044ce:	89a3      	ldrhlt	r3, [r4, #12]
 80044d0:	181b      	addge	r3, r3, r0
 80044d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044d6:	bfac      	ite	ge
 80044d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044da:	81a3      	strhlt	r3, [r4, #12]
 80044dc:	bd10      	pop	{r4, pc}

080044de <__swrite>:
 80044de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e2:	461f      	mov	r7, r3
 80044e4:	898b      	ldrh	r3, [r1, #12]
 80044e6:	05db      	lsls	r3, r3, #23
 80044e8:	4605      	mov	r5, r0
 80044ea:	460c      	mov	r4, r1
 80044ec:	4616      	mov	r6, r2
 80044ee:	d505      	bpl.n	80044fc <__swrite+0x1e>
 80044f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f4:	2302      	movs	r3, #2
 80044f6:	2200      	movs	r2, #0
 80044f8:	f000 f840 	bl	800457c <_lseek_r>
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004502:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004506:	81a3      	strh	r3, [r4, #12]
 8004508:	4632      	mov	r2, r6
 800450a:	463b      	mov	r3, r7
 800450c:	4628      	mov	r0, r5
 800450e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004512:	f000 b857 	b.w	80045c4 <_write_r>

08004516 <__sseek>:
 8004516:	b510      	push	{r4, lr}
 8004518:	460c      	mov	r4, r1
 800451a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800451e:	f000 f82d 	bl	800457c <_lseek_r>
 8004522:	1c43      	adds	r3, r0, #1
 8004524:	89a3      	ldrh	r3, [r4, #12]
 8004526:	bf15      	itete	ne
 8004528:	6560      	strne	r0, [r4, #84]	@ 0x54
 800452a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800452e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004532:	81a3      	strheq	r3, [r4, #12]
 8004534:	bf18      	it	ne
 8004536:	81a3      	strhne	r3, [r4, #12]
 8004538:	bd10      	pop	{r4, pc}

0800453a <__sclose>:
 800453a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800453e:	f000 b80d 	b.w	800455c <_close_r>

08004542 <memset>:
 8004542:	4402      	add	r2, r0
 8004544:	4603      	mov	r3, r0
 8004546:	4293      	cmp	r3, r2
 8004548:	d100      	bne.n	800454c <memset+0xa>
 800454a:	4770      	bx	lr
 800454c:	f803 1b01 	strb.w	r1, [r3], #1
 8004550:	e7f9      	b.n	8004546 <memset+0x4>
	...

08004554 <_localeconv_r>:
 8004554:	4800      	ldr	r0, [pc, #0]	@ (8004558 <_localeconv_r+0x4>)
 8004556:	4770      	bx	lr
 8004558:	20000158 	.word	0x20000158

0800455c <_close_r>:
 800455c:	b538      	push	{r3, r4, r5, lr}
 800455e:	4d06      	ldr	r5, [pc, #24]	@ (8004578 <_close_r+0x1c>)
 8004560:	2300      	movs	r3, #0
 8004562:	4604      	mov	r4, r0
 8004564:	4608      	mov	r0, r1
 8004566:	602b      	str	r3, [r5, #0]
 8004568:	f7fc fc2f 	bl	8000dca <_close>
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	d102      	bne.n	8004576 <_close_r+0x1a>
 8004570:	682b      	ldr	r3, [r5, #0]
 8004572:	b103      	cbz	r3, 8004576 <_close_r+0x1a>
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	bd38      	pop	{r3, r4, r5, pc}
 8004578:	20000484 	.word	0x20000484

0800457c <_lseek_r>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	4d07      	ldr	r5, [pc, #28]	@ (800459c <_lseek_r+0x20>)
 8004580:	4604      	mov	r4, r0
 8004582:	4608      	mov	r0, r1
 8004584:	4611      	mov	r1, r2
 8004586:	2200      	movs	r2, #0
 8004588:	602a      	str	r2, [r5, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	f7fc fc44 	bl	8000e18 <_lseek>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d102      	bne.n	800459a <_lseek_r+0x1e>
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	b103      	cbz	r3, 800459a <_lseek_r+0x1e>
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	bd38      	pop	{r3, r4, r5, pc}
 800459c:	20000484 	.word	0x20000484

080045a0 <_read_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	4d07      	ldr	r5, [pc, #28]	@ (80045c0 <_read_r+0x20>)
 80045a4:	4604      	mov	r4, r0
 80045a6:	4608      	mov	r0, r1
 80045a8:	4611      	mov	r1, r2
 80045aa:	2200      	movs	r2, #0
 80045ac:	602a      	str	r2, [r5, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f7fc fbd2 	bl	8000d58 <_read>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d102      	bne.n	80045be <_read_r+0x1e>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	b103      	cbz	r3, 80045be <_read_r+0x1e>
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	20000484 	.word	0x20000484

080045c4 <_write_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4d07      	ldr	r5, [pc, #28]	@ (80045e4 <_write_r+0x20>)
 80045c8:	4604      	mov	r4, r0
 80045ca:	4608      	mov	r0, r1
 80045cc:	4611      	mov	r1, r2
 80045ce:	2200      	movs	r2, #0
 80045d0:	602a      	str	r2, [r5, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f7fc fbdd 	bl	8000d92 <_write>
 80045d8:	1c43      	adds	r3, r0, #1
 80045da:	d102      	bne.n	80045e2 <_write_r+0x1e>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	b103      	cbz	r3, 80045e2 <_write_r+0x1e>
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	bd38      	pop	{r3, r4, r5, pc}
 80045e4:	20000484 	.word	0x20000484

080045e8 <__errno>:
 80045e8:	4b01      	ldr	r3, [pc, #4]	@ (80045f0 <__errno+0x8>)
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	20000018 	.word	0x20000018

080045f4 <__libc_init_array>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	4d0d      	ldr	r5, [pc, #52]	@ (800462c <__libc_init_array+0x38>)
 80045f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004630 <__libc_init_array+0x3c>)
 80045fa:	1b64      	subs	r4, r4, r5
 80045fc:	10a4      	asrs	r4, r4, #2
 80045fe:	2600      	movs	r6, #0
 8004600:	42a6      	cmp	r6, r4
 8004602:	d109      	bne.n	8004618 <__libc_init_array+0x24>
 8004604:	4d0b      	ldr	r5, [pc, #44]	@ (8004634 <__libc_init_array+0x40>)
 8004606:	4c0c      	ldr	r4, [pc, #48]	@ (8004638 <__libc_init_array+0x44>)
 8004608:	f001 fff8 	bl	80065fc <_init>
 800460c:	1b64      	subs	r4, r4, r5
 800460e:	10a4      	asrs	r4, r4, #2
 8004610:	2600      	movs	r6, #0
 8004612:	42a6      	cmp	r6, r4
 8004614:	d105      	bne.n	8004622 <__libc_init_array+0x2e>
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	f855 3b04 	ldr.w	r3, [r5], #4
 800461c:	4798      	blx	r3
 800461e:	3601      	adds	r6, #1
 8004620:	e7ee      	b.n	8004600 <__libc_init_array+0xc>
 8004622:	f855 3b04 	ldr.w	r3, [r5], #4
 8004626:	4798      	blx	r3
 8004628:	3601      	adds	r6, #1
 800462a:	e7f2      	b.n	8004612 <__libc_init_array+0x1e>
 800462c:	080069d0 	.word	0x080069d0
 8004630:	080069d0 	.word	0x080069d0
 8004634:	080069d0 	.word	0x080069d0
 8004638:	080069d4 	.word	0x080069d4

0800463c <__retarget_lock_init_recursive>:
 800463c:	4770      	bx	lr

0800463e <__retarget_lock_acquire_recursive>:
 800463e:	4770      	bx	lr

08004640 <__retarget_lock_release_recursive>:
 8004640:	4770      	bx	lr

08004642 <quorem>:
 8004642:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004646:	6903      	ldr	r3, [r0, #16]
 8004648:	690c      	ldr	r4, [r1, #16]
 800464a:	42a3      	cmp	r3, r4
 800464c:	4607      	mov	r7, r0
 800464e:	db7e      	blt.n	800474e <quorem+0x10c>
 8004650:	3c01      	subs	r4, #1
 8004652:	f101 0814 	add.w	r8, r1, #20
 8004656:	00a3      	lsls	r3, r4, #2
 8004658:	f100 0514 	add.w	r5, r0, #20
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004668:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800466c:	3301      	adds	r3, #1
 800466e:	429a      	cmp	r2, r3
 8004670:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004674:	fbb2 f6f3 	udiv	r6, r2, r3
 8004678:	d32e      	bcc.n	80046d8 <quorem+0x96>
 800467a:	f04f 0a00 	mov.w	sl, #0
 800467e:	46c4      	mov	ip, r8
 8004680:	46ae      	mov	lr, r5
 8004682:	46d3      	mov	fp, sl
 8004684:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004688:	b298      	uxth	r0, r3
 800468a:	fb06 a000 	mla	r0, r6, r0, sl
 800468e:	0c02      	lsrs	r2, r0, #16
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	fb06 2303 	mla	r3, r6, r3, r2
 8004696:	f8de 2000 	ldr.w	r2, [lr]
 800469a:	b280      	uxth	r0, r0
 800469c:	b292      	uxth	r2, r2
 800469e:	1a12      	subs	r2, r2, r0
 80046a0:	445a      	add	r2, fp
 80046a2:	f8de 0000 	ldr.w	r0, [lr]
 80046a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80046b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80046b4:	b292      	uxth	r2, r2
 80046b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80046ba:	45e1      	cmp	r9, ip
 80046bc:	f84e 2b04 	str.w	r2, [lr], #4
 80046c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80046c4:	d2de      	bcs.n	8004684 <quorem+0x42>
 80046c6:	9b00      	ldr	r3, [sp, #0]
 80046c8:	58eb      	ldr	r3, [r5, r3]
 80046ca:	b92b      	cbnz	r3, 80046d8 <quorem+0x96>
 80046cc:	9b01      	ldr	r3, [sp, #4]
 80046ce:	3b04      	subs	r3, #4
 80046d0:	429d      	cmp	r5, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	d32f      	bcc.n	8004736 <quorem+0xf4>
 80046d6:	613c      	str	r4, [r7, #16]
 80046d8:	4638      	mov	r0, r7
 80046da:	f001 f90d 	bl	80058f8 <__mcmp>
 80046de:	2800      	cmp	r0, #0
 80046e0:	db25      	blt.n	800472e <quorem+0xec>
 80046e2:	4629      	mov	r1, r5
 80046e4:	2000      	movs	r0, #0
 80046e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80046ea:	f8d1 c000 	ldr.w	ip, [r1]
 80046ee:	fa1f fe82 	uxth.w	lr, r2
 80046f2:	fa1f f38c 	uxth.w	r3, ip
 80046f6:	eba3 030e 	sub.w	r3, r3, lr
 80046fa:	4403      	add	r3, r0
 80046fc:	0c12      	lsrs	r2, r2, #16
 80046fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004702:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004706:	b29b      	uxth	r3, r3
 8004708:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800470c:	45c1      	cmp	r9, r8
 800470e:	f841 3b04 	str.w	r3, [r1], #4
 8004712:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004716:	d2e6      	bcs.n	80046e6 <quorem+0xa4>
 8004718:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800471c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004720:	b922      	cbnz	r2, 800472c <quorem+0xea>
 8004722:	3b04      	subs	r3, #4
 8004724:	429d      	cmp	r5, r3
 8004726:	461a      	mov	r2, r3
 8004728:	d30b      	bcc.n	8004742 <quorem+0x100>
 800472a:	613c      	str	r4, [r7, #16]
 800472c:	3601      	adds	r6, #1
 800472e:	4630      	mov	r0, r6
 8004730:	b003      	add	sp, #12
 8004732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	3b04      	subs	r3, #4
 800473a:	2a00      	cmp	r2, #0
 800473c:	d1cb      	bne.n	80046d6 <quorem+0x94>
 800473e:	3c01      	subs	r4, #1
 8004740:	e7c6      	b.n	80046d0 <quorem+0x8e>
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	3b04      	subs	r3, #4
 8004746:	2a00      	cmp	r2, #0
 8004748:	d1ef      	bne.n	800472a <quorem+0xe8>
 800474a:	3c01      	subs	r4, #1
 800474c:	e7ea      	b.n	8004724 <quorem+0xe2>
 800474e:	2000      	movs	r0, #0
 8004750:	e7ee      	b.n	8004730 <quorem+0xee>
 8004752:	0000      	movs	r0, r0
 8004754:	0000      	movs	r0, r0
	...

08004758 <_dtoa_r>:
 8004758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475c:	ed2d 8b02 	vpush	{d8}
 8004760:	69c7      	ldr	r7, [r0, #28]
 8004762:	b091      	sub	sp, #68	@ 0x44
 8004764:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004768:	ec55 4b10 	vmov	r4, r5, d0
 800476c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800476e:	9107      	str	r1, [sp, #28]
 8004770:	4681      	mov	r9, r0
 8004772:	9209      	str	r2, [sp, #36]	@ 0x24
 8004774:	930d      	str	r3, [sp, #52]	@ 0x34
 8004776:	b97f      	cbnz	r7, 8004798 <_dtoa_r+0x40>
 8004778:	2010      	movs	r0, #16
 800477a:	f000 fd8d 	bl	8005298 <malloc>
 800477e:	4602      	mov	r2, r0
 8004780:	f8c9 001c 	str.w	r0, [r9, #28]
 8004784:	b920      	cbnz	r0, 8004790 <_dtoa_r+0x38>
 8004786:	4ba0      	ldr	r3, [pc, #640]	@ (8004a08 <_dtoa_r+0x2b0>)
 8004788:	21ef      	movs	r1, #239	@ 0xef
 800478a:	48a0      	ldr	r0, [pc, #640]	@ (8004a0c <_dtoa_r+0x2b4>)
 800478c:	f001 fbf8 	bl	8005f80 <__assert_func>
 8004790:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004794:	6007      	str	r7, [r0, #0]
 8004796:	60c7      	str	r7, [r0, #12]
 8004798:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800479c:	6819      	ldr	r1, [r3, #0]
 800479e:	b159      	cbz	r1, 80047b8 <_dtoa_r+0x60>
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	604a      	str	r2, [r1, #4]
 80047a4:	2301      	movs	r3, #1
 80047a6:	4093      	lsls	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
 80047aa:	4648      	mov	r0, r9
 80047ac:	f000 fe6a 	bl	8005484 <_Bfree>
 80047b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	1e2b      	subs	r3, r5, #0
 80047ba:	bfbb      	ittet	lt
 80047bc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80047c0:	9303      	strlt	r3, [sp, #12]
 80047c2:	2300      	movge	r3, #0
 80047c4:	2201      	movlt	r2, #1
 80047c6:	bfac      	ite	ge
 80047c8:	6033      	strge	r3, [r6, #0]
 80047ca:	6032      	strlt	r2, [r6, #0]
 80047cc:	4b90      	ldr	r3, [pc, #576]	@ (8004a10 <_dtoa_r+0x2b8>)
 80047ce:	9e03      	ldr	r6, [sp, #12]
 80047d0:	43b3      	bics	r3, r6
 80047d2:	d110      	bne.n	80047f6 <_dtoa_r+0x9e>
 80047d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80047d6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80047e0:	4323      	orrs	r3, r4
 80047e2:	f000 84de 	beq.w	80051a2 <_dtoa_r+0xa4a>
 80047e6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80047e8:	4f8a      	ldr	r7, [pc, #552]	@ (8004a14 <_dtoa_r+0x2bc>)
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 84e0 	beq.w	80051b0 <_dtoa_r+0xa58>
 80047f0:	1cfb      	adds	r3, r7, #3
 80047f2:	f000 bcdb 	b.w	80051ac <_dtoa_r+0xa54>
 80047f6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80047fa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80047fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004802:	d10a      	bne.n	800481a <_dtoa_r+0xc2>
 8004804:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004806:	2301      	movs	r3, #1
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800480c:	b113      	cbz	r3, 8004814 <_dtoa_r+0xbc>
 800480e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8004810:	4b81      	ldr	r3, [pc, #516]	@ (8004a18 <_dtoa_r+0x2c0>)
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	4f81      	ldr	r7, [pc, #516]	@ (8004a1c <_dtoa_r+0x2c4>)
 8004816:	f000 bccb 	b.w	80051b0 <_dtoa_r+0xa58>
 800481a:	aa0e      	add	r2, sp, #56	@ 0x38
 800481c:	a90f      	add	r1, sp, #60	@ 0x3c
 800481e:	4648      	mov	r0, r9
 8004820:	eeb0 0b48 	vmov.f64	d0, d8
 8004824:	f001 f918 	bl	8005a58 <__d2b>
 8004828:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800482c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800482e:	9001      	str	r0, [sp, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d045      	beq.n	80048c0 <_dtoa_r+0x168>
 8004834:	eeb0 7b48 	vmov.f64	d7, d8
 8004838:	ee18 1a90 	vmov	r1, s17
 800483c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004840:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8004844:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8004848:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800484c:	2500      	movs	r5, #0
 800484e:	ee07 1a90 	vmov	s15, r1
 8004852:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8004856:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80049f0 <_dtoa_r+0x298>
 800485a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800485e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80049f8 <_dtoa_r+0x2a0>
 8004862:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004866:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8004a00 <_dtoa_r+0x2a8>
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004872:	eeb0 7b46 	vmov.f64	d7, d6
 8004876:	eea4 7b05 	vfma.f64	d7, d4, d5
 800487a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800487e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004886:	ee16 8a90 	vmov	r8, s13
 800488a:	d508      	bpl.n	800489e <_dtoa_r+0x146>
 800488c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004890:	eeb4 6b47 	vcmp.f64	d6, d7
 8004894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004898:	bf18      	it	ne
 800489a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800489e:	f1b8 0f16 	cmp.w	r8, #22
 80048a2:	d82b      	bhi.n	80048fc <_dtoa_r+0x1a4>
 80048a4:	495e      	ldr	r1, [pc, #376]	@ (8004a20 <_dtoa_r+0x2c8>)
 80048a6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80048aa:	ed91 7b00 	vldr	d7, [r1]
 80048ae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80048b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b6:	d501      	bpl.n	80048bc <_dtoa_r+0x164>
 80048b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80048bc:	2100      	movs	r1, #0
 80048be:	e01e      	b.n	80048fe <_dtoa_r+0x1a6>
 80048c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80048c2:	4413      	add	r3, r2
 80048c4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80048c8:	2920      	cmp	r1, #32
 80048ca:	bfc1      	itttt	gt
 80048cc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80048d0:	408e      	lslgt	r6, r1
 80048d2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80048d6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80048da:	bfd6      	itet	le
 80048dc:	f1c1 0120 	rsble	r1, r1, #32
 80048e0:	4331      	orrgt	r1, r6
 80048e2:	fa04 f101 	lslle.w	r1, r4, r1
 80048e6:	ee07 1a90 	vmov	s15, r1
 80048ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80048ee:	3b01      	subs	r3, #1
 80048f0:	ee17 1a90 	vmov	r1, s15
 80048f4:	2501      	movs	r5, #1
 80048f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80048fa:	e7a8      	b.n	800484e <_dtoa_r+0xf6>
 80048fc:	2101      	movs	r1, #1
 80048fe:	1ad2      	subs	r2, r2, r3
 8004900:	1e53      	subs	r3, r2, #1
 8004902:	9306      	str	r3, [sp, #24]
 8004904:	bf45      	ittet	mi
 8004906:	f1c2 0301 	rsbmi	r3, r2, #1
 800490a:	9305      	strmi	r3, [sp, #20]
 800490c:	2300      	movpl	r3, #0
 800490e:	2300      	movmi	r3, #0
 8004910:	bf4c      	ite	mi
 8004912:	9306      	strmi	r3, [sp, #24]
 8004914:	9305      	strpl	r3, [sp, #20]
 8004916:	f1b8 0f00 	cmp.w	r8, #0
 800491a:	910c      	str	r1, [sp, #48]	@ 0x30
 800491c:	db18      	blt.n	8004950 <_dtoa_r+0x1f8>
 800491e:	9b06      	ldr	r3, [sp, #24]
 8004920:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004924:	4443      	add	r3, r8
 8004926:	9306      	str	r3, [sp, #24]
 8004928:	2300      	movs	r3, #0
 800492a:	9a07      	ldr	r2, [sp, #28]
 800492c:	2a09      	cmp	r2, #9
 800492e:	d849      	bhi.n	80049c4 <_dtoa_r+0x26c>
 8004930:	2a05      	cmp	r2, #5
 8004932:	bfc4      	itt	gt
 8004934:	3a04      	subgt	r2, #4
 8004936:	9207      	strgt	r2, [sp, #28]
 8004938:	9a07      	ldr	r2, [sp, #28]
 800493a:	f1a2 0202 	sub.w	r2, r2, #2
 800493e:	bfcc      	ite	gt
 8004940:	2400      	movgt	r4, #0
 8004942:	2401      	movle	r4, #1
 8004944:	2a03      	cmp	r2, #3
 8004946:	d848      	bhi.n	80049da <_dtoa_r+0x282>
 8004948:	e8df f002 	tbb	[pc, r2]
 800494c:	3a2c2e0b 	.word	0x3a2c2e0b
 8004950:	9b05      	ldr	r3, [sp, #20]
 8004952:	2200      	movs	r2, #0
 8004954:	eba3 0308 	sub.w	r3, r3, r8
 8004958:	9305      	str	r3, [sp, #20]
 800495a:	920a      	str	r2, [sp, #40]	@ 0x28
 800495c:	f1c8 0300 	rsb	r3, r8, #0
 8004960:	e7e3      	b.n	800492a <_dtoa_r+0x1d2>
 8004962:	2200      	movs	r2, #0
 8004964:	9208      	str	r2, [sp, #32]
 8004966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004968:	2a00      	cmp	r2, #0
 800496a:	dc39      	bgt.n	80049e0 <_dtoa_r+0x288>
 800496c:	f04f 0b01 	mov.w	fp, #1
 8004970:	46da      	mov	sl, fp
 8004972:	465a      	mov	r2, fp
 8004974:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8004978:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800497c:	2100      	movs	r1, #0
 800497e:	2004      	movs	r0, #4
 8004980:	f100 0614 	add.w	r6, r0, #20
 8004984:	4296      	cmp	r6, r2
 8004986:	d930      	bls.n	80049ea <_dtoa_r+0x292>
 8004988:	6079      	str	r1, [r7, #4]
 800498a:	4648      	mov	r0, r9
 800498c:	9304      	str	r3, [sp, #16]
 800498e:	f000 fd39 	bl	8005404 <_Balloc>
 8004992:	9b04      	ldr	r3, [sp, #16]
 8004994:	4607      	mov	r7, r0
 8004996:	2800      	cmp	r0, #0
 8004998:	d146      	bne.n	8004a28 <_dtoa_r+0x2d0>
 800499a:	4b22      	ldr	r3, [pc, #136]	@ (8004a24 <_dtoa_r+0x2cc>)
 800499c:	4602      	mov	r2, r0
 800499e:	f240 11af 	movw	r1, #431	@ 0x1af
 80049a2:	e6f2      	b.n	800478a <_dtoa_r+0x32>
 80049a4:	2201      	movs	r2, #1
 80049a6:	e7dd      	b.n	8004964 <_dtoa_r+0x20c>
 80049a8:	2200      	movs	r2, #0
 80049aa:	9208      	str	r2, [sp, #32]
 80049ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049ae:	eb08 0b02 	add.w	fp, r8, r2
 80049b2:	f10b 0a01 	add.w	sl, fp, #1
 80049b6:	4652      	mov	r2, sl
 80049b8:	2a01      	cmp	r2, #1
 80049ba:	bfb8      	it	lt
 80049bc:	2201      	movlt	r2, #1
 80049be:	e7db      	b.n	8004978 <_dtoa_r+0x220>
 80049c0:	2201      	movs	r2, #1
 80049c2:	e7f2      	b.n	80049aa <_dtoa_r+0x252>
 80049c4:	2401      	movs	r4, #1
 80049c6:	2200      	movs	r2, #0
 80049c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80049cc:	f04f 3bff 	mov.w	fp, #4294967295
 80049d0:	2100      	movs	r1, #0
 80049d2:	46da      	mov	sl, fp
 80049d4:	2212      	movs	r2, #18
 80049d6:	9109      	str	r1, [sp, #36]	@ 0x24
 80049d8:	e7ce      	b.n	8004978 <_dtoa_r+0x220>
 80049da:	2201      	movs	r2, #1
 80049dc:	9208      	str	r2, [sp, #32]
 80049de:	e7f5      	b.n	80049cc <_dtoa_r+0x274>
 80049e0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80049e4:	46da      	mov	sl, fp
 80049e6:	465a      	mov	r2, fp
 80049e8:	e7c6      	b.n	8004978 <_dtoa_r+0x220>
 80049ea:	3101      	adds	r1, #1
 80049ec:	0040      	lsls	r0, r0, #1
 80049ee:	e7c7      	b.n	8004980 <_dtoa_r+0x228>
 80049f0:	636f4361 	.word	0x636f4361
 80049f4:	3fd287a7 	.word	0x3fd287a7
 80049f8:	8b60c8b3 	.word	0x8b60c8b3
 80049fc:	3fc68a28 	.word	0x3fc68a28
 8004a00:	509f79fb 	.word	0x509f79fb
 8004a04:	3fd34413 	.word	0x3fd34413
 8004a08:	08006695 	.word	0x08006695
 8004a0c:	080066ac 	.word	0x080066ac
 8004a10:	7ff00000 	.word	0x7ff00000
 8004a14:	08006691 	.word	0x08006691
 8004a18:	08006665 	.word	0x08006665
 8004a1c:	08006664 	.word	0x08006664
 8004a20:	080067a8 	.word	0x080067a8
 8004a24:	08006704 	.word	0x08006704
 8004a28:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8004a2c:	f1ba 0f0e 	cmp.w	sl, #14
 8004a30:	6010      	str	r0, [r2, #0]
 8004a32:	d86f      	bhi.n	8004b14 <_dtoa_r+0x3bc>
 8004a34:	2c00      	cmp	r4, #0
 8004a36:	d06d      	beq.n	8004b14 <_dtoa_r+0x3bc>
 8004a38:	f1b8 0f00 	cmp.w	r8, #0
 8004a3c:	f340 80c2 	ble.w	8004bc4 <_dtoa_r+0x46c>
 8004a40:	4aca      	ldr	r2, [pc, #808]	@ (8004d6c <_dtoa_r+0x614>)
 8004a42:	f008 010f 	and.w	r1, r8, #15
 8004a46:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004a4a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8004a4e:	ed92 7b00 	vldr	d7, [r2]
 8004a52:	ea4f 1128 	mov.w	r1, r8, asr #4
 8004a56:	f000 80a9 	beq.w	8004bac <_dtoa_r+0x454>
 8004a5a:	4ac5      	ldr	r2, [pc, #788]	@ (8004d70 <_dtoa_r+0x618>)
 8004a5c:	ed92 6b08 	vldr	d6, [r2, #32]
 8004a60:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8004a64:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004a68:	f001 010f 	and.w	r1, r1, #15
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	48c0      	ldr	r0, [pc, #768]	@ (8004d70 <_dtoa_r+0x618>)
 8004a70:	2900      	cmp	r1, #0
 8004a72:	f040 809d 	bne.w	8004bb0 <_dtoa_r+0x458>
 8004a76:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004a7a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004a7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004a82:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004a84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	f000 80c1 	beq.w	8004c10 <_dtoa_r+0x4b8>
 8004a8e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8004a92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9a:	f140 80b9 	bpl.w	8004c10 <_dtoa_r+0x4b8>
 8004a9e:	f1ba 0f00 	cmp.w	sl, #0
 8004aa2:	f000 80b5 	beq.w	8004c10 <_dtoa_r+0x4b8>
 8004aa6:	f1bb 0f00 	cmp.w	fp, #0
 8004aaa:	dd31      	ble.n	8004b10 <_dtoa_r+0x3b8>
 8004aac:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8004ab0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004ab4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004ab8:	f108 31ff 	add.w	r1, r8, #4294967295
 8004abc:	9104      	str	r1, [sp, #16]
 8004abe:	3201      	adds	r2, #1
 8004ac0:	465c      	mov	r4, fp
 8004ac2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004ac6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8004aca:	ee07 2a90 	vmov	s15, r2
 8004ace:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004ad2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004ad6:	ee15 2a90 	vmov	r2, s11
 8004ada:	ec51 0b15 	vmov	r0, r1, d5
 8004ade:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8004ae2:	2c00      	cmp	r4, #0
 8004ae4:	f040 8098 	bne.w	8004c18 <_dtoa_r+0x4c0>
 8004ae8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8004aec:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004af0:	ec41 0b17 	vmov	d7, r0, r1
 8004af4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afc:	f300 8261 	bgt.w	8004fc2 <_dtoa_r+0x86a>
 8004b00:	eeb1 7b47 	vneg.f64	d7, d7
 8004b04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0c:	f100 80f5 	bmi.w	8004cfa <_dtoa_r+0x5a2>
 8004b10:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004b14:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004b16:	2a00      	cmp	r2, #0
 8004b18:	f2c0 812c 	blt.w	8004d74 <_dtoa_r+0x61c>
 8004b1c:	f1b8 0f0e 	cmp.w	r8, #14
 8004b20:	f300 8128 	bgt.w	8004d74 <_dtoa_r+0x61c>
 8004b24:	4b91      	ldr	r3, [pc, #580]	@ (8004d6c <_dtoa_r+0x614>)
 8004b26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004b2a:	ed93 6b00 	vldr	d6, [r3]
 8004b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	da03      	bge.n	8004b3c <_dtoa_r+0x3e4>
 8004b34:	f1ba 0f00 	cmp.w	sl, #0
 8004b38:	f340 80d2 	ble.w	8004ce0 <_dtoa_r+0x588>
 8004b3c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8004b40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b44:	463e      	mov	r6, r7
 8004b46:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004b4a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004b4e:	ee15 3a10 	vmov	r3, s10
 8004b52:	3330      	adds	r3, #48	@ 0x30
 8004b54:	f806 3b01 	strb.w	r3, [r6], #1
 8004b58:	1bf3      	subs	r3, r6, r7
 8004b5a:	459a      	cmp	sl, r3
 8004b5c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8004b60:	eea3 7b46 	vfms.f64	d7, d3, d6
 8004b64:	f040 80f8 	bne.w	8004d58 <_dtoa_r+0x600>
 8004b68:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004b6c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b74:	f300 80dd 	bgt.w	8004d32 <_dtoa_r+0x5da>
 8004b78:	eeb4 7b46 	vcmp.f64	d7, d6
 8004b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b80:	d104      	bne.n	8004b8c <_dtoa_r+0x434>
 8004b82:	ee15 3a10 	vmov	r3, s10
 8004b86:	07db      	lsls	r3, r3, #31
 8004b88:	f100 80d3 	bmi.w	8004d32 <_dtoa_r+0x5da>
 8004b8c:	9901      	ldr	r1, [sp, #4]
 8004b8e:	4648      	mov	r0, r9
 8004b90:	f000 fc78 	bl	8005484 <_Bfree>
 8004b94:	2300      	movs	r3, #0
 8004b96:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004b98:	7033      	strb	r3, [r6, #0]
 8004b9a:	f108 0301 	add.w	r3, r8, #1
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 8304 	beq.w	80051b0 <_dtoa_r+0xa58>
 8004ba8:	601e      	str	r6, [r3, #0]
 8004baa:	e301      	b.n	80051b0 <_dtoa_r+0xa58>
 8004bac:	2202      	movs	r2, #2
 8004bae:	e75e      	b.n	8004a6e <_dtoa_r+0x316>
 8004bb0:	07cc      	lsls	r4, r1, #31
 8004bb2:	d504      	bpl.n	8004bbe <_dtoa_r+0x466>
 8004bb4:	ed90 6b00 	vldr	d6, [r0]
 8004bb8:	3201      	adds	r2, #1
 8004bba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004bbe:	1049      	asrs	r1, r1, #1
 8004bc0:	3008      	adds	r0, #8
 8004bc2:	e755      	b.n	8004a70 <_dtoa_r+0x318>
 8004bc4:	d022      	beq.n	8004c0c <_dtoa_r+0x4b4>
 8004bc6:	f1c8 0100 	rsb	r1, r8, #0
 8004bca:	4a68      	ldr	r2, [pc, #416]	@ (8004d6c <_dtoa_r+0x614>)
 8004bcc:	f001 000f 	and.w	r0, r1, #15
 8004bd0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004bd4:	ed92 7b00 	vldr	d7, [r2]
 8004bd8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004bdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004be0:	4863      	ldr	r0, [pc, #396]	@ (8004d70 <_dtoa_r+0x618>)
 8004be2:	1109      	asrs	r1, r1, #4
 8004be4:	2400      	movs	r4, #0
 8004be6:	2202      	movs	r2, #2
 8004be8:	b929      	cbnz	r1, 8004bf6 <_dtoa_r+0x49e>
 8004bea:	2c00      	cmp	r4, #0
 8004bec:	f43f af49 	beq.w	8004a82 <_dtoa_r+0x32a>
 8004bf0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004bf4:	e745      	b.n	8004a82 <_dtoa_r+0x32a>
 8004bf6:	07ce      	lsls	r6, r1, #31
 8004bf8:	d505      	bpl.n	8004c06 <_dtoa_r+0x4ae>
 8004bfa:	ed90 6b00 	vldr	d6, [r0]
 8004bfe:	3201      	adds	r2, #1
 8004c00:	2401      	movs	r4, #1
 8004c02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004c06:	1049      	asrs	r1, r1, #1
 8004c08:	3008      	adds	r0, #8
 8004c0a:	e7ed      	b.n	8004be8 <_dtoa_r+0x490>
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	e738      	b.n	8004a82 <_dtoa_r+0x32a>
 8004c10:	f8cd 8010 	str.w	r8, [sp, #16]
 8004c14:	4654      	mov	r4, sl
 8004c16:	e754      	b.n	8004ac2 <_dtoa_r+0x36a>
 8004c18:	4a54      	ldr	r2, [pc, #336]	@ (8004d6c <_dtoa_r+0x614>)
 8004c1a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8004c1e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8004c22:	9a08      	ldr	r2, [sp, #32]
 8004c24:	ec41 0b17 	vmov	d7, r0, r1
 8004c28:	443c      	add	r4, r7
 8004c2a:	b34a      	cbz	r2, 8004c80 <_dtoa_r+0x528>
 8004c2c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8004c30:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8004c34:	463e      	mov	r6, r7
 8004c36:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8004c3a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8004c3e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004c42:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004c46:	ee14 2a90 	vmov	r2, s9
 8004c4a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004c4e:	3230      	adds	r2, #48	@ 0x30
 8004c50:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004c54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5c:	f806 2b01 	strb.w	r2, [r6], #1
 8004c60:	d438      	bmi.n	8004cd4 <_dtoa_r+0x57c>
 8004c62:	ee32 5b46 	vsub.f64	d5, d2, d6
 8004c66:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8004c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6e:	d462      	bmi.n	8004d36 <_dtoa_r+0x5de>
 8004c70:	42a6      	cmp	r6, r4
 8004c72:	f43f af4d 	beq.w	8004b10 <_dtoa_r+0x3b8>
 8004c76:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004c7a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004c7e:	e7e0      	b.n	8004c42 <_dtoa_r+0x4ea>
 8004c80:	4621      	mov	r1, r4
 8004c82:	463e      	mov	r6, r7
 8004c84:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004c88:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8004c8c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004c90:	ee14 2a90 	vmov	r2, s9
 8004c94:	3230      	adds	r2, #48	@ 0x30
 8004c96:	f806 2b01 	strb.w	r2, [r6], #1
 8004c9a:	42a6      	cmp	r6, r4
 8004c9c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004ca0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004ca4:	d119      	bne.n	8004cda <_dtoa_r+0x582>
 8004ca6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8004caa:	ee37 4b05 	vadd.f64	d4, d7, d5
 8004cae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8004cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb6:	dc3e      	bgt.n	8004d36 <_dtoa_r+0x5de>
 8004cb8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004cbc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8004cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc4:	f57f af24 	bpl.w	8004b10 <_dtoa_r+0x3b8>
 8004cc8:	460e      	mov	r6, r1
 8004cca:	3901      	subs	r1, #1
 8004ccc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004cd0:	2b30      	cmp	r3, #48	@ 0x30
 8004cd2:	d0f9      	beq.n	8004cc8 <_dtoa_r+0x570>
 8004cd4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004cd8:	e758      	b.n	8004b8c <_dtoa_r+0x434>
 8004cda:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004cde:	e7d5      	b.n	8004c8c <_dtoa_r+0x534>
 8004ce0:	d10b      	bne.n	8004cfa <_dtoa_r+0x5a2>
 8004ce2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8004ce6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004cea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004cee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf6:	f2c0 8161 	blt.w	8004fbc <_dtoa_r+0x864>
 8004cfa:	2400      	movs	r4, #0
 8004cfc:	4625      	mov	r5, r4
 8004cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d00:	43db      	mvns	r3, r3
 8004d02:	9304      	str	r3, [sp, #16]
 8004d04:	463e      	mov	r6, r7
 8004d06:	f04f 0800 	mov.w	r8, #0
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	4648      	mov	r0, r9
 8004d0e:	f000 fbb9 	bl	8005484 <_Bfree>
 8004d12:	2d00      	cmp	r5, #0
 8004d14:	d0de      	beq.n	8004cd4 <_dtoa_r+0x57c>
 8004d16:	f1b8 0f00 	cmp.w	r8, #0
 8004d1a:	d005      	beq.n	8004d28 <_dtoa_r+0x5d0>
 8004d1c:	45a8      	cmp	r8, r5
 8004d1e:	d003      	beq.n	8004d28 <_dtoa_r+0x5d0>
 8004d20:	4641      	mov	r1, r8
 8004d22:	4648      	mov	r0, r9
 8004d24:	f000 fbae 	bl	8005484 <_Bfree>
 8004d28:	4629      	mov	r1, r5
 8004d2a:	4648      	mov	r0, r9
 8004d2c:	f000 fbaa 	bl	8005484 <_Bfree>
 8004d30:	e7d0      	b.n	8004cd4 <_dtoa_r+0x57c>
 8004d32:	f8cd 8010 	str.w	r8, [sp, #16]
 8004d36:	4633      	mov	r3, r6
 8004d38:	461e      	mov	r6, r3
 8004d3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d3e:	2a39      	cmp	r2, #57	@ 0x39
 8004d40:	d106      	bne.n	8004d50 <_dtoa_r+0x5f8>
 8004d42:	429f      	cmp	r7, r3
 8004d44:	d1f8      	bne.n	8004d38 <_dtoa_r+0x5e0>
 8004d46:	9a04      	ldr	r2, [sp, #16]
 8004d48:	3201      	adds	r2, #1
 8004d4a:	9204      	str	r2, [sp, #16]
 8004d4c:	2230      	movs	r2, #48	@ 0x30
 8004d4e:	703a      	strb	r2, [r7, #0]
 8004d50:	781a      	ldrb	r2, [r3, #0]
 8004d52:	3201      	adds	r2, #1
 8004d54:	701a      	strb	r2, [r3, #0]
 8004d56:	e7bd      	b.n	8004cd4 <_dtoa_r+0x57c>
 8004d58:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004d5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d64:	f47f aeef 	bne.w	8004b46 <_dtoa_r+0x3ee>
 8004d68:	e710      	b.n	8004b8c <_dtoa_r+0x434>
 8004d6a:	bf00      	nop
 8004d6c:	080067a8 	.word	0x080067a8
 8004d70:	08006780 	.word	0x08006780
 8004d74:	9908      	ldr	r1, [sp, #32]
 8004d76:	2900      	cmp	r1, #0
 8004d78:	f000 80e3 	beq.w	8004f42 <_dtoa_r+0x7ea>
 8004d7c:	9907      	ldr	r1, [sp, #28]
 8004d7e:	2901      	cmp	r1, #1
 8004d80:	f300 80c8 	bgt.w	8004f14 <_dtoa_r+0x7bc>
 8004d84:	2d00      	cmp	r5, #0
 8004d86:	f000 80c1 	beq.w	8004f0c <_dtoa_r+0x7b4>
 8004d8a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004d8e:	9e05      	ldr	r6, [sp, #20]
 8004d90:	461c      	mov	r4, r3
 8004d92:	9304      	str	r3, [sp, #16]
 8004d94:	9b05      	ldr	r3, [sp, #20]
 8004d96:	4413      	add	r3, r2
 8004d98:	9305      	str	r3, [sp, #20]
 8004d9a:	9b06      	ldr	r3, [sp, #24]
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	4413      	add	r3, r2
 8004da0:	4648      	mov	r0, r9
 8004da2:	9306      	str	r3, [sp, #24]
 8004da4:	f000 fc22 	bl	80055ec <__i2b>
 8004da8:	9b04      	ldr	r3, [sp, #16]
 8004daa:	4605      	mov	r5, r0
 8004dac:	b166      	cbz	r6, 8004dc8 <_dtoa_r+0x670>
 8004dae:	9a06      	ldr	r2, [sp, #24]
 8004db0:	2a00      	cmp	r2, #0
 8004db2:	dd09      	ble.n	8004dc8 <_dtoa_r+0x670>
 8004db4:	42b2      	cmp	r2, r6
 8004db6:	9905      	ldr	r1, [sp, #20]
 8004db8:	bfa8      	it	ge
 8004dba:	4632      	movge	r2, r6
 8004dbc:	1a89      	subs	r1, r1, r2
 8004dbe:	9105      	str	r1, [sp, #20]
 8004dc0:	9906      	ldr	r1, [sp, #24]
 8004dc2:	1ab6      	subs	r6, r6, r2
 8004dc4:	1a8a      	subs	r2, r1, r2
 8004dc6:	9206      	str	r2, [sp, #24]
 8004dc8:	b1fb      	cbz	r3, 8004e0a <_dtoa_r+0x6b2>
 8004dca:	9a08      	ldr	r2, [sp, #32]
 8004dcc:	2a00      	cmp	r2, #0
 8004dce:	f000 80bc 	beq.w	8004f4a <_dtoa_r+0x7f2>
 8004dd2:	b19c      	cbz	r4, 8004dfc <_dtoa_r+0x6a4>
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	4622      	mov	r2, r4
 8004dd8:	4648      	mov	r0, r9
 8004dda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ddc:	f000 fcc6 	bl	800576c <__pow5mult>
 8004de0:	9a01      	ldr	r2, [sp, #4]
 8004de2:	4601      	mov	r1, r0
 8004de4:	4605      	mov	r5, r0
 8004de6:	4648      	mov	r0, r9
 8004de8:	f000 fc16 	bl	8005618 <__multiply>
 8004dec:	9901      	ldr	r1, [sp, #4]
 8004dee:	9004      	str	r0, [sp, #16]
 8004df0:	4648      	mov	r0, r9
 8004df2:	f000 fb47 	bl	8005484 <_Bfree>
 8004df6:	9a04      	ldr	r2, [sp, #16]
 8004df8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004dfa:	9201      	str	r2, [sp, #4]
 8004dfc:	1b1a      	subs	r2, r3, r4
 8004dfe:	d004      	beq.n	8004e0a <_dtoa_r+0x6b2>
 8004e00:	9901      	ldr	r1, [sp, #4]
 8004e02:	4648      	mov	r0, r9
 8004e04:	f000 fcb2 	bl	800576c <__pow5mult>
 8004e08:	9001      	str	r0, [sp, #4]
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	4648      	mov	r0, r9
 8004e0e:	f000 fbed 	bl	80055ec <__i2b>
 8004e12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e14:	4604      	mov	r4, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 81d0 	beq.w	80051bc <_dtoa_r+0xa64>
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4601      	mov	r1, r0
 8004e20:	4648      	mov	r0, r9
 8004e22:	f000 fca3 	bl	800576c <__pow5mult>
 8004e26:	9b07      	ldr	r3, [sp, #28]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	f300 8095 	bgt.w	8004f5a <_dtoa_r+0x802>
 8004e30:	9b02      	ldr	r3, [sp, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f040 808b 	bne.w	8004f4e <_dtoa_r+0x7f6>
 8004e38:	9b03      	ldr	r3, [sp, #12]
 8004e3a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8004e3e:	2a00      	cmp	r2, #0
 8004e40:	f040 8087 	bne.w	8004f52 <_dtoa_r+0x7fa>
 8004e44:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004e48:	0d12      	lsrs	r2, r2, #20
 8004e4a:	0512      	lsls	r2, r2, #20
 8004e4c:	2a00      	cmp	r2, #0
 8004e4e:	f000 8082 	beq.w	8004f56 <_dtoa_r+0x7fe>
 8004e52:	9b05      	ldr	r3, [sp, #20]
 8004e54:	3301      	adds	r3, #1
 8004e56:	9305      	str	r3, [sp, #20]
 8004e58:	9b06      	ldr	r3, [sp, #24]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	9306      	str	r3, [sp, #24]
 8004e5e:	2301      	movs	r3, #1
 8004e60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 81af 	beq.w	80051c8 <_dtoa_r+0xa70>
 8004e6a:	6922      	ldr	r2, [r4, #16]
 8004e6c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004e70:	6910      	ldr	r0, [r2, #16]
 8004e72:	f000 fb6f 	bl	8005554 <__hi0bits>
 8004e76:	f1c0 0020 	rsb	r0, r0, #32
 8004e7a:	9b06      	ldr	r3, [sp, #24]
 8004e7c:	4418      	add	r0, r3
 8004e7e:	f010 001f 	ands.w	r0, r0, #31
 8004e82:	d076      	beq.n	8004f72 <_dtoa_r+0x81a>
 8004e84:	f1c0 0220 	rsb	r2, r0, #32
 8004e88:	2a04      	cmp	r2, #4
 8004e8a:	dd69      	ble.n	8004f60 <_dtoa_r+0x808>
 8004e8c:	9b05      	ldr	r3, [sp, #20]
 8004e8e:	f1c0 001c 	rsb	r0, r0, #28
 8004e92:	4403      	add	r3, r0
 8004e94:	9305      	str	r3, [sp, #20]
 8004e96:	9b06      	ldr	r3, [sp, #24]
 8004e98:	4406      	add	r6, r0
 8004e9a:	4403      	add	r3, r0
 8004e9c:	9306      	str	r3, [sp, #24]
 8004e9e:	9b05      	ldr	r3, [sp, #20]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	dd05      	ble.n	8004eb0 <_dtoa_r+0x758>
 8004ea4:	9901      	ldr	r1, [sp, #4]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	4648      	mov	r0, r9
 8004eaa:	f000 fcb9 	bl	8005820 <__lshift>
 8004eae:	9001      	str	r0, [sp, #4]
 8004eb0:	9b06      	ldr	r3, [sp, #24]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	dd05      	ble.n	8004ec2 <_dtoa_r+0x76a>
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4648      	mov	r0, r9
 8004ebc:	f000 fcb0 	bl	8005820 <__lshift>
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d056      	beq.n	8004f76 <_dtoa_r+0x81e>
 8004ec8:	9801      	ldr	r0, [sp, #4]
 8004eca:	4621      	mov	r1, r4
 8004ecc:	f000 fd14 	bl	80058f8 <__mcmp>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	da50      	bge.n	8004f76 <_dtoa_r+0x81e>
 8004ed4:	f108 33ff 	add.w	r3, r8, #4294967295
 8004ed8:	9304      	str	r3, [sp, #16]
 8004eda:	9901      	ldr	r1, [sp, #4]
 8004edc:	2300      	movs	r3, #0
 8004ede:	220a      	movs	r2, #10
 8004ee0:	4648      	mov	r0, r9
 8004ee2:	f000 faf1 	bl	80054c8 <__multadd>
 8004ee6:	9b08      	ldr	r3, [sp, #32]
 8004ee8:	9001      	str	r0, [sp, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 816e 	beq.w	80051cc <_dtoa_r+0xa74>
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	220a      	movs	r2, #10
 8004ef6:	4648      	mov	r0, r9
 8004ef8:	f000 fae6 	bl	80054c8 <__multadd>
 8004efc:	f1bb 0f00 	cmp.w	fp, #0
 8004f00:	4605      	mov	r5, r0
 8004f02:	dc64      	bgt.n	8004fce <_dtoa_r+0x876>
 8004f04:	9b07      	ldr	r3, [sp, #28]
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	dc3e      	bgt.n	8004f88 <_dtoa_r+0x830>
 8004f0a:	e060      	b.n	8004fce <_dtoa_r+0x876>
 8004f0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f0e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004f12:	e73c      	b.n	8004d8e <_dtoa_r+0x636>
 8004f14:	f10a 34ff 	add.w	r4, sl, #4294967295
 8004f18:	42a3      	cmp	r3, r4
 8004f1a:	bfbf      	itttt	lt
 8004f1c:	1ae2      	sublt	r2, r4, r3
 8004f1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004f20:	189b      	addlt	r3, r3, r2
 8004f22:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8004f24:	bfae      	itee	ge
 8004f26:	1b1c      	subge	r4, r3, r4
 8004f28:	4623      	movlt	r3, r4
 8004f2a:	2400      	movlt	r4, #0
 8004f2c:	f1ba 0f00 	cmp.w	sl, #0
 8004f30:	bfb5      	itete	lt
 8004f32:	9a05      	ldrlt	r2, [sp, #20]
 8004f34:	9e05      	ldrge	r6, [sp, #20]
 8004f36:	eba2 060a 	sublt.w	r6, r2, sl
 8004f3a:	4652      	movge	r2, sl
 8004f3c:	bfb8      	it	lt
 8004f3e:	2200      	movlt	r2, #0
 8004f40:	e727      	b.n	8004d92 <_dtoa_r+0x63a>
 8004f42:	9e05      	ldr	r6, [sp, #20]
 8004f44:	9d08      	ldr	r5, [sp, #32]
 8004f46:	461c      	mov	r4, r3
 8004f48:	e730      	b.n	8004dac <_dtoa_r+0x654>
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	e758      	b.n	8004e00 <_dtoa_r+0x6a8>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e786      	b.n	8004e60 <_dtoa_r+0x708>
 8004f52:	9b02      	ldr	r3, [sp, #8]
 8004f54:	e784      	b.n	8004e60 <_dtoa_r+0x708>
 8004f56:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004f58:	e783      	b.n	8004e62 <_dtoa_r+0x70a>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f5e:	e784      	b.n	8004e6a <_dtoa_r+0x712>
 8004f60:	d09d      	beq.n	8004e9e <_dtoa_r+0x746>
 8004f62:	9b05      	ldr	r3, [sp, #20]
 8004f64:	321c      	adds	r2, #28
 8004f66:	4413      	add	r3, r2
 8004f68:	9305      	str	r3, [sp, #20]
 8004f6a:	9b06      	ldr	r3, [sp, #24]
 8004f6c:	4416      	add	r6, r2
 8004f6e:	4413      	add	r3, r2
 8004f70:	e794      	b.n	8004e9c <_dtoa_r+0x744>
 8004f72:	4602      	mov	r2, r0
 8004f74:	e7f5      	b.n	8004f62 <_dtoa_r+0x80a>
 8004f76:	f1ba 0f00 	cmp.w	sl, #0
 8004f7a:	f8cd 8010 	str.w	r8, [sp, #16]
 8004f7e:	46d3      	mov	fp, sl
 8004f80:	dc21      	bgt.n	8004fc6 <_dtoa_r+0x86e>
 8004f82:	9b07      	ldr	r3, [sp, #28]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	dd1e      	ble.n	8004fc6 <_dtoa_r+0x86e>
 8004f88:	f1bb 0f00 	cmp.w	fp, #0
 8004f8c:	f47f aeb7 	bne.w	8004cfe <_dtoa_r+0x5a6>
 8004f90:	4621      	mov	r1, r4
 8004f92:	465b      	mov	r3, fp
 8004f94:	2205      	movs	r2, #5
 8004f96:	4648      	mov	r0, r9
 8004f98:	f000 fa96 	bl	80054c8 <__multadd>
 8004f9c:	4601      	mov	r1, r0
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	9801      	ldr	r0, [sp, #4]
 8004fa2:	f000 fca9 	bl	80058f8 <__mcmp>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	f77f aea9 	ble.w	8004cfe <_dtoa_r+0x5a6>
 8004fac:	463e      	mov	r6, r7
 8004fae:	2331      	movs	r3, #49	@ 0x31
 8004fb0:	f806 3b01 	strb.w	r3, [r6], #1
 8004fb4:	9b04      	ldr	r3, [sp, #16]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	9304      	str	r3, [sp, #16]
 8004fba:	e6a4      	b.n	8004d06 <_dtoa_r+0x5ae>
 8004fbc:	f8cd 8010 	str.w	r8, [sp, #16]
 8004fc0:	4654      	mov	r4, sl
 8004fc2:	4625      	mov	r5, r4
 8004fc4:	e7f2      	b.n	8004fac <_dtoa_r+0x854>
 8004fc6:	9b08      	ldr	r3, [sp, #32]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8103 	beq.w	80051d4 <_dtoa_r+0xa7c>
 8004fce:	2e00      	cmp	r6, #0
 8004fd0:	dd05      	ble.n	8004fde <_dtoa_r+0x886>
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	4632      	mov	r2, r6
 8004fd6:	4648      	mov	r0, r9
 8004fd8:	f000 fc22 	bl	8005820 <__lshift>
 8004fdc:	4605      	mov	r5, r0
 8004fde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d058      	beq.n	8005096 <_dtoa_r+0x93e>
 8004fe4:	6869      	ldr	r1, [r5, #4]
 8004fe6:	4648      	mov	r0, r9
 8004fe8:	f000 fa0c 	bl	8005404 <_Balloc>
 8004fec:	4606      	mov	r6, r0
 8004fee:	b928      	cbnz	r0, 8004ffc <_dtoa_r+0x8a4>
 8004ff0:	4b82      	ldr	r3, [pc, #520]	@ (80051fc <_dtoa_r+0xaa4>)
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004ff8:	f7ff bbc7 	b.w	800478a <_dtoa_r+0x32>
 8004ffc:	692a      	ldr	r2, [r5, #16]
 8004ffe:	3202      	adds	r2, #2
 8005000:	0092      	lsls	r2, r2, #2
 8005002:	f105 010c 	add.w	r1, r5, #12
 8005006:	300c      	adds	r0, #12
 8005008:	f000 ffac 	bl	8005f64 <memcpy>
 800500c:	2201      	movs	r2, #1
 800500e:	4631      	mov	r1, r6
 8005010:	4648      	mov	r0, r9
 8005012:	f000 fc05 	bl	8005820 <__lshift>
 8005016:	1c7b      	adds	r3, r7, #1
 8005018:	9305      	str	r3, [sp, #20]
 800501a:	eb07 030b 	add.w	r3, r7, fp
 800501e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005020:	9b02      	ldr	r3, [sp, #8]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	46a8      	mov	r8, r5
 8005028:	9308      	str	r3, [sp, #32]
 800502a:	4605      	mov	r5, r0
 800502c:	9b05      	ldr	r3, [sp, #20]
 800502e:	9801      	ldr	r0, [sp, #4]
 8005030:	4621      	mov	r1, r4
 8005032:	f103 3bff 	add.w	fp, r3, #4294967295
 8005036:	f7ff fb04 	bl	8004642 <quorem>
 800503a:	4641      	mov	r1, r8
 800503c:	9002      	str	r0, [sp, #8]
 800503e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8005042:	9801      	ldr	r0, [sp, #4]
 8005044:	f000 fc58 	bl	80058f8 <__mcmp>
 8005048:	462a      	mov	r2, r5
 800504a:	9006      	str	r0, [sp, #24]
 800504c:	4621      	mov	r1, r4
 800504e:	4648      	mov	r0, r9
 8005050:	f000 fc6e 	bl	8005930 <__mdiff>
 8005054:	68c2      	ldr	r2, [r0, #12]
 8005056:	4606      	mov	r6, r0
 8005058:	b9fa      	cbnz	r2, 800509a <_dtoa_r+0x942>
 800505a:	4601      	mov	r1, r0
 800505c:	9801      	ldr	r0, [sp, #4]
 800505e:	f000 fc4b 	bl	80058f8 <__mcmp>
 8005062:	4602      	mov	r2, r0
 8005064:	4631      	mov	r1, r6
 8005066:	4648      	mov	r0, r9
 8005068:	920a      	str	r2, [sp, #40]	@ 0x28
 800506a:	f000 fa0b 	bl	8005484 <_Bfree>
 800506e:	9b07      	ldr	r3, [sp, #28]
 8005070:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005072:	9e05      	ldr	r6, [sp, #20]
 8005074:	ea43 0102 	orr.w	r1, r3, r2
 8005078:	9b08      	ldr	r3, [sp, #32]
 800507a:	4319      	orrs	r1, r3
 800507c:	d10f      	bne.n	800509e <_dtoa_r+0x946>
 800507e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005082:	d028      	beq.n	80050d6 <_dtoa_r+0x97e>
 8005084:	9b06      	ldr	r3, [sp, #24]
 8005086:	2b00      	cmp	r3, #0
 8005088:	dd02      	ble.n	8005090 <_dtoa_r+0x938>
 800508a:	9b02      	ldr	r3, [sp, #8]
 800508c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8005090:	f88b a000 	strb.w	sl, [fp]
 8005094:	e639      	b.n	8004d0a <_dtoa_r+0x5b2>
 8005096:	4628      	mov	r0, r5
 8005098:	e7bd      	b.n	8005016 <_dtoa_r+0x8be>
 800509a:	2201      	movs	r2, #1
 800509c:	e7e2      	b.n	8005064 <_dtoa_r+0x90c>
 800509e:	9b06      	ldr	r3, [sp, #24]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	db04      	blt.n	80050ae <_dtoa_r+0x956>
 80050a4:	9907      	ldr	r1, [sp, #28]
 80050a6:	430b      	orrs	r3, r1
 80050a8:	9908      	ldr	r1, [sp, #32]
 80050aa:	430b      	orrs	r3, r1
 80050ac:	d120      	bne.n	80050f0 <_dtoa_r+0x998>
 80050ae:	2a00      	cmp	r2, #0
 80050b0:	ddee      	ble.n	8005090 <_dtoa_r+0x938>
 80050b2:	9901      	ldr	r1, [sp, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	4648      	mov	r0, r9
 80050b8:	f000 fbb2 	bl	8005820 <__lshift>
 80050bc:	4621      	mov	r1, r4
 80050be:	9001      	str	r0, [sp, #4]
 80050c0:	f000 fc1a 	bl	80058f8 <__mcmp>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	dc03      	bgt.n	80050d0 <_dtoa_r+0x978>
 80050c8:	d1e2      	bne.n	8005090 <_dtoa_r+0x938>
 80050ca:	f01a 0f01 	tst.w	sl, #1
 80050ce:	d0df      	beq.n	8005090 <_dtoa_r+0x938>
 80050d0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80050d4:	d1d9      	bne.n	800508a <_dtoa_r+0x932>
 80050d6:	2339      	movs	r3, #57	@ 0x39
 80050d8:	f88b 3000 	strb.w	r3, [fp]
 80050dc:	4633      	mov	r3, r6
 80050de:	461e      	mov	r6, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80050e6:	2a39      	cmp	r2, #57	@ 0x39
 80050e8:	d053      	beq.n	8005192 <_dtoa_r+0xa3a>
 80050ea:	3201      	adds	r2, #1
 80050ec:	701a      	strb	r2, [r3, #0]
 80050ee:	e60c      	b.n	8004d0a <_dtoa_r+0x5b2>
 80050f0:	2a00      	cmp	r2, #0
 80050f2:	dd07      	ble.n	8005104 <_dtoa_r+0x9ac>
 80050f4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80050f8:	d0ed      	beq.n	80050d6 <_dtoa_r+0x97e>
 80050fa:	f10a 0301 	add.w	r3, sl, #1
 80050fe:	f88b 3000 	strb.w	r3, [fp]
 8005102:	e602      	b.n	8004d0a <_dtoa_r+0x5b2>
 8005104:	9b05      	ldr	r3, [sp, #20]
 8005106:	9a05      	ldr	r2, [sp, #20]
 8005108:	f803 ac01 	strb.w	sl, [r3, #-1]
 800510c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800510e:	4293      	cmp	r3, r2
 8005110:	d029      	beq.n	8005166 <_dtoa_r+0xa0e>
 8005112:	9901      	ldr	r1, [sp, #4]
 8005114:	2300      	movs	r3, #0
 8005116:	220a      	movs	r2, #10
 8005118:	4648      	mov	r0, r9
 800511a:	f000 f9d5 	bl	80054c8 <__multadd>
 800511e:	45a8      	cmp	r8, r5
 8005120:	9001      	str	r0, [sp, #4]
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	f04f 020a 	mov.w	r2, #10
 800512a:	4641      	mov	r1, r8
 800512c:	4648      	mov	r0, r9
 800512e:	d107      	bne.n	8005140 <_dtoa_r+0x9e8>
 8005130:	f000 f9ca 	bl	80054c8 <__multadd>
 8005134:	4680      	mov	r8, r0
 8005136:	4605      	mov	r5, r0
 8005138:	9b05      	ldr	r3, [sp, #20]
 800513a:	3301      	adds	r3, #1
 800513c:	9305      	str	r3, [sp, #20]
 800513e:	e775      	b.n	800502c <_dtoa_r+0x8d4>
 8005140:	f000 f9c2 	bl	80054c8 <__multadd>
 8005144:	4629      	mov	r1, r5
 8005146:	4680      	mov	r8, r0
 8005148:	2300      	movs	r3, #0
 800514a:	220a      	movs	r2, #10
 800514c:	4648      	mov	r0, r9
 800514e:	f000 f9bb 	bl	80054c8 <__multadd>
 8005152:	4605      	mov	r5, r0
 8005154:	e7f0      	b.n	8005138 <_dtoa_r+0x9e0>
 8005156:	f1bb 0f00 	cmp.w	fp, #0
 800515a:	bfcc      	ite	gt
 800515c:	465e      	movgt	r6, fp
 800515e:	2601      	movle	r6, #1
 8005160:	443e      	add	r6, r7
 8005162:	f04f 0800 	mov.w	r8, #0
 8005166:	9901      	ldr	r1, [sp, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	4648      	mov	r0, r9
 800516c:	f000 fb58 	bl	8005820 <__lshift>
 8005170:	4621      	mov	r1, r4
 8005172:	9001      	str	r0, [sp, #4]
 8005174:	f000 fbc0 	bl	80058f8 <__mcmp>
 8005178:	2800      	cmp	r0, #0
 800517a:	dcaf      	bgt.n	80050dc <_dtoa_r+0x984>
 800517c:	d102      	bne.n	8005184 <_dtoa_r+0xa2c>
 800517e:	f01a 0f01 	tst.w	sl, #1
 8005182:	d1ab      	bne.n	80050dc <_dtoa_r+0x984>
 8005184:	4633      	mov	r3, r6
 8005186:	461e      	mov	r6, r3
 8005188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800518c:	2a30      	cmp	r2, #48	@ 0x30
 800518e:	d0fa      	beq.n	8005186 <_dtoa_r+0xa2e>
 8005190:	e5bb      	b.n	8004d0a <_dtoa_r+0x5b2>
 8005192:	429f      	cmp	r7, r3
 8005194:	d1a3      	bne.n	80050de <_dtoa_r+0x986>
 8005196:	9b04      	ldr	r3, [sp, #16]
 8005198:	3301      	adds	r3, #1
 800519a:	9304      	str	r3, [sp, #16]
 800519c:	2331      	movs	r3, #49	@ 0x31
 800519e:	703b      	strb	r3, [r7, #0]
 80051a0:	e5b3      	b.n	8004d0a <_dtoa_r+0x5b2>
 80051a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80051a4:	4f16      	ldr	r7, [pc, #88]	@ (8005200 <_dtoa_r+0xaa8>)
 80051a6:	b11b      	cbz	r3, 80051b0 <_dtoa_r+0xa58>
 80051a8:	f107 0308 	add.w	r3, r7, #8
 80051ac:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	4638      	mov	r0, r7
 80051b2:	b011      	add	sp, #68	@ 0x44
 80051b4:	ecbd 8b02 	vpop	{d8}
 80051b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051bc:	9b07      	ldr	r3, [sp, #28]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	f77f ae36 	ble.w	8004e30 <_dtoa_r+0x6d8>
 80051c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051c8:	2001      	movs	r0, #1
 80051ca:	e656      	b.n	8004e7a <_dtoa_r+0x722>
 80051cc:	f1bb 0f00 	cmp.w	fp, #0
 80051d0:	f77f aed7 	ble.w	8004f82 <_dtoa_r+0x82a>
 80051d4:	463e      	mov	r6, r7
 80051d6:	9801      	ldr	r0, [sp, #4]
 80051d8:	4621      	mov	r1, r4
 80051da:	f7ff fa32 	bl	8004642 <quorem>
 80051de:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80051e2:	f806 ab01 	strb.w	sl, [r6], #1
 80051e6:	1bf2      	subs	r2, r6, r7
 80051e8:	4593      	cmp	fp, r2
 80051ea:	ddb4      	ble.n	8005156 <_dtoa_r+0x9fe>
 80051ec:	9901      	ldr	r1, [sp, #4]
 80051ee:	2300      	movs	r3, #0
 80051f0:	220a      	movs	r2, #10
 80051f2:	4648      	mov	r0, r9
 80051f4:	f000 f968 	bl	80054c8 <__multadd>
 80051f8:	9001      	str	r0, [sp, #4]
 80051fa:	e7ec      	b.n	80051d6 <_dtoa_r+0xa7e>
 80051fc:	08006704 	.word	0x08006704
 8005200:	08006688 	.word	0x08006688

08005204 <_free_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	4605      	mov	r5, r0
 8005208:	2900      	cmp	r1, #0
 800520a:	d041      	beq.n	8005290 <_free_r+0x8c>
 800520c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005210:	1f0c      	subs	r4, r1, #4
 8005212:	2b00      	cmp	r3, #0
 8005214:	bfb8      	it	lt
 8005216:	18e4      	addlt	r4, r4, r3
 8005218:	f000 f8e8 	bl	80053ec <__malloc_lock>
 800521c:	4a1d      	ldr	r2, [pc, #116]	@ (8005294 <_free_r+0x90>)
 800521e:	6813      	ldr	r3, [r2, #0]
 8005220:	b933      	cbnz	r3, 8005230 <_free_r+0x2c>
 8005222:	6063      	str	r3, [r4, #4]
 8005224:	6014      	str	r4, [r2, #0]
 8005226:	4628      	mov	r0, r5
 8005228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800522c:	f000 b8e4 	b.w	80053f8 <__malloc_unlock>
 8005230:	42a3      	cmp	r3, r4
 8005232:	d908      	bls.n	8005246 <_free_r+0x42>
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	1821      	adds	r1, r4, r0
 8005238:	428b      	cmp	r3, r1
 800523a:	bf01      	itttt	eq
 800523c:	6819      	ldreq	r1, [r3, #0]
 800523e:	685b      	ldreq	r3, [r3, #4]
 8005240:	1809      	addeq	r1, r1, r0
 8005242:	6021      	streq	r1, [r4, #0]
 8005244:	e7ed      	b.n	8005222 <_free_r+0x1e>
 8005246:	461a      	mov	r2, r3
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	b10b      	cbz	r3, 8005250 <_free_r+0x4c>
 800524c:	42a3      	cmp	r3, r4
 800524e:	d9fa      	bls.n	8005246 <_free_r+0x42>
 8005250:	6811      	ldr	r1, [r2, #0]
 8005252:	1850      	adds	r0, r2, r1
 8005254:	42a0      	cmp	r0, r4
 8005256:	d10b      	bne.n	8005270 <_free_r+0x6c>
 8005258:	6820      	ldr	r0, [r4, #0]
 800525a:	4401      	add	r1, r0
 800525c:	1850      	adds	r0, r2, r1
 800525e:	4283      	cmp	r3, r0
 8005260:	6011      	str	r1, [r2, #0]
 8005262:	d1e0      	bne.n	8005226 <_free_r+0x22>
 8005264:	6818      	ldr	r0, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	6053      	str	r3, [r2, #4]
 800526a:	4408      	add	r0, r1
 800526c:	6010      	str	r0, [r2, #0]
 800526e:	e7da      	b.n	8005226 <_free_r+0x22>
 8005270:	d902      	bls.n	8005278 <_free_r+0x74>
 8005272:	230c      	movs	r3, #12
 8005274:	602b      	str	r3, [r5, #0]
 8005276:	e7d6      	b.n	8005226 <_free_r+0x22>
 8005278:	6820      	ldr	r0, [r4, #0]
 800527a:	1821      	adds	r1, r4, r0
 800527c:	428b      	cmp	r3, r1
 800527e:	bf04      	itt	eq
 8005280:	6819      	ldreq	r1, [r3, #0]
 8005282:	685b      	ldreq	r3, [r3, #4]
 8005284:	6063      	str	r3, [r4, #4]
 8005286:	bf04      	itt	eq
 8005288:	1809      	addeq	r1, r1, r0
 800528a:	6021      	streq	r1, [r4, #0]
 800528c:	6054      	str	r4, [r2, #4]
 800528e:	e7ca      	b.n	8005226 <_free_r+0x22>
 8005290:	bd38      	pop	{r3, r4, r5, pc}
 8005292:	bf00      	nop
 8005294:	20000490 	.word	0x20000490

08005298 <malloc>:
 8005298:	4b02      	ldr	r3, [pc, #8]	@ (80052a4 <malloc+0xc>)
 800529a:	4601      	mov	r1, r0
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	f000 b825 	b.w	80052ec <_malloc_r>
 80052a2:	bf00      	nop
 80052a4:	20000018 	.word	0x20000018

080052a8 <sbrk_aligned>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	4e0f      	ldr	r6, [pc, #60]	@ (80052e8 <sbrk_aligned+0x40>)
 80052ac:	460c      	mov	r4, r1
 80052ae:	6831      	ldr	r1, [r6, #0]
 80052b0:	4605      	mov	r5, r0
 80052b2:	b911      	cbnz	r1, 80052ba <sbrk_aligned+0x12>
 80052b4:	f000 fe46 	bl	8005f44 <_sbrk_r>
 80052b8:	6030      	str	r0, [r6, #0]
 80052ba:	4621      	mov	r1, r4
 80052bc:	4628      	mov	r0, r5
 80052be:	f000 fe41 	bl	8005f44 <_sbrk_r>
 80052c2:	1c43      	adds	r3, r0, #1
 80052c4:	d103      	bne.n	80052ce <sbrk_aligned+0x26>
 80052c6:	f04f 34ff 	mov.w	r4, #4294967295
 80052ca:	4620      	mov	r0, r4
 80052cc:	bd70      	pop	{r4, r5, r6, pc}
 80052ce:	1cc4      	adds	r4, r0, #3
 80052d0:	f024 0403 	bic.w	r4, r4, #3
 80052d4:	42a0      	cmp	r0, r4
 80052d6:	d0f8      	beq.n	80052ca <sbrk_aligned+0x22>
 80052d8:	1a21      	subs	r1, r4, r0
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 fe32 	bl	8005f44 <_sbrk_r>
 80052e0:	3001      	adds	r0, #1
 80052e2:	d1f2      	bne.n	80052ca <sbrk_aligned+0x22>
 80052e4:	e7ef      	b.n	80052c6 <sbrk_aligned+0x1e>
 80052e6:	bf00      	nop
 80052e8:	2000048c 	.word	0x2000048c

080052ec <_malloc_r>:
 80052ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f0:	1ccd      	adds	r5, r1, #3
 80052f2:	f025 0503 	bic.w	r5, r5, #3
 80052f6:	3508      	adds	r5, #8
 80052f8:	2d0c      	cmp	r5, #12
 80052fa:	bf38      	it	cc
 80052fc:	250c      	movcc	r5, #12
 80052fe:	2d00      	cmp	r5, #0
 8005300:	4606      	mov	r6, r0
 8005302:	db01      	blt.n	8005308 <_malloc_r+0x1c>
 8005304:	42a9      	cmp	r1, r5
 8005306:	d904      	bls.n	8005312 <_malloc_r+0x26>
 8005308:	230c      	movs	r3, #12
 800530a:	6033      	str	r3, [r6, #0]
 800530c:	2000      	movs	r0, #0
 800530e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005312:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053e8 <_malloc_r+0xfc>
 8005316:	f000 f869 	bl	80053ec <__malloc_lock>
 800531a:	f8d8 3000 	ldr.w	r3, [r8]
 800531e:	461c      	mov	r4, r3
 8005320:	bb44      	cbnz	r4, 8005374 <_malloc_r+0x88>
 8005322:	4629      	mov	r1, r5
 8005324:	4630      	mov	r0, r6
 8005326:	f7ff ffbf 	bl	80052a8 <sbrk_aligned>
 800532a:	1c43      	adds	r3, r0, #1
 800532c:	4604      	mov	r4, r0
 800532e:	d158      	bne.n	80053e2 <_malloc_r+0xf6>
 8005330:	f8d8 4000 	ldr.w	r4, [r8]
 8005334:	4627      	mov	r7, r4
 8005336:	2f00      	cmp	r7, #0
 8005338:	d143      	bne.n	80053c2 <_malloc_r+0xd6>
 800533a:	2c00      	cmp	r4, #0
 800533c:	d04b      	beq.n	80053d6 <_malloc_r+0xea>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	4639      	mov	r1, r7
 8005342:	4630      	mov	r0, r6
 8005344:	eb04 0903 	add.w	r9, r4, r3
 8005348:	f000 fdfc 	bl	8005f44 <_sbrk_r>
 800534c:	4581      	cmp	r9, r0
 800534e:	d142      	bne.n	80053d6 <_malloc_r+0xea>
 8005350:	6821      	ldr	r1, [r4, #0]
 8005352:	1a6d      	subs	r5, r5, r1
 8005354:	4629      	mov	r1, r5
 8005356:	4630      	mov	r0, r6
 8005358:	f7ff ffa6 	bl	80052a8 <sbrk_aligned>
 800535c:	3001      	adds	r0, #1
 800535e:	d03a      	beq.n	80053d6 <_malloc_r+0xea>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	442b      	add	r3, r5
 8005364:	6023      	str	r3, [r4, #0]
 8005366:	f8d8 3000 	ldr.w	r3, [r8]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	bb62      	cbnz	r2, 80053c8 <_malloc_r+0xdc>
 800536e:	f8c8 7000 	str.w	r7, [r8]
 8005372:	e00f      	b.n	8005394 <_malloc_r+0xa8>
 8005374:	6822      	ldr	r2, [r4, #0]
 8005376:	1b52      	subs	r2, r2, r5
 8005378:	d420      	bmi.n	80053bc <_malloc_r+0xd0>
 800537a:	2a0b      	cmp	r2, #11
 800537c:	d917      	bls.n	80053ae <_malloc_r+0xc2>
 800537e:	1961      	adds	r1, r4, r5
 8005380:	42a3      	cmp	r3, r4
 8005382:	6025      	str	r5, [r4, #0]
 8005384:	bf18      	it	ne
 8005386:	6059      	strne	r1, [r3, #4]
 8005388:	6863      	ldr	r3, [r4, #4]
 800538a:	bf08      	it	eq
 800538c:	f8c8 1000 	streq.w	r1, [r8]
 8005390:	5162      	str	r2, [r4, r5]
 8005392:	604b      	str	r3, [r1, #4]
 8005394:	4630      	mov	r0, r6
 8005396:	f000 f82f 	bl	80053f8 <__malloc_unlock>
 800539a:	f104 000b 	add.w	r0, r4, #11
 800539e:	1d23      	adds	r3, r4, #4
 80053a0:	f020 0007 	bic.w	r0, r0, #7
 80053a4:	1ac2      	subs	r2, r0, r3
 80053a6:	bf1c      	itt	ne
 80053a8:	1a1b      	subne	r3, r3, r0
 80053aa:	50a3      	strne	r3, [r4, r2]
 80053ac:	e7af      	b.n	800530e <_malloc_r+0x22>
 80053ae:	6862      	ldr	r2, [r4, #4]
 80053b0:	42a3      	cmp	r3, r4
 80053b2:	bf0c      	ite	eq
 80053b4:	f8c8 2000 	streq.w	r2, [r8]
 80053b8:	605a      	strne	r2, [r3, #4]
 80053ba:	e7eb      	b.n	8005394 <_malloc_r+0xa8>
 80053bc:	4623      	mov	r3, r4
 80053be:	6864      	ldr	r4, [r4, #4]
 80053c0:	e7ae      	b.n	8005320 <_malloc_r+0x34>
 80053c2:	463c      	mov	r4, r7
 80053c4:	687f      	ldr	r7, [r7, #4]
 80053c6:	e7b6      	b.n	8005336 <_malloc_r+0x4a>
 80053c8:	461a      	mov	r2, r3
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	d1fb      	bne.n	80053c8 <_malloc_r+0xdc>
 80053d0:	2300      	movs	r3, #0
 80053d2:	6053      	str	r3, [r2, #4]
 80053d4:	e7de      	b.n	8005394 <_malloc_r+0xa8>
 80053d6:	230c      	movs	r3, #12
 80053d8:	6033      	str	r3, [r6, #0]
 80053da:	4630      	mov	r0, r6
 80053dc:	f000 f80c 	bl	80053f8 <__malloc_unlock>
 80053e0:	e794      	b.n	800530c <_malloc_r+0x20>
 80053e2:	6005      	str	r5, [r0, #0]
 80053e4:	e7d6      	b.n	8005394 <_malloc_r+0xa8>
 80053e6:	bf00      	nop
 80053e8:	20000490 	.word	0x20000490

080053ec <__malloc_lock>:
 80053ec:	4801      	ldr	r0, [pc, #4]	@ (80053f4 <__malloc_lock+0x8>)
 80053ee:	f7ff b926 	b.w	800463e <__retarget_lock_acquire_recursive>
 80053f2:	bf00      	nop
 80053f4:	20000488 	.word	0x20000488

080053f8 <__malloc_unlock>:
 80053f8:	4801      	ldr	r0, [pc, #4]	@ (8005400 <__malloc_unlock+0x8>)
 80053fa:	f7ff b921 	b.w	8004640 <__retarget_lock_release_recursive>
 80053fe:	bf00      	nop
 8005400:	20000488 	.word	0x20000488

08005404 <_Balloc>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	69c6      	ldr	r6, [r0, #28]
 8005408:	4604      	mov	r4, r0
 800540a:	460d      	mov	r5, r1
 800540c:	b976      	cbnz	r6, 800542c <_Balloc+0x28>
 800540e:	2010      	movs	r0, #16
 8005410:	f7ff ff42 	bl	8005298 <malloc>
 8005414:	4602      	mov	r2, r0
 8005416:	61e0      	str	r0, [r4, #28]
 8005418:	b920      	cbnz	r0, 8005424 <_Balloc+0x20>
 800541a:	4b18      	ldr	r3, [pc, #96]	@ (800547c <_Balloc+0x78>)
 800541c:	4818      	ldr	r0, [pc, #96]	@ (8005480 <_Balloc+0x7c>)
 800541e:	216b      	movs	r1, #107	@ 0x6b
 8005420:	f000 fdae 	bl	8005f80 <__assert_func>
 8005424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005428:	6006      	str	r6, [r0, #0]
 800542a:	60c6      	str	r6, [r0, #12]
 800542c:	69e6      	ldr	r6, [r4, #28]
 800542e:	68f3      	ldr	r3, [r6, #12]
 8005430:	b183      	cbz	r3, 8005454 <_Balloc+0x50>
 8005432:	69e3      	ldr	r3, [r4, #28]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800543a:	b9b8      	cbnz	r0, 800546c <_Balloc+0x68>
 800543c:	2101      	movs	r1, #1
 800543e:	fa01 f605 	lsl.w	r6, r1, r5
 8005442:	1d72      	adds	r2, r6, #5
 8005444:	0092      	lsls	r2, r2, #2
 8005446:	4620      	mov	r0, r4
 8005448:	f000 fdb8 	bl	8005fbc <_calloc_r>
 800544c:	b160      	cbz	r0, 8005468 <_Balloc+0x64>
 800544e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005452:	e00e      	b.n	8005472 <_Balloc+0x6e>
 8005454:	2221      	movs	r2, #33	@ 0x21
 8005456:	2104      	movs	r1, #4
 8005458:	4620      	mov	r0, r4
 800545a:	f000 fdaf 	bl	8005fbc <_calloc_r>
 800545e:	69e3      	ldr	r3, [r4, #28]
 8005460:	60f0      	str	r0, [r6, #12]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e4      	bne.n	8005432 <_Balloc+0x2e>
 8005468:	2000      	movs	r0, #0
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	6802      	ldr	r2, [r0, #0]
 800546e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005472:	2300      	movs	r3, #0
 8005474:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005478:	e7f7      	b.n	800546a <_Balloc+0x66>
 800547a:	bf00      	nop
 800547c:	08006695 	.word	0x08006695
 8005480:	08006715 	.word	0x08006715

08005484 <_Bfree>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	69c6      	ldr	r6, [r0, #28]
 8005488:	4605      	mov	r5, r0
 800548a:	460c      	mov	r4, r1
 800548c:	b976      	cbnz	r6, 80054ac <_Bfree+0x28>
 800548e:	2010      	movs	r0, #16
 8005490:	f7ff ff02 	bl	8005298 <malloc>
 8005494:	4602      	mov	r2, r0
 8005496:	61e8      	str	r0, [r5, #28]
 8005498:	b920      	cbnz	r0, 80054a4 <_Bfree+0x20>
 800549a:	4b09      	ldr	r3, [pc, #36]	@ (80054c0 <_Bfree+0x3c>)
 800549c:	4809      	ldr	r0, [pc, #36]	@ (80054c4 <_Bfree+0x40>)
 800549e:	218f      	movs	r1, #143	@ 0x8f
 80054a0:	f000 fd6e 	bl	8005f80 <__assert_func>
 80054a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054a8:	6006      	str	r6, [r0, #0]
 80054aa:	60c6      	str	r6, [r0, #12]
 80054ac:	b13c      	cbz	r4, 80054be <_Bfree+0x3a>
 80054ae:	69eb      	ldr	r3, [r5, #28]
 80054b0:	6862      	ldr	r2, [r4, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054b8:	6021      	str	r1, [r4, #0]
 80054ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	08006695 	.word	0x08006695
 80054c4:	08006715 	.word	0x08006715

080054c8 <__multadd>:
 80054c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054cc:	690d      	ldr	r5, [r1, #16]
 80054ce:	4607      	mov	r7, r0
 80054d0:	460c      	mov	r4, r1
 80054d2:	461e      	mov	r6, r3
 80054d4:	f101 0c14 	add.w	ip, r1, #20
 80054d8:	2000      	movs	r0, #0
 80054da:	f8dc 3000 	ldr.w	r3, [ip]
 80054de:	b299      	uxth	r1, r3
 80054e0:	fb02 6101 	mla	r1, r2, r1, r6
 80054e4:	0c1e      	lsrs	r6, r3, #16
 80054e6:	0c0b      	lsrs	r3, r1, #16
 80054e8:	fb02 3306 	mla	r3, r2, r6, r3
 80054ec:	b289      	uxth	r1, r1
 80054ee:	3001      	adds	r0, #1
 80054f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80054f4:	4285      	cmp	r5, r0
 80054f6:	f84c 1b04 	str.w	r1, [ip], #4
 80054fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80054fe:	dcec      	bgt.n	80054da <__multadd+0x12>
 8005500:	b30e      	cbz	r6, 8005546 <__multadd+0x7e>
 8005502:	68a3      	ldr	r3, [r4, #8]
 8005504:	42ab      	cmp	r3, r5
 8005506:	dc19      	bgt.n	800553c <__multadd+0x74>
 8005508:	6861      	ldr	r1, [r4, #4]
 800550a:	4638      	mov	r0, r7
 800550c:	3101      	adds	r1, #1
 800550e:	f7ff ff79 	bl	8005404 <_Balloc>
 8005512:	4680      	mov	r8, r0
 8005514:	b928      	cbnz	r0, 8005522 <__multadd+0x5a>
 8005516:	4602      	mov	r2, r0
 8005518:	4b0c      	ldr	r3, [pc, #48]	@ (800554c <__multadd+0x84>)
 800551a:	480d      	ldr	r0, [pc, #52]	@ (8005550 <__multadd+0x88>)
 800551c:	21ba      	movs	r1, #186	@ 0xba
 800551e:	f000 fd2f 	bl	8005f80 <__assert_func>
 8005522:	6922      	ldr	r2, [r4, #16]
 8005524:	3202      	adds	r2, #2
 8005526:	f104 010c 	add.w	r1, r4, #12
 800552a:	0092      	lsls	r2, r2, #2
 800552c:	300c      	adds	r0, #12
 800552e:	f000 fd19 	bl	8005f64 <memcpy>
 8005532:	4621      	mov	r1, r4
 8005534:	4638      	mov	r0, r7
 8005536:	f7ff ffa5 	bl	8005484 <_Bfree>
 800553a:	4644      	mov	r4, r8
 800553c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005540:	3501      	adds	r5, #1
 8005542:	615e      	str	r6, [r3, #20]
 8005544:	6125      	str	r5, [r4, #16]
 8005546:	4620      	mov	r0, r4
 8005548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800554c:	08006704 	.word	0x08006704
 8005550:	08006715 	.word	0x08006715

08005554 <__hi0bits>:
 8005554:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005558:	4603      	mov	r3, r0
 800555a:	bf36      	itet	cc
 800555c:	0403      	lslcc	r3, r0, #16
 800555e:	2000      	movcs	r0, #0
 8005560:	2010      	movcc	r0, #16
 8005562:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005566:	bf3c      	itt	cc
 8005568:	021b      	lslcc	r3, r3, #8
 800556a:	3008      	addcc	r0, #8
 800556c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005570:	bf3c      	itt	cc
 8005572:	011b      	lslcc	r3, r3, #4
 8005574:	3004      	addcc	r0, #4
 8005576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800557a:	bf3c      	itt	cc
 800557c:	009b      	lslcc	r3, r3, #2
 800557e:	3002      	addcc	r0, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	db05      	blt.n	8005590 <__hi0bits+0x3c>
 8005584:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005588:	f100 0001 	add.w	r0, r0, #1
 800558c:	bf08      	it	eq
 800558e:	2020      	moveq	r0, #32
 8005590:	4770      	bx	lr

08005592 <__lo0bits>:
 8005592:	6803      	ldr	r3, [r0, #0]
 8005594:	4602      	mov	r2, r0
 8005596:	f013 0007 	ands.w	r0, r3, #7
 800559a:	d00b      	beq.n	80055b4 <__lo0bits+0x22>
 800559c:	07d9      	lsls	r1, r3, #31
 800559e:	d421      	bmi.n	80055e4 <__lo0bits+0x52>
 80055a0:	0798      	lsls	r0, r3, #30
 80055a2:	bf49      	itett	mi
 80055a4:	085b      	lsrmi	r3, r3, #1
 80055a6:	089b      	lsrpl	r3, r3, #2
 80055a8:	2001      	movmi	r0, #1
 80055aa:	6013      	strmi	r3, [r2, #0]
 80055ac:	bf5c      	itt	pl
 80055ae:	6013      	strpl	r3, [r2, #0]
 80055b0:	2002      	movpl	r0, #2
 80055b2:	4770      	bx	lr
 80055b4:	b299      	uxth	r1, r3
 80055b6:	b909      	cbnz	r1, 80055bc <__lo0bits+0x2a>
 80055b8:	0c1b      	lsrs	r3, r3, #16
 80055ba:	2010      	movs	r0, #16
 80055bc:	b2d9      	uxtb	r1, r3
 80055be:	b909      	cbnz	r1, 80055c4 <__lo0bits+0x32>
 80055c0:	3008      	adds	r0, #8
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	0719      	lsls	r1, r3, #28
 80055c6:	bf04      	itt	eq
 80055c8:	091b      	lsreq	r3, r3, #4
 80055ca:	3004      	addeq	r0, #4
 80055cc:	0799      	lsls	r1, r3, #30
 80055ce:	bf04      	itt	eq
 80055d0:	089b      	lsreq	r3, r3, #2
 80055d2:	3002      	addeq	r0, #2
 80055d4:	07d9      	lsls	r1, r3, #31
 80055d6:	d403      	bmi.n	80055e0 <__lo0bits+0x4e>
 80055d8:	085b      	lsrs	r3, r3, #1
 80055da:	f100 0001 	add.w	r0, r0, #1
 80055de:	d003      	beq.n	80055e8 <__lo0bits+0x56>
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	4770      	bx	lr
 80055e4:	2000      	movs	r0, #0
 80055e6:	4770      	bx	lr
 80055e8:	2020      	movs	r0, #32
 80055ea:	4770      	bx	lr

080055ec <__i2b>:
 80055ec:	b510      	push	{r4, lr}
 80055ee:	460c      	mov	r4, r1
 80055f0:	2101      	movs	r1, #1
 80055f2:	f7ff ff07 	bl	8005404 <_Balloc>
 80055f6:	4602      	mov	r2, r0
 80055f8:	b928      	cbnz	r0, 8005606 <__i2b+0x1a>
 80055fa:	4b05      	ldr	r3, [pc, #20]	@ (8005610 <__i2b+0x24>)
 80055fc:	4805      	ldr	r0, [pc, #20]	@ (8005614 <__i2b+0x28>)
 80055fe:	f240 1145 	movw	r1, #325	@ 0x145
 8005602:	f000 fcbd 	bl	8005f80 <__assert_func>
 8005606:	2301      	movs	r3, #1
 8005608:	6144      	str	r4, [r0, #20]
 800560a:	6103      	str	r3, [r0, #16]
 800560c:	bd10      	pop	{r4, pc}
 800560e:	bf00      	nop
 8005610:	08006704 	.word	0x08006704
 8005614:	08006715 	.word	0x08006715

08005618 <__multiply>:
 8005618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561c:	4614      	mov	r4, r2
 800561e:	690a      	ldr	r2, [r1, #16]
 8005620:	6923      	ldr	r3, [r4, #16]
 8005622:	429a      	cmp	r2, r3
 8005624:	bfa8      	it	ge
 8005626:	4623      	movge	r3, r4
 8005628:	460f      	mov	r7, r1
 800562a:	bfa4      	itt	ge
 800562c:	460c      	movge	r4, r1
 800562e:	461f      	movge	r7, r3
 8005630:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005634:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005638:	68a3      	ldr	r3, [r4, #8]
 800563a:	6861      	ldr	r1, [r4, #4]
 800563c:	eb0a 0609 	add.w	r6, sl, r9
 8005640:	42b3      	cmp	r3, r6
 8005642:	b085      	sub	sp, #20
 8005644:	bfb8      	it	lt
 8005646:	3101      	addlt	r1, #1
 8005648:	f7ff fedc 	bl	8005404 <_Balloc>
 800564c:	b930      	cbnz	r0, 800565c <__multiply+0x44>
 800564e:	4602      	mov	r2, r0
 8005650:	4b44      	ldr	r3, [pc, #272]	@ (8005764 <__multiply+0x14c>)
 8005652:	4845      	ldr	r0, [pc, #276]	@ (8005768 <__multiply+0x150>)
 8005654:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005658:	f000 fc92 	bl	8005f80 <__assert_func>
 800565c:	f100 0514 	add.w	r5, r0, #20
 8005660:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005664:	462b      	mov	r3, r5
 8005666:	2200      	movs	r2, #0
 8005668:	4543      	cmp	r3, r8
 800566a:	d321      	bcc.n	80056b0 <__multiply+0x98>
 800566c:	f107 0114 	add.w	r1, r7, #20
 8005670:	f104 0214 	add.w	r2, r4, #20
 8005674:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005678:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800567c:	9302      	str	r3, [sp, #8]
 800567e:	1b13      	subs	r3, r2, r4
 8005680:	3b15      	subs	r3, #21
 8005682:	f023 0303 	bic.w	r3, r3, #3
 8005686:	3304      	adds	r3, #4
 8005688:	f104 0715 	add.w	r7, r4, #21
 800568c:	42ba      	cmp	r2, r7
 800568e:	bf38      	it	cc
 8005690:	2304      	movcc	r3, #4
 8005692:	9301      	str	r3, [sp, #4]
 8005694:	9b02      	ldr	r3, [sp, #8]
 8005696:	9103      	str	r1, [sp, #12]
 8005698:	428b      	cmp	r3, r1
 800569a:	d80c      	bhi.n	80056b6 <__multiply+0x9e>
 800569c:	2e00      	cmp	r6, #0
 800569e:	dd03      	ble.n	80056a8 <__multiply+0x90>
 80056a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d05b      	beq.n	8005760 <__multiply+0x148>
 80056a8:	6106      	str	r6, [r0, #16]
 80056aa:	b005      	add	sp, #20
 80056ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b0:	f843 2b04 	str.w	r2, [r3], #4
 80056b4:	e7d8      	b.n	8005668 <__multiply+0x50>
 80056b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80056ba:	f1ba 0f00 	cmp.w	sl, #0
 80056be:	d024      	beq.n	800570a <__multiply+0xf2>
 80056c0:	f104 0e14 	add.w	lr, r4, #20
 80056c4:	46a9      	mov	r9, r5
 80056c6:	f04f 0c00 	mov.w	ip, #0
 80056ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80056ce:	f8d9 3000 	ldr.w	r3, [r9]
 80056d2:	fa1f fb87 	uxth.w	fp, r7
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80056dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80056e0:	f8d9 7000 	ldr.w	r7, [r9]
 80056e4:	4463      	add	r3, ip
 80056e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80056ea:	fb0a c70b 	mla	r7, sl, fp, ip
 80056ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80056f8:	4572      	cmp	r2, lr
 80056fa:	f849 3b04 	str.w	r3, [r9], #4
 80056fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005702:	d8e2      	bhi.n	80056ca <__multiply+0xb2>
 8005704:	9b01      	ldr	r3, [sp, #4]
 8005706:	f845 c003 	str.w	ip, [r5, r3]
 800570a:	9b03      	ldr	r3, [sp, #12]
 800570c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005710:	3104      	adds	r1, #4
 8005712:	f1b9 0f00 	cmp.w	r9, #0
 8005716:	d021      	beq.n	800575c <__multiply+0x144>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	f104 0c14 	add.w	ip, r4, #20
 800571e:	46ae      	mov	lr, r5
 8005720:	f04f 0a00 	mov.w	sl, #0
 8005724:	f8bc b000 	ldrh.w	fp, [ip]
 8005728:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800572c:	fb09 770b 	mla	r7, r9, fp, r7
 8005730:	4457      	add	r7, sl
 8005732:	b29b      	uxth	r3, r3
 8005734:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005738:	f84e 3b04 	str.w	r3, [lr], #4
 800573c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005740:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005744:	f8be 3000 	ldrh.w	r3, [lr]
 8005748:	fb09 330a 	mla	r3, r9, sl, r3
 800574c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005750:	4562      	cmp	r2, ip
 8005752:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005756:	d8e5      	bhi.n	8005724 <__multiply+0x10c>
 8005758:	9f01      	ldr	r7, [sp, #4]
 800575a:	51eb      	str	r3, [r5, r7]
 800575c:	3504      	adds	r5, #4
 800575e:	e799      	b.n	8005694 <__multiply+0x7c>
 8005760:	3e01      	subs	r6, #1
 8005762:	e79b      	b.n	800569c <__multiply+0x84>
 8005764:	08006704 	.word	0x08006704
 8005768:	08006715 	.word	0x08006715

0800576c <__pow5mult>:
 800576c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005770:	4615      	mov	r5, r2
 8005772:	f012 0203 	ands.w	r2, r2, #3
 8005776:	4607      	mov	r7, r0
 8005778:	460e      	mov	r6, r1
 800577a:	d007      	beq.n	800578c <__pow5mult+0x20>
 800577c:	4c25      	ldr	r4, [pc, #148]	@ (8005814 <__pow5mult+0xa8>)
 800577e:	3a01      	subs	r2, #1
 8005780:	2300      	movs	r3, #0
 8005782:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005786:	f7ff fe9f 	bl	80054c8 <__multadd>
 800578a:	4606      	mov	r6, r0
 800578c:	10ad      	asrs	r5, r5, #2
 800578e:	d03d      	beq.n	800580c <__pow5mult+0xa0>
 8005790:	69fc      	ldr	r4, [r7, #28]
 8005792:	b97c      	cbnz	r4, 80057b4 <__pow5mult+0x48>
 8005794:	2010      	movs	r0, #16
 8005796:	f7ff fd7f 	bl	8005298 <malloc>
 800579a:	4602      	mov	r2, r0
 800579c:	61f8      	str	r0, [r7, #28]
 800579e:	b928      	cbnz	r0, 80057ac <__pow5mult+0x40>
 80057a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005818 <__pow5mult+0xac>)
 80057a2:	481e      	ldr	r0, [pc, #120]	@ (800581c <__pow5mult+0xb0>)
 80057a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80057a8:	f000 fbea 	bl	8005f80 <__assert_func>
 80057ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057b0:	6004      	str	r4, [r0, #0]
 80057b2:	60c4      	str	r4, [r0, #12]
 80057b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80057b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057bc:	b94c      	cbnz	r4, 80057d2 <__pow5mult+0x66>
 80057be:	f240 2171 	movw	r1, #625	@ 0x271
 80057c2:	4638      	mov	r0, r7
 80057c4:	f7ff ff12 	bl	80055ec <__i2b>
 80057c8:	2300      	movs	r3, #0
 80057ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80057ce:	4604      	mov	r4, r0
 80057d0:	6003      	str	r3, [r0, #0]
 80057d2:	f04f 0900 	mov.w	r9, #0
 80057d6:	07eb      	lsls	r3, r5, #31
 80057d8:	d50a      	bpl.n	80057f0 <__pow5mult+0x84>
 80057da:	4631      	mov	r1, r6
 80057dc:	4622      	mov	r2, r4
 80057de:	4638      	mov	r0, r7
 80057e0:	f7ff ff1a 	bl	8005618 <__multiply>
 80057e4:	4631      	mov	r1, r6
 80057e6:	4680      	mov	r8, r0
 80057e8:	4638      	mov	r0, r7
 80057ea:	f7ff fe4b 	bl	8005484 <_Bfree>
 80057ee:	4646      	mov	r6, r8
 80057f0:	106d      	asrs	r5, r5, #1
 80057f2:	d00b      	beq.n	800580c <__pow5mult+0xa0>
 80057f4:	6820      	ldr	r0, [r4, #0]
 80057f6:	b938      	cbnz	r0, 8005808 <__pow5mult+0x9c>
 80057f8:	4622      	mov	r2, r4
 80057fa:	4621      	mov	r1, r4
 80057fc:	4638      	mov	r0, r7
 80057fe:	f7ff ff0b 	bl	8005618 <__multiply>
 8005802:	6020      	str	r0, [r4, #0]
 8005804:	f8c0 9000 	str.w	r9, [r0]
 8005808:	4604      	mov	r4, r0
 800580a:	e7e4      	b.n	80057d6 <__pow5mult+0x6a>
 800580c:	4630      	mov	r0, r6
 800580e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005812:	bf00      	nop
 8005814:	08006770 	.word	0x08006770
 8005818:	08006695 	.word	0x08006695
 800581c:	08006715 	.word	0x08006715

08005820 <__lshift>:
 8005820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005824:	460c      	mov	r4, r1
 8005826:	6849      	ldr	r1, [r1, #4]
 8005828:	6923      	ldr	r3, [r4, #16]
 800582a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800582e:	68a3      	ldr	r3, [r4, #8]
 8005830:	4607      	mov	r7, r0
 8005832:	4691      	mov	r9, r2
 8005834:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005838:	f108 0601 	add.w	r6, r8, #1
 800583c:	42b3      	cmp	r3, r6
 800583e:	db0b      	blt.n	8005858 <__lshift+0x38>
 8005840:	4638      	mov	r0, r7
 8005842:	f7ff fddf 	bl	8005404 <_Balloc>
 8005846:	4605      	mov	r5, r0
 8005848:	b948      	cbnz	r0, 800585e <__lshift+0x3e>
 800584a:	4602      	mov	r2, r0
 800584c:	4b28      	ldr	r3, [pc, #160]	@ (80058f0 <__lshift+0xd0>)
 800584e:	4829      	ldr	r0, [pc, #164]	@ (80058f4 <__lshift+0xd4>)
 8005850:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005854:	f000 fb94 	bl	8005f80 <__assert_func>
 8005858:	3101      	adds	r1, #1
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	e7ee      	b.n	800583c <__lshift+0x1c>
 800585e:	2300      	movs	r3, #0
 8005860:	f100 0114 	add.w	r1, r0, #20
 8005864:	f100 0210 	add.w	r2, r0, #16
 8005868:	4618      	mov	r0, r3
 800586a:	4553      	cmp	r3, sl
 800586c:	db33      	blt.n	80058d6 <__lshift+0xb6>
 800586e:	6920      	ldr	r0, [r4, #16]
 8005870:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005874:	f104 0314 	add.w	r3, r4, #20
 8005878:	f019 091f 	ands.w	r9, r9, #31
 800587c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005880:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005884:	d02b      	beq.n	80058de <__lshift+0xbe>
 8005886:	f1c9 0e20 	rsb	lr, r9, #32
 800588a:	468a      	mov	sl, r1
 800588c:	2200      	movs	r2, #0
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	fa00 f009 	lsl.w	r0, r0, r9
 8005894:	4310      	orrs	r0, r2
 8005896:	f84a 0b04 	str.w	r0, [sl], #4
 800589a:	f853 2b04 	ldr.w	r2, [r3], #4
 800589e:	459c      	cmp	ip, r3
 80058a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80058a4:	d8f3      	bhi.n	800588e <__lshift+0x6e>
 80058a6:	ebac 0304 	sub.w	r3, ip, r4
 80058aa:	3b15      	subs	r3, #21
 80058ac:	f023 0303 	bic.w	r3, r3, #3
 80058b0:	3304      	adds	r3, #4
 80058b2:	f104 0015 	add.w	r0, r4, #21
 80058b6:	4584      	cmp	ip, r0
 80058b8:	bf38      	it	cc
 80058ba:	2304      	movcc	r3, #4
 80058bc:	50ca      	str	r2, [r1, r3]
 80058be:	b10a      	cbz	r2, 80058c4 <__lshift+0xa4>
 80058c0:	f108 0602 	add.w	r6, r8, #2
 80058c4:	3e01      	subs	r6, #1
 80058c6:	4638      	mov	r0, r7
 80058c8:	612e      	str	r6, [r5, #16]
 80058ca:	4621      	mov	r1, r4
 80058cc:	f7ff fdda 	bl	8005484 <_Bfree>
 80058d0:	4628      	mov	r0, r5
 80058d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80058da:	3301      	adds	r3, #1
 80058dc:	e7c5      	b.n	800586a <__lshift+0x4a>
 80058de:	3904      	subs	r1, #4
 80058e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80058e8:	459c      	cmp	ip, r3
 80058ea:	d8f9      	bhi.n	80058e0 <__lshift+0xc0>
 80058ec:	e7ea      	b.n	80058c4 <__lshift+0xa4>
 80058ee:	bf00      	nop
 80058f0:	08006704 	.word	0x08006704
 80058f4:	08006715 	.word	0x08006715

080058f8 <__mcmp>:
 80058f8:	690a      	ldr	r2, [r1, #16]
 80058fa:	4603      	mov	r3, r0
 80058fc:	6900      	ldr	r0, [r0, #16]
 80058fe:	1a80      	subs	r0, r0, r2
 8005900:	b530      	push	{r4, r5, lr}
 8005902:	d10e      	bne.n	8005922 <__mcmp+0x2a>
 8005904:	3314      	adds	r3, #20
 8005906:	3114      	adds	r1, #20
 8005908:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800590c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005910:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005914:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005918:	4295      	cmp	r5, r2
 800591a:	d003      	beq.n	8005924 <__mcmp+0x2c>
 800591c:	d205      	bcs.n	800592a <__mcmp+0x32>
 800591e:	f04f 30ff 	mov.w	r0, #4294967295
 8005922:	bd30      	pop	{r4, r5, pc}
 8005924:	42a3      	cmp	r3, r4
 8005926:	d3f3      	bcc.n	8005910 <__mcmp+0x18>
 8005928:	e7fb      	b.n	8005922 <__mcmp+0x2a>
 800592a:	2001      	movs	r0, #1
 800592c:	e7f9      	b.n	8005922 <__mcmp+0x2a>
	...

08005930 <__mdiff>:
 8005930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	4689      	mov	r9, r1
 8005936:	4606      	mov	r6, r0
 8005938:	4611      	mov	r1, r2
 800593a:	4648      	mov	r0, r9
 800593c:	4614      	mov	r4, r2
 800593e:	f7ff ffdb 	bl	80058f8 <__mcmp>
 8005942:	1e05      	subs	r5, r0, #0
 8005944:	d112      	bne.n	800596c <__mdiff+0x3c>
 8005946:	4629      	mov	r1, r5
 8005948:	4630      	mov	r0, r6
 800594a:	f7ff fd5b 	bl	8005404 <_Balloc>
 800594e:	4602      	mov	r2, r0
 8005950:	b928      	cbnz	r0, 800595e <__mdiff+0x2e>
 8005952:	4b3f      	ldr	r3, [pc, #252]	@ (8005a50 <__mdiff+0x120>)
 8005954:	f240 2137 	movw	r1, #567	@ 0x237
 8005958:	483e      	ldr	r0, [pc, #248]	@ (8005a54 <__mdiff+0x124>)
 800595a:	f000 fb11 	bl	8005f80 <__assert_func>
 800595e:	2301      	movs	r3, #1
 8005960:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005964:	4610      	mov	r0, r2
 8005966:	b003      	add	sp, #12
 8005968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596c:	bfbc      	itt	lt
 800596e:	464b      	movlt	r3, r9
 8005970:	46a1      	movlt	r9, r4
 8005972:	4630      	mov	r0, r6
 8005974:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005978:	bfba      	itte	lt
 800597a:	461c      	movlt	r4, r3
 800597c:	2501      	movlt	r5, #1
 800597e:	2500      	movge	r5, #0
 8005980:	f7ff fd40 	bl	8005404 <_Balloc>
 8005984:	4602      	mov	r2, r0
 8005986:	b918      	cbnz	r0, 8005990 <__mdiff+0x60>
 8005988:	4b31      	ldr	r3, [pc, #196]	@ (8005a50 <__mdiff+0x120>)
 800598a:	f240 2145 	movw	r1, #581	@ 0x245
 800598e:	e7e3      	b.n	8005958 <__mdiff+0x28>
 8005990:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005994:	6926      	ldr	r6, [r4, #16]
 8005996:	60c5      	str	r5, [r0, #12]
 8005998:	f109 0310 	add.w	r3, r9, #16
 800599c:	f109 0514 	add.w	r5, r9, #20
 80059a0:	f104 0e14 	add.w	lr, r4, #20
 80059a4:	f100 0b14 	add.w	fp, r0, #20
 80059a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80059ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80059b0:	9301      	str	r3, [sp, #4]
 80059b2:	46d9      	mov	r9, fp
 80059b4:	f04f 0c00 	mov.w	ip, #0
 80059b8:	9b01      	ldr	r3, [sp, #4]
 80059ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80059be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	fa1f f38a 	uxth.w	r3, sl
 80059c8:	4619      	mov	r1, r3
 80059ca:	b283      	uxth	r3, r0
 80059cc:	1acb      	subs	r3, r1, r3
 80059ce:	0c00      	lsrs	r0, r0, #16
 80059d0:	4463      	add	r3, ip
 80059d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80059d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80059da:	b29b      	uxth	r3, r3
 80059dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80059e0:	4576      	cmp	r6, lr
 80059e2:	f849 3b04 	str.w	r3, [r9], #4
 80059e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80059ea:	d8e5      	bhi.n	80059b8 <__mdiff+0x88>
 80059ec:	1b33      	subs	r3, r6, r4
 80059ee:	3b15      	subs	r3, #21
 80059f0:	f023 0303 	bic.w	r3, r3, #3
 80059f4:	3415      	adds	r4, #21
 80059f6:	3304      	adds	r3, #4
 80059f8:	42a6      	cmp	r6, r4
 80059fa:	bf38      	it	cc
 80059fc:	2304      	movcc	r3, #4
 80059fe:	441d      	add	r5, r3
 8005a00:	445b      	add	r3, fp
 8005a02:	461e      	mov	r6, r3
 8005a04:	462c      	mov	r4, r5
 8005a06:	4544      	cmp	r4, r8
 8005a08:	d30e      	bcc.n	8005a28 <__mdiff+0xf8>
 8005a0a:	f108 0103 	add.w	r1, r8, #3
 8005a0e:	1b49      	subs	r1, r1, r5
 8005a10:	f021 0103 	bic.w	r1, r1, #3
 8005a14:	3d03      	subs	r5, #3
 8005a16:	45a8      	cmp	r8, r5
 8005a18:	bf38      	it	cc
 8005a1a:	2100      	movcc	r1, #0
 8005a1c:	440b      	add	r3, r1
 8005a1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a22:	b191      	cbz	r1, 8005a4a <__mdiff+0x11a>
 8005a24:	6117      	str	r7, [r2, #16]
 8005a26:	e79d      	b.n	8005964 <__mdiff+0x34>
 8005a28:	f854 1b04 	ldr.w	r1, [r4], #4
 8005a2c:	46e6      	mov	lr, ip
 8005a2e:	0c08      	lsrs	r0, r1, #16
 8005a30:	fa1c fc81 	uxtah	ip, ip, r1
 8005a34:	4471      	add	r1, lr
 8005a36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005a3a:	b289      	uxth	r1, r1
 8005a3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005a40:	f846 1b04 	str.w	r1, [r6], #4
 8005a44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a48:	e7dd      	b.n	8005a06 <__mdiff+0xd6>
 8005a4a:	3f01      	subs	r7, #1
 8005a4c:	e7e7      	b.n	8005a1e <__mdiff+0xee>
 8005a4e:	bf00      	nop
 8005a50:	08006704 	.word	0x08006704
 8005a54:	08006715 	.word	0x08006715

08005a58 <__d2b>:
 8005a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a5c:	460f      	mov	r7, r1
 8005a5e:	2101      	movs	r1, #1
 8005a60:	ec59 8b10 	vmov	r8, r9, d0
 8005a64:	4616      	mov	r6, r2
 8005a66:	f7ff fccd 	bl	8005404 <_Balloc>
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	b930      	cbnz	r0, 8005a7c <__d2b+0x24>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	4b23      	ldr	r3, [pc, #140]	@ (8005b00 <__d2b+0xa8>)
 8005a72:	4824      	ldr	r0, [pc, #144]	@ (8005b04 <__d2b+0xac>)
 8005a74:	f240 310f 	movw	r1, #783	@ 0x30f
 8005a78:	f000 fa82 	bl	8005f80 <__assert_func>
 8005a7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a84:	b10d      	cbz	r5, 8005a8a <__d2b+0x32>
 8005a86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a8a:	9301      	str	r3, [sp, #4]
 8005a8c:	f1b8 0300 	subs.w	r3, r8, #0
 8005a90:	d023      	beq.n	8005ada <__d2b+0x82>
 8005a92:	4668      	mov	r0, sp
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	f7ff fd7c 	bl	8005592 <__lo0bits>
 8005a9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005a9e:	b1d0      	cbz	r0, 8005ad6 <__d2b+0x7e>
 8005aa0:	f1c0 0320 	rsb	r3, r0, #32
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	40c2      	lsrs	r2, r0
 8005aac:	6163      	str	r3, [r4, #20]
 8005aae:	9201      	str	r2, [sp, #4]
 8005ab0:	9b01      	ldr	r3, [sp, #4]
 8005ab2:	61a3      	str	r3, [r4, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bf0c      	ite	eq
 8005ab8:	2201      	moveq	r2, #1
 8005aba:	2202      	movne	r2, #2
 8005abc:	6122      	str	r2, [r4, #16]
 8005abe:	b1a5      	cbz	r5, 8005aea <__d2b+0x92>
 8005ac0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005ac4:	4405      	add	r5, r0
 8005ac6:	603d      	str	r5, [r7, #0]
 8005ac8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005acc:	6030      	str	r0, [r6, #0]
 8005ace:	4620      	mov	r0, r4
 8005ad0:	b003      	add	sp, #12
 8005ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ad6:	6161      	str	r1, [r4, #20]
 8005ad8:	e7ea      	b.n	8005ab0 <__d2b+0x58>
 8005ada:	a801      	add	r0, sp, #4
 8005adc:	f7ff fd59 	bl	8005592 <__lo0bits>
 8005ae0:	9b01      	ldr	r3, [sp, #4]
 8005ae2:	6163      	str	r3, [r4, #20]
 8005ae4:	3020      	adds	r0, #32
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	e7e8      	b.n	8005abc <__d2b+0x64>
 8005aea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005aee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005af2:	6038      	str	r0, [r7, #0]
 8005af4:	6918      	ldr	r0, [r3, #16]
 8005af6:	f7ff fd2d 	bl	8005554 <__hi0bits>
 8005afa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005afe:	e7e5      	b.n	8005acc <__d2b+0x74>
 8005b00:	08006704 	.word	0x08006704
 8005b04:	08006715 	.word	0x08006715

08005b08 <__ssputs_r>:
 8005b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b0c:	688e      	ldr	r6, [r1, #8]
 8005b0e:	461f      	mov	r7, r3
 8005b10:	42be      	cmp	r6, r7
 8005b12:	680b      	ldr	r3, [r1, #0]
 8005b14:	4682      	mov	sl, r0
 8005b16:	460c      	mov	r4, r1
 8005b18:	4690      	mov	r8, r2
 8005b1a:	d82d      	bhi.n	8005b78 <__ssputs_r+0x70>
 8005b1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b24:	d026      	beq.n	8005b74 <__ssputs_r+0x6c>
 8005b26:	6965      	ldr	r5, [r4, #20]
 8005b28:	6909      	ldr	r1, [r1, #16]
 8005b2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b2e:	eba3 0901 	sub.w	r9, r3, r1
 8005b32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b36:	1c7b      	adds	r3, r7, #1
 8005b38:	444b      	add	r3, r9
 8005b3a:	106d      	asrs	r5, r5, #1
 8005b3c:	429d      	cmp	r5, r3
 8005b3e:	bf38      	it	cc
 8005b40:	461d      	movcc	r5, r3
 8005b42:	0553      	lsls	r3, r2, #21
 8005b44:	d527      	bpl.n	8005b96 <__ssputs_r+0x8e>
 8005b46:	4629      	mov	r1, r5
 8005b48:	f7ff fbd0 	bl	80052ec <_malloc_r>
 8005b4c:	4606      	mov	r6, r0
 8005b4e:	b360      	cbz	r0, 8005baa <__ssputs_r+0xa2>
 8005b50:	6921      	ldr	r1, [r4, #16]
 8005b52:	464a      	mov	r2, r9
 8005b54:	f000 fa06 	bl	8005f64 <memcpy>
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	6126      	str	r6, [r4, #16]
 8005b66:	6165      	str	r5, [r4, #20]
 8005b68:	444e      	add	r6, r9
 8005b6a:	eba5 0509 	sub.w	r5, r5, r9
 8005b6e:	6026      	str	r6, [r4, #0]
 8005b70:	60a5      	str	r5, [r4, #8]
 8005b72:	463e      	mov	r6, r7
 8005b74:	42be      	cmp	r6, r7
 8005b76:	d900      	bls.n	8005b7a <__ssputs_r+0x72>
 8005b78:	463e      	mov	r6, r7
 8005b7a:	6820      	ldr	r0, [r4, #0]
 8005b7c:	4632      	mov	r2, r6
 8005b7e:	4641      	mov	r1, r8
 8005b80:	f000 f9c6 	bl	8005f10 <memmove>
 8005b84:	68a3      	ldr	r3, [r4, #8]
 8005b86:	1b9b      	subs	r3, r3, r6
 8005b88:	60a3      	str	r3, [r4, #8]
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	4433      	add	r3, r6
 8005b8e:	6023      	str	r3, [r4, #0]
 8005b90:	2000      	movs	r0, #0
 8005b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b96:	462a      	mov	r2, r5
 8005b98:	f000 fa36 	bl	8006008 <_realloc_r>
 8005b9c:	4606      	mov	r6, r0
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d1e0      	bne.n	8005b64 <__ssputs_r+0x5c>
 8005ba2:	6921      	ldr	r1, [r4, #16]
 8005ba4:	4650      	mov	r0, sl
 8005ba6:	f7ff fb2d 	bl	8005204 <_free_r>
 8005baa:	230c      	movs	r3, #12
 8005bac:	f8ca 3000 	str.w	r3, [sl]
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bbc:	e7e9      	b.n	8005b92 <__ssputs_r+0x8a>
	...

08005bc0 <_svfiprintf_r>:
 8005bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc4:	4698      	mov	r8, r3
 8005bc6:	898b      	ldrh	r3, [r1, #12]
 8005bc8:	061b      	lsls	r3, r3, #24
 8005bca:	b09d      	sub	sp, #116	@ 0x74
 8005bcc:	4607      	mov	r7, r0
 8005bce:	460d      	mov	r5, r1
 8005bd0:	4614      	mov	r4, r2
 8005bd2:	d510      	bpl.n	8005bf6 <_svfiprintf_r+0x36>
 8005bd4:	690b      	ldr	r3, [r1, #16]
 8005bd6:	b973      	cbnz	r3, 8005bf6 <_svfiprintf_r+0x36>
 8005bd8:	2140      	movs	r1, #64	@ 0x40
 8005bda:	f7ff fb87 	bl	80052ec <_malloc_r>
 8005bde:	6028      	str	r0, [r5, #0]
 8005be0:	6128      	str	r0, [r5, #16]
 8005be2:	b930      	cbnz	r0, 8005bf2 <_svfiprintf_r+0x32>
 8005be4:	230c      	movs	r3, #12
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bec:	b01d      	add	sp, #116	@ 0x74
 8005bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf2:	2340      	movs	r3, #64	@ 0x40
 8005bf4:	616b      	str	r3, [r5, #20]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bfa:	2320      	movs	r3, #32
 8005bfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c00:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c04:	2330      	movs	r3, #48	@ 0x30
 8005c06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005da4 <_svfiprintf_r+0x1e4>
 8005c0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c0e:	f04f 0901 	mov.w	r9, #1
 8005c12:	4623      	mov	r3, r4
 8005c14:	469a      	mov	sl, r3
 8005c16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c1a:	b10a      	cbz	r2, 8005c20 <_svfiprintf_r+0x60>
 8005c1c:	2a25      	cmp	r2, #37	@ 0x25
 8005c1e:	d1f9      	bne.n	8005c14 <_svfiprintf_r+0x54>
 8005c20:	ebba 0b04 	subs.w	fp, sl, r4
 8005c24:	d00b      	beq.n	8005c3e <_svfiprintf_r+0x7e>
 8005c26:	465b      	mov	r3, fp
 8005c28:	4622      	mov	r2, r4
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	4638      	mov	r0, r7
 8005c2e:	f7ff ff6b 	bl	8005b08 <__ssputs_r>
 8005c32:	3001      	adds	r0, #1
 8005c34:	f000 80a7 	beq.w	8005d86 <_svfiprintf_r+0x1c6>
 8005c38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c3a:	445a      	add	r2, fp
 8005c3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 809f 	beq.w	8005d86 <_svfiprintf_r+0x1c6>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c52:	f10a 0a01 	add.w	sl, sl, #1
 8005c56:	9304      	str	r3, [sp, #16]
 8005c58:	9307      	str	r3, [sp, #28]
 8005c5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c60:	4654      	mov	r4, sl
 8005c62:	2205      	movs	r2, #5
 8005c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c68:	484e      	ldr	r0, [pc, #312]	@ (8005da4 <_svfiprintf_r+0x1e4>)
 8005c6a:	f7fa fae9 	bl	8000240 <memchr>
 8005c6e:	9a04      	ldr	r2, [sp, #16]
 8005c70:	b9d8      	cbnz	r0, 8005caa <_svfiprintf_r+0xea>
 8005c72:	06d0      	lsls	r0, r2, #27
 8005c74:	bf44      	itt	mi
 8005c76:	2320      	movmi	r3, #32
 8005c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c7c:	0711      	lsls	r1, r2, #28
 8005c7e:	bf44      	itt	mi
 8005c80:	232b      	movmi	r3, #43	@ 0x2b
 8005c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c86:	f89a 3000 	ldrb.w	r3, [sl]
 8005c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c8c:	d015      	beq.n	8005cba <_svfiprintf_r+0xfa>
 8005c8e:	9a07      	ldr	r2, [sp, #28]
 8005c90:	4654      	mov	r4, sl
 8005c92:	2000      	movs	r0, #0
 8005c94:	f04f 0c0a 	mov.w	ip, #10
 8005c98:	4621      	mov	r1, r4
 8005c9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c9e:	3b30      	subs	r3, #48	@ 0x30
 8005ca0:	2b09      	cmp	r3, #9
 8005ca2:	d94b      	bls.n	8005d3c <_svfiprintf_r+0x17c>
 8005ca4:	b1b0      	cbz	r0, 8005cd4 <_svfiprintf_r+0x114>
 8005ca6:	9207      	str	r2, [sp, #28]
 8005ca8:	e014      	b.n	8005cd4 <_svfiprintf_r+0x114>
 8005caa:	eba0 0308 	sub.w	r3, r0, r8
 8005cae:	fa09 f303 	lsl.w	r3, r9, r3
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	9304      	str	r3, [sp, #16]
 8005cb6:	46a2      	mov	sl, r4
 8005cb8:	e7d2      	b.n	8005c60 <_svfiprintf_r+0xa0>
 8005cba:	9b03      	ldr	r3, [sp, #12]
 8005cbc:	1d19      	adds	r1, r3, #4
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	9103      	str	r1, [sp, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bfbb      	ittet	lt
 8005cc6:	425b      	neglt	r3, r3
 8005cc8:	f042 0202 	orrlt.w	r2, r2, #2
 8005ccc:	9307      	strge	r3, [sp, #28]
 8005cce:	9307      	strlt	r3, [sp, #28]
 8005cd0:	bfb8      	it	lt
 8005cd2:	9204      	strlt	r2, [sp, #16]
 8005cd4:	7823      	ldrb	r3, [r4, #0]
 8005cd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cd8:	d10a      	bne.n	8005cf0 <_svfiprintf_r+0x130>
 8005cda:	7863      	ldrb	r3, [r4, #1]
 8005cdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cde:	d132      	bne.n	8005d46 <_svfiprintf_r+0x186>
 8005ce0:	9b03      	ldr	r3, [sp, #12]
 8005ce2:	1d1a      	adds	r2, r3, #4
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	9203      	str	r2, [sp, #12]
 8005ce8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005cec:	3402      	adds	r4, #2
 8005cee:	9305      	str	r3, [sp, #20]
 8005cf0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005db4 <_svfiprintf_r+0x1f4>
 8005cf4:	7821      	ldrb	r1, [r4, #0]
 8005cf6:	2203      	movs	r2, #3
 8005cf8:	4650      	mov	r0, sl
 8005cfa:	f7fa faa1 	bl	8000240 <memchr>
 8005cfe:	b138      	cbz	r0, 8005d10 <_svfiprintf_r+0x150>
 8005d00:	9b04      	ldr	r3, [sp, #16]
 8005d02:	eba0 000a 	sub.w	r0, r0, sl
 8005d06:	2240      	movs	r2, #64	@ 0x40
 8005d08:	4082      	lsls	r2, r0
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	3401      	adds	r4, #1
 8005d0e:	9304      	str	r3, [sp, #16]
 8005d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d14:	4824      	ldr	r0, [pc, #144]	@ (8005da8 <_svfiprintf_r+0x1e8>)
 8005d16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d1a:	2206      	movs	r2, #6
 8005d1c:	f7fa fa90 	bl	8000240 <memchr>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d036      	beq.n	8005d92 <_svfiprintf_r+0x1d2>
 8005d24:	4b21      	ldr	r3, [pc, #132]	@ (8005dac <_svfiprintf_r+0x1ec>)
 8005d26:	bb1b      	cbnz	r3, 8005d70 <_svfiprintf_r+0x1b0>
 8005d28:	9b03      	ldr	r3, [sp, #12]
 8005d2a:	3307      	adds	r3, #7
 8005d2c:	f023 0307 	bic.w	r3, r3, #7
 8005d30:	3308      	adds	r3, #8
 8005d32:	9303      	str	r3, [sp, #12]
 8005d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d36:	4433      	add	r3, r6
 8005d38:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d3a:	e76a      	b.n	8005c12 <_svfiprintf_r+0x52>
 8005d3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d40:	460c      	mov	r4, r1
 8005d42:	2001      	movs	r0, #1
 8005d44:	e7a8      	b.n	8005c98 <_svfiprintf_r+0xd8>
 8005d46:	2300      	movs	r3, #0
 8005d48:	3401      	adds	r4, #1
 8005d4a:	9305      	str	r3, [sp, #20]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	f04f 0c0a 	mov.w	ip, #10
 8005d52:	4620      	mov	r0, r4
 8005d54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d58:	3a30      	subs	r2, #48	@ 0x30
 8005d5a:	2a09      	cmp	r2, #9
 8005d5c:	d903      	bls.n	8005d66 <_svfiprintf_r+0x1a6>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0c6      	beq.n	8005cf0 <_svfiprintf_r+0x130>
 8005d62:	9105      	str	r1, [sp, #20]
 8005d64:	e7c4      	b.n	8005cf0 <_svfiprintf_r+0x130>
 8005d66:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e7f0      	b.n	8005d52 <_svfiprintf_r+0x192>
 8005d70:	ab03      	add	r3, sp, #12
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	462a      	mov	r2, r5
 8005d76:	4b0e      	ldr	r3, [pc, #56]	@ (8005db0 <_svfiprintf_r+0x1f0>)
 8005d78:	a904      	add	r1, sp, #16
 8005d7a:	4638      	mov	r0, r7
 8005d7c:	f7fd ff14 	bl	8003ba8 <_printf_float>
 8005d80:	1c42      	adds	r2, r0, #1
 8005d82:	4606      	mov	r6, r0
 8005d84:	d1d6      	bne.n	8005d34 <_svfiprintf_r+0x174>
 8005d86:	89ab      	ldrh	r3, [r5, #12]
 8005d88:	065b      	lsls	r3, r3, #25
 8005d8a:	f53f af2d 	bmi.w	8005be8 <_svfiprintf_r+0x28>
 8005d8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d90:	e72c      	b.n	8005bec <_svfiprintf_r+0x2c>
 8005d92:	ab03      	add	r3, sp, #12
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	462a      	mov	r2, r5
 8005d98:	4b05      	ldr	r3, [pc, #20]	@ (8005db0 <_svfiprintf_r+0x1f0>)
 8005d9a:	a904      	add	r1, sp, #16
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	f7fe f98b 	bl	80040b8 <_printf_i>
 8005da2:	e7ed      	b.n	8005d80 <_svfiprintf_r+0x1c0>
 8005da4:	08006870 	.word	0x08006870
 8005da8:	0800687a 	.word	0x0800687a
 8005dac:	08003ba9 	.word	0x08003ba9
 8005db0:	08005b09 	.word	0x08005b09
 8005db4:	08006876 	.word	0x08006876

08005db8 <__sflush_r>:
 8005db8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc0:	0716      	lsls	r6, r2, #28
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	d454      	bmi.n	8005e72 <__sflush_r+0xba>
 8005dc8:	684b      	ldr	r3, [r1, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	dc02      	bgt.n	8005dd4 <__sflush_r+0x1c>
 8005dce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	dd48      	ble.n	8005e66 <__sflush_r+0xae>
 8005dd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005dd6:	2e00      	cmp	r6, #0
 8005dd8:	d045      	beq.n	8005e66 <__sflush_r+0xae>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005de0:	682f      	ldr	r7, [r5, #0]
 8005de2:	6a21      	ldr	r1, [r4, #32]
 8005de4:	602b      	str	r3, [r5, #0]
 8005de6:	d030      	beq.n	8005e4a <__sflush_r+0x92>
 8005de8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005dea:	89a3      	ldrh	r3, [r4, #12]
 8005dec:	0759      	lsls	r1, r3, #29
 8005dee:	d505      	bpl.n	8005dfc <__sflush_r+0x44>
 8005df0:	6863      	ldr	r3, [r4, #4]
 8005df2:	1ad2      	subs	r2, r2, r3
 8005df4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005df6:	b10b      	cbz	r3, 8005dfc <__sflush_r+0x44>
 8005df8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005dfa:	1ad2      	subs	r2, r2, r3
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e00:	6a21      	ldr	r1, [r4, #32]
 8005e02:	4628      	mov	r0, r5
 8005e04:	47b0      	blx	r6
 8005e06:	1c43      	adds	r3, r0, #1
 8005e08:	89a3      	ldrh	r3, [r4, #12]
 8005e0a:	d106      	bne.n	8005e1a <__sflush_r+0x62>
 8005e0c:	6829      	ldr	r1, [r5, #0]
 8005e0e:	291d      	cmp	r1, #29
 8005e10:	d82b      	bhi.n	8005e6a <__sflush_r+0xb2>
 8005e12:	4a2a      	ldr	r2, [pc, #168]	@ (8005ebc <__sflush_r+0x104>)
 8005e14:	410a      	asrs	r2, r1
 8005e16:	07d6      	lsls	r6, r2, #31
 8005e18:	d427      	bmi.n	8005e6a <__sflush_r+0xb2>
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	6062      	str	r2, [r4, #4]
 8005e1e:	04d9      	lsls	r1, r3, #19
 8005e20:	6922      	ldr	r2, [r4, #16]
 8005e22:	6022      	str	r2, [r4, #0]
 8005e24:	d504      	bpl.n	8005e30 <__sflush_r+0x78>
 8005e26:	1c42      	adds	r2, r0, #1
 8005e28:	d101      	bne.n	8005e2e <__sflush_r+0x76>
 8005e2a:	682b      	ldr	r3, [r5, #0]
 8005e2c:	b903      	cbnz	r3, 8005e30 <__sflush_r+0x78>
 8005e2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e32:	602f      	str	r7, [r5, #0]
 8005e34:	b1b9      	cbz	r1, 8005e66 <__sflush_r+0xae>
 8005e36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e3a:	4299      	cmp	r1, r3
 8005e3c:	d002      	beq.n	8005e44 <__sflush_r+0x8c>
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f7ff f9e0 	bl	8005204 <_free_r>
 8005e44:	2300      	movs	r3, #0
 8005e46:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e48:	e00d      	b.n	8005e66 <__sflush_r+0xae>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	47b0      	blx	r6
 8005e50:	4602      	mov	r2, r0
 8005e52:	1c50      	adds	r0, r2, #1
 8005e54:	d1c9      	bne.n	8005dea <__sflush_r+0x32>
 8005e56:	682b      	ldr	r3, [r5, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0c6      	beq.n	8005dea <__sflush_r+0x32>
 8005e5c:	2b1d      	cmp	r3, #29
 8005e5e:	d001      	beq.n	8005e64 <__sflush_r+0xac>
 8005e60:	2b16      	cmp	r3, #22
 8005e62:	d11e      	bne.n	8005ea2 <__sflush_r+0xea>
 8005e64:	602f      	str	r7, [r5, #0]
 8005e66:	2000      	movs	r0, #0
 8005e68:	e022      	b.n	8005eb0 <__sflush_r+0xf8>
 8005e6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e6e:	b21b      	sxth	r3, r3
 8005e70:	e01b      	b.n	8005eaa <__sflush_r+0xf2>
 8005e72:	690f      	ldr	r7, [r1, #16]
 8005e74:	2f00      	cmp	r7, #0
 8005e76:	d0f6      	beq.n	8005e66 <__sflush_r+0xae>
 8005e78:	0793      	lsls	r3, r2, #30
 8005e7a:	680e      	ldr	r6, [r1, #0]
 8005e7c:	bf08      	it	eq
 8005e7e:	694b      	ldreq	r3, [r1, #20]
 8005e80:	600f      	str	r7, [r1, #0]
 8005e82:	bf18      	it	ne
 8005e84:	2300      	movne	r3, #0
 8005e86:	eba6 0807 	sub.w	r8, r6, r7
 8005e8a:	608b      	str	r3, [r1, #8]
 8005e8c:	f1b8 0f00 	cmp.w	r8, #0
 8005e90:	dde9      	ble.n	8005e66 <__sflush_r+0xae>
 8005e92:	6a21      	ldr	r1, [r4, #32]
 8005e94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005e96:	4643      	mov	r3, r8
 8005e98:	463a      	mov	r2, r7
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	47b0      	blx	r6
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	dc08      	bgt.n	8005eb4 <__sflush_r+0xfc>
 8005ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005eaa:	81a3      	strh	r3, [r4, #12]
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb4:	4407      	add	r7, r0
 8005eb6:	eba8 0800 	sub.w	r8, r8, r0
 8005eba:	e7e7      	b.n	8005e8c <__sflush_r+0xd4>
 8005ebc:	dfbffffe 	.word	0xdfbffffe

08005ec0 <_fflush_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	690b      	ldr	r3, [r1, #16]
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	b913      	cbnz	r3, 8005ed0 <_fflush_r+0x10>
 8005eca:	2500      	movs	r5, #0
 8005ecc:	4628      	mov	r0, r5
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
 8005ed0:	b118      	cbz	r0, 8005eda <_fflush_r+0x1a>
 8005ed2:	6a03      	ldr	r3, [r0, #32]
 8005ed4:	b90b      	cbnz	r3, 8005eda <_fflush_r+0x1a>
 8005ed6:	f7fe fa9b 	bl	8004410 <__sinit>
 8005eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f3      	beq.n	8005eca <_fflush_r+0xa>
 8005ee2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ee4:	07d0      	lsls	r0, r2, #31
 8005ee6:	d404      	bmi.n	8005ef2 <_fflush_r+0x32>
 8005ee8:	0599      	lsls	r1, r3, #22
 8005eea:	d402      	bmi.n	8005ef2 <_fflush_r+0x32>
 8005eec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eee:	f7fe fba6 	bl	800463e <__retarget_lock_acquire_recursive>
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	f7ff ff5f 	bl	8005db8 <__sflush_r>
 8005efa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005efc:	07da      	lsls	r2, r3, #31
 8005efe:	4605      	mov	r5, r0
 8005f00:	d4e4      	bmi.n	8005ecc <_fflush_r+0xc>
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	059b      	lsls	r3, r3, #22
 8005f06:	d4e1      	bmi.n	8005ecc <_fflush_r+0xc>
 8005f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f0a:	f7fe fb99 	bl	8004640 <__retarget_lock_release_recursive>
 8005f0e:	e7dd      	b.n	8005ecc <_fflush_r+0xc>

08005f10 <memmove>:
 8005f10:	4288      	cmp	r0, r1
 8005f12:	b510      	push	{r4, lr}
 8005f14:	eb01 0402 	add.w	r4, r1, r2
 8005f18:	d902      	bls.n	8005f20 <memmove+0x10>
 8005f1a:	4284      	cmp	r4, r0
 8005f1c:	4623      	mov	r3, r4
 8005f1e:	d807      	bhi.n	8005f30 <memmove+0x20>
 8005f20:	1e43      	subs	r3, r0, #1
 8005f22:	42a1      	cmp	r1, r4
 8005f24:	d008      	beq.n	8005f38 <memmove+0x28>
 8005f26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f2e:	e7f8      	b.n	8005f22 <memmove+0x12>
 8005f30:	4402      	add	r2, r0
 8005f32:	4601      	mov	r1, r0
 8005f34:	428a      	cmp	r2, r1
 8005f36:	d100      	bne.n	8005f3a <memmove+0x2a>
 8005f38:	bd10      	pop	{r4, pc}
 8005f3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f42:	e7f7      	b.n	8005f34 <memmove+0x24>

08005f44 <_sbrk_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	4d06      	ldr	r5, [pc, #24]	@ (8005f60 <_sbrk_r+0x1c>)
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	602b      	str	r3, [r5, #0]
 8005f50:	f7fa ff70 	bl	8000e34 <_sbrk>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d102      	bne.n	8005f5e <_sbrk_r+0x1a>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	b103      	cbz	r3, 8005f5e <_sbrk_r+0x1a>
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	20000484 	.word	0x20000484

08005f64 <memcpy>:
 8005f64:	440a      	add	r2, r1
 8005f66:	4291      	cmp	r1, r2
 8005f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f6c:	d100      	bne.n	8005f70 <memcpy+0xc>
 8005f6e:	4770      	bx	lr
 8005f70:	b510      	push	{r4, lr}
 8005f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f7a:	4291      	cmp	r1, r2
 8005f7c:	d1f9      	bne.n	8005f72 <memcpy+0xe>
 8005f7e:	bd10      	pop	{r4, pc}

08005f80 <__assert_func>:
 8005f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f82:	4614      	mov	r4, r2
 8005f84:	461a      	mov	r2, r3
 8005f86:	4b09      	ldr	r3, [pc, #36]	@ (8005fac <__assert_func+0x2c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4605      	mov	r5, r0
 8005f8c:	68d8      	ldr	r0, [r3, #12]
 8005f8e:	b954      	cbnz	r4, 8005fa6 <__assert_func+0x26>
 8005f90:	4b07      	ldr	r3, [pc, #28]	@ (8005fb0 <__assert_func+0x30>)
 8005f92:	461c      	mov	r4, r3
 8005f94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f98:	9100      	str	r1, [sp, #0]
 8005f9a:	462b      	mov	r3, r5
 8005f9c:	4905      	ldr	r1, [pc, #20]	@ (8005fb4 <__assert_func+0x34>)
 8005f9e:	f000 f86f 	bl	8006080 <fiprintf>
 8005fa2:	f000 f87f 	bl	80060a4 <abort>
 8005fa6:	4b04      	ldr	r3, [pc, #16]	@ (8005fb8 <__assert_func+0x38>)
 8005fa8:	e7f4      	b.n	8005f94 <__assert_func+0x14>
 8005faa:	bf00      	nop
 8005fac:	20000018 	.word	0x20000018
 8005fb0:	080068c6 	.word	0x080068c6
 8005fb4:	08006898 	.word	0x08006898
 8005fb8:	0800688b 	.word	0x0800688b

08005fbc <_calloc_r>:
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	fba1 5402 	umull	r5, r4, r1, r2
 8005fc2:	b93c      	cbnz	r4, 8005fd4 <_calloc_r+0x18>
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	f7ff f991 	bl	80052ec <_malloc_r>
 8005fca:	4606      	mov	r6, r0
 8005fcc:	b928      	cbnz	r0, 8005fda <_calloc_r+0x1e>
 8005fce:	2600      	movs	r6, #0
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	bd70      	pop	{r4, r5, r6, pc}
 8005fd4:	220c      	movs	r2, #12
 8005fd6:	6002      	str	r2, [r0, #0]
 8005fd8:	e7f9      	b.n	8005fce <_calloc_r+0x12>
 8005fda:	462a      	mov	r2, r5
 8005fdc:	4621      	mov	r1, r4
 8005fde:	f7fe fab0 	bl	8004542 <memset>
 8005fe2:	e7f5      	b.n	8005fd0 <_calloc_r+0x14>

08005fe4 <__ascii_mbtowc>:
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	b901      	cbnz	r1, 8005fea <__ascii_mbtowc+0x6>
 8005fe8:	a901      	add	r1, sp, #4
 8005fea:	b142      	cbz	r2, 8005ffe <__ascii_mbtowc+0x1a>
 8005fec:	b14b      	cbz	r3, 8006002 <__ascii_mbtowc+0x1e>
 8005fee:	7813      	ldrb	r3, [r2, #0]
 8005ff0:	600b      	str	r3, [r1, #0]
 8005ff2:	7812      	ldrb	r2, [r2, #0]
 8005ff4:	1e10      	subs	r0, r2, #0
 8005ff6:	bf18      	it	ne
 8005ff8:	2001      	movne	r0, #1
 8005ffa:	b002      	add	sp, #8
 8005ffc:	4770      	bx	lr
 8005ffe:	4610      	mov	r0, r2
 8006000:	e7fb      	b.n	8005ffa <__ascii_mbtowc+0x16>
 8006002:	f06f 0001 	mvn.w	r0, #1
 8006006:	e7f8      	b.n	8005ffa <__ascii_mbtowc+0x16>

08006008 <_realloc_r>:
 8006008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800600c:	4680      	mov	r8, r0
 800600e:	4615      	mov	r5, r2
 8006010:	460c      	mov	r4, r1
 8006012:	b921      	cbnz	r1, 800601e <_realloc_r+0x16>
 8006014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006018:	4611      	mov	r1, r2
 800601a:	f7ff b967 	b.w	80052ec <_malloc_r>
 800601e:	b92a      	cbnz	r2, 800602c <_realloc_r+0x24>
 8006020:	f7ff f8f0 	bl	8005204 <_free_r>
 8006024:	2400      	movs	r4, #0
 8006026:	4620      	mov	r0, r4
 8006028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800602c:	f000 f841 	bl	80060b2 <_malloc_usable_size_r>
 8006030:	4285      	cmp	r5, r0
 8006032:	4606      	mov	r6, r0
 8006034:	d802      	bhi.n	800603c <_realloc_r+0x34>
 8006036:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800603a:	d8f4      	bhi.n	8006026 <_realloc_r+0x1e>
 800603c:	4629      	mov	r1, r5
 800603e:	4640      	mov	r0, r8
 8006040:	f7ff f954 	bl	80052ec <_malloc_r>
 8006044:	4607      	mov	r7, r0
 8006046:	2800      	cmp	r0, #0
 8006048:	d0ec      	beq.n	8006024 <_realloc_r+0x1c>
 800604a:	42b5      	cmp	r5, r6
 800604c:	462a      	mov	r2, r5
 800604e:	4621      	mov	r1, r4
 8006050:	bf28      	it	cs
 8006052:	4632      	movcs	r2, r6
 8006054:	f7ff ff86 	bl	8005f64 <memcpy>
 8006058:	4621      	mov	r1, r4
 800605a:	4640      	mov	r0, r8
 800605c:	f7ff f8d2 	bl	8005204 <_free_r>
 8006060:	463c      	mov	r4, r7
 8006062:	e7e0      	b.n	8006026 <_realloc_r+0x1e>

08006064 <__ascii_wctomb>:
 8006064:	4603      	mov	r3, r0
 8006066:	4608      	mov	r0, r1
 8006068:	b141      	cbz	r1, 800607c <__ascii_wctomb+0x18>
 800606a:	2aff      	cmp	r2, #255	@ 0xff
 800606c:	d904      	bls.n	8006078 <__ascii_wctomb+0x14>
 800606e:	228a      	movs	r2, #138	@ 0x8a
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	f04f 30ff 	mov.w	r0, #4294967295
 8006076:	4770      	bx	lr
 8006078:	700a      	strb	r2, [r1, #0]
 800607a:	2001      	movs	r0, #1
 800607c:	4770      	bx	lr
	...

08006080 <fiprintf>:
 8006080:	b40e      	push	{r1, r2, r3}
 8006082:	b503      	push	{r0, r1, lr}
 8006084:	4601      	mov	r1, r0
 8006086:	ab03      	add	r3, sp, #12
 8006088:	4805      	ldr	r0, [pc, #20]	@ (80060a0 <fiprintf+0x20>)
 800608a:	f853 2b04 	ldr.w	r2, [r3], #4
 800608e:	6800      	ldr	r0, [r0, #0]
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	f000 f83f 	bl	8006114 <_vfiprintf_r>
 8006096:	b002      	add	sp, #8
 8006098:	f85d eb04 	ldr.w	lr, [sp], #4
 800609c:	b003      	add	sp, #12
 800609e:	4770      	bx	lr
 80060a0:	20000018 	.word	0x20000018

080060a4 <abort>:
 80060a4:	b508      	push	{r3, lr}
 80060a6:	2006      	movs	r0, #6
 80060a8:	f000 fa08 	bl	80064bc <raise>
 80060ac:	2001      	movs	r0, #1
 80060ae:	f7fa fe48 	bl	8000d42 <_exit>

080060b2 <_malloc_usable_size_r>:
 80060b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060b6:	1f18      	subs	r0, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	bfbc      	itt	lt
 80060bc:	580b      	ldrlt	r3, [r1, r0]
 80060be:	18c0      	addlt	r0, r0, r3
 80060c0:	4770      	bx	lr

080060c2 <__sfputc_r>:
 80060c2:	6893      	ldr	r3, [r2, #8]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	b410      	push	{r4}
 80060ca:	6093      	str	r3, [r2, #8]
 80060cc:	da08      	bge.n	80060e0 <__sfputc_r+0x1e>
 80060ce:	6994      	ldr	r4, [r2, #24]
 80060d0:	42a3      	cmp	r3, r4
 80060d2:	db01      	blt.n	80060d8 <__sfputc_r+0x16>
 80060d4:	290a      	cmp	r1, #10
 80060d6:	d103      	bne.n	80060e0 <__sfputc_r+0x1e>
 80060d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060dc:	f000 b932 	b.w	8006344 <__swbuf_r>
 80060e0:	6813      	ldr	r3, [r2, #0]
 80060e2:	1c58      	adds	r0, r3, #1
 80060e4:	6010      	str	r0, [r2, #0]
 80060e6:	7019      	strb	r1, [r3, #0]
 80060e8:	4608      	mov	r0, r1
 80060ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <__sfputs_r>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	4606      	mov	r6, r0
 80060f4:	460f      	mov	r7, r1
 80060f6:	4614      	mov	r4, r2
 80060f8:	18d5      	adds	r5, r2, r3
 80060fa:	42ac      	cmp	r4, r5
 80060fc:	d101      	bne.n	8006102 <__sfputs_r+0x12>
 80060fe:	2000      	movs	r0, #0
 8006100:	e007      	b.n	8006112 <__sfputs_r+0x22>
 8006102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006106:	463a      	mov	r2, r7
 8006108:	4630      	mov	r0, r6
 800610a:	f7ff ffda 	bl	80060c2 <__sfputc_r>
 800610e:	1c43      	adds	r3, r0, #1
 8006110:	d1f3      	bne.n	80060fa <__sfputs_r+0xa>
 8006112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006114 <_vfiprintf_r>:
 8006114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006118:	460d      	mov	r5, r1
 800611a:	b09d      	sub	sp, #116	@ 0x74
 800611c:	4614      	mov	r4, r2
 800611e:	4698      	mov	r8, r3
 8006120:	4606      	mov	r6, r0
 8006122:	b118      	cbz	r0, 800612c <_vfiprintf_r+0x18>
 8006124:	6a03      	ldr	r3, [r0, #32]
 8006126:	b90b      	cbnz	r3, 800612c <_vfiprintf_r+0x18>
 8006128:	f7fe f972 	bl	8004410 <__sinit>
 800612c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800612e:	07d9      	lsls	r1, r3, #31
 8006130:	d405      	bmi.n	800613e <_vfiprintf_r+0x2a>
 8006132:	89ab      	ldrh	r3, [r5, #12]
 8006134:	059a      	lsls	r2, r3, #22
 8006136:	d402      	bmi.n	800613e <_vfiprintf_r+0x2a>
 8006138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800613a:	f7fe fa80 	bl	800463e <__retarget_lock_acquire_recursive>
 800613e:	89ab      	ldrh	r3, [r5, #12]
 8006140:	071b      	lsls	r3, r3, #28
 8006142:	d501      	bpl.n	8006148 <_vfiprintf_r+0x34>
 8006144:	692b      	ldr	r3, [r5, #16]
 8006146:	b99b      	cbnz	r3, 8006170 <_vfiprintf_r+0x5c>
 8006148:	4629      	mov	r1, r5
 800614a:	4630      	mov	r0, r6
 800614c:	f000 f938 	bl	80063c0 <__swsetup_r>
 8006150:	b170      	cbz	r0, 8006170 <_vfiprintf_r+0x5c>
 8006152:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006154:	07dc      	lsls	r4, r3, #31
 8006156:	d504      	bpl.n	8006162 <_vfiprintf_r+0x4e>
 8006158:	f04f 30ff 	mov.w	r0, #4294967295
 800615c:	b01d      	add	sp, #116	@ 0x74
 800615e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006162:	89ab      	ldrh	r3, [r5, #12]
 8006164:	0598      	lsls	r0, r3, #22
 8006166:	d4f7      	bmi.n	8006158 <_vfiprintf_r+0x44>
 8006168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800616a:	f7fe fa69 	bl	8004640 <__retarget_lock_release_recursive>
 800616e:	e7f3      	b.n	8006158 <_vfiprintf_r+0x44>
 8006170:	2300      	movs	r3, #0
 8006172:	9309      	str	r3, [sp, #36]	@ 0x24
 8006174:	2320      	movs	r3, #32
 8006176:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800617a:	f8cd 800c 	str.w	r8, [sp, #12]
 800617e:	2330      	movs	r3, #48	@ 0x30
 8006180:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006330 <_vfiprintf_r+0x21c>
 8006184:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006188:	f04f 0901 	mov.w	r9, #1
 800618c:	4623      	mov	r3, r4
 800618e:	469a      	mov	sl, r3
 8006190:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006194:	b10a      	cbz	r2, 800619a <_vfiprintf_r+0x86>
 8006196:	2a25      	cmp	r2, #37	@ 0x25
 8006198:	d1f9      	bne.n	800618e <_vfiprintf_r+0x7a>
 800619a:	ebba 0b04 	subs.w	fp, sl, r4
 800619e:	d00b      	beq.n	80061b8 <_vfiprintf_r+0xa4>
 80061a0:	465b      	mov	r3, fp
 80061a2:	4622      	mov	r2, r4
 80061a4:	4629      	mov	r1, r5
 80061a6:	4630      	mov	r0, r6
 80061a8:	f7ff ffa2 	bl	80060f0 <__sfputs_r>
 80061ac:	3001      	adds	r0, #1
 80061ae:	f000 80a7 	beq.w	8006300 <_vfiprintf_r+0x1ec>
 80061b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061b4:	445a      	add	r2, fp
 80061b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80061b8:	f89a 3000 	ldrb.w	r3, [sl]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 809f 	beq.w	8006300 <_vfiprintf_r+0x1ec>
 80061c2:	2300      	movs	r3, #0
 80061c4:	f04f 32ff 	mov.w	r2, #4294967295
 80061c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061cc:	f10a 0a01 	add.w	sl, sl, #1
 80061d0:	9304      	str	r3, [sp, #16]
 80061d2:	9307      	str	r3, [sp, #28]
 80061d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80061da:	4654      	mov	r4, sl
 80061dc:	2205      	movs	r2, #5
 80061de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e2:	4853      	ldr	r0, [pc, #332]	@ (8006330 <_vfiprintf_r+0x21c>)
 80061e4:	f7fa f82c 	bl	8000240 <memchr>
 80061e8:	9a04      	ldr	r2, [sp, #16]
 80061ea:	b9d8      	cbnz	r0, 8006224 <_vfiprintf_r+0x110>
 80061ec:	06d1      	lsls	r1, r2, #27
 80061ee:	bf44      	itt	mi
 80061f0:	2320      	movmi	r3, #32
 80061f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061f6:	0713      	lsls	r3, r2, #28
 80061f8:	bf44      	itt	mi
 80061fa:	232b      	movmi	r3, #43	@ 0x2b
 80061fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006200:	f89a 3000 	ldrb.w	r3, [sl]
 8006204:	2b2a      	cmp	r3, #42	@ 0x2a
 8006206:	d015      	beq.n	8006234 <_vfiprintf_r+0x120>
 8006208:	9a07      	ldr	r2, [sp, #28]
 800620a:	4654      	mov	r4, sl
 800620c:	2000      	movs	r0, #0
 800620e:	f04f 0c0a 	mov.w	ip, #10
 8006212:	4621      	mov	r1, r4
 8006214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006218:	3b30      	subs	r3, #48	@ 0x30
 800621a:	2b09      	cmp	r3, #9
 800621c:	d94b      	bls.n	80062b6 <_vfiprintf_r+0x1a2>
 800621e:	b1b0      	cbz	r0, 800624e <_vfiprintf_r+0x13a>
 8006220:	9207      	str	r2, [sp, #28]
 8006222:	e014      	b.n	800624e <_vfiprintf_r+0x13a>
 8006224:	eba0 0308 	sub.w	r3, r0, r8
 8006228:	fa09 f303 	lsl.w	r3, r9, r3
 800622c:	4313      	orrs	r3, r2
 800622e:	9304      	str	r3, [sp, #16]
 8006230:	46a2      	mov	sl, r4
 8006232:	e7d2      	b.n	80061da <_vfiprintf_r+0xc6>
 8006234:	9b03      	ldr	r3, [sp, #12]
 8006236:	1d19      	adds	r1, r3, #4
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	9103      	str	r1, [sp, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	bfbb      	ittet	lt
 8006240:	425b      	neglt	r3, r3
 8006242:	f042 0202 	orrlt.w	r2, r2, #2
 8006246:	9307      	strge	r3, [sp, #28]
 8006248:	9307      	strlt	r3, [sp, #28]
 800624a:	bfb8      	it	lt
 800624c:	9204      	strlt	r2, [sp, #16]
 800624e:	7823      	ldrb	r3, [r4, #0]
 8006250:	2b2e      	cmp	r3, #46	@ 0x2e
 8006252:	d10a      	bne.n	800626a <_vfiprintf_r+0x156>
 8006254:	7863      	ldrb	r3, [r4, #1]
 8006256:	2b2a      	cmp	r3, #42	@ 0x2a
 8006258:	d132      	bne.n	80062c0 <_vfiprintf_r+0x1ac>
 800625a:	9b03      	ldr	r3, [sp, #12]
 800625c:	1d1a      	adds	r2, r3, #4
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	9203      	str	r2, [sp, #12]
 8006262:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006266:	3402      	adds	r4, #2
 8006268:	9305      	str	r3, [sp, #20]
 800626a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006340 <_vfiprintf_r+0x22c>
 800626e:	7821      	ldrb	r1, [r4, #0]
 8006270:	2203      	movs	r2, #3
 8006272:	4650      	mov	r0, sl
 8006274:	f7f9 ffe4 	bl	8000240 <memchr>
 8006278:	b138      	cbz	r0, 800628a <_vfiprintf_r+0x176>
 800627a:	9b04      	ldr	r3, [sp, #16]
 800627c:	eba0 000a 	sub.w	r0, r0, sl
 8006280:	2240      	movs	r2, #64	@ 0x40
 8006282:	4082      	lsls	r2, r0
 8006284:	4313      	orrs	r3, r2
 8006286:	3401      	adds	r4, #1
 8006288:	9304      	str	r3, [sp, #16]
 800628a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800628e:	4829      	ldr	r0, [pc, #164]	@ (8006334 <_vfiprintf_r+0x220>)
 8006290:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006294:	2206      	movs	r2, #6
 8006296:	f7f9 ffd3 	bl	8000240 <memchr>
 800629a:	2800      	cmp	r0, #0
 800629c:	d03f      	beq.n	800631e <_vfiprintf_r+0x20a>
 800629e:	4b26      	ldr	r3, [pc, #152]	@ (8006338 <_vfiprintf_r+0x224>)
 80062a0:	bb1b      	cbnz	r3, 80062ea <_vfiprintf_r+0x1d6>
 80062a2:	9b03      	ldr	r3, [sp, #12]
 80062a4:	3307      	adds	r3, #7
 80062a6:	f023 0307 	bic.w	r3, r3, #7
 80062aa:	3308      	adds	r3, #8
 80062ac:	9303      	str	r3, [sp, #12]
 80062ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062b0:	443b      	add	r3, r7
 80062b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80062b4:	e76a      	b.n	800618c <_vfiprintf_r+0x78>
 80062b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80062ba:	460c      	mov	r4, r1
 80062bc:	2001      	movs	r0, #1
 80062be:	e7a8      	b.n	8006212 <_vfiprintf_r+0xfe>
 80062c0:	2300      	movs	r3, #0
 80062c2:	3401      	adds	r4, #1
 80062c4:	9305      	str	r3, [sp, #20]
 80062c6:	4619      	mov	r1, r3
 80062c8:	f04f 0c0a 	mov.w	ip, #10
 80062cc:	4620      	mov	r0, r4
 80062ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062d2:	3a30      	subs	r2, #48	@ 0x30
 80062d4:	2a09      	cmp	r2, #9
 80062d6:	d903      	bls.n	80062e0 <_vfiprintf_r+0x1cc>
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0c6      	beq.n	800626a <_vfiprintf_r+0x156>
 80062dc:	9105      	str	r1, [sp, #20]
 80062de:	e7c4      	b.n	800626a <_vfiprintf_r+0x156>
 80062e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80062e4:	4604      	mov	r4, r0
 80062e6:	2301      	movs	r3, #1
 80062e8:	e7f0      	b.n	80062cc <_vfiprintf_r+0x1b8>
 80062ea:	ab03      	add	r3, sp, #12
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	462a      	mov	r2, r5
 80062f0:	4b12      	ldr	r3, [pc, #72]	@ (800633c <_vfiprintf_r+0x228>)
 80062f2:	a904      	add	r1, sp, #16
 80062f4:	4630      	mov	r0, r6
 80062f6:	f7fd fc57 	bl	8003ba8 <_printf_float>
 80062fa:	4607      	mov	r7, r0
 80062fc:	1c78      	adds	r0, r7, #1
 80062fe:	d1d6      	bne.n	80062ae <_vfiprintf_r+0x19a>
 8006300:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006302:	07d9      	lsls	r1, r3, #31
 8006304:	d405      	bmi.n	8006312 <_vfiprintf_r+0x1fe>
 8006306:	89ab      	ldrh	r3, [r5, #12]
 8006308:	059a      	lsls	r2, r3, #22
 800630a:	d402      	bmi.n	8006312 <_vfiprintf_r+0x1fe>
 800630c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800630e:	f7fe f997 	bl	8004640 <__retarget_lock_release_recursive>
 8006312:	89ab      	ldrh	r3, [r5, #12]
 8006314:	065b      	lsls	r3, r3, #25
 8006316:	f53f af1f 	bmi.w	8006158 <_vfiprintf_r+0x44>
 800631a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800631c:	e71e      	b.n	800615c <_vfiprintf_r+0x48>
 800631e:	ab03      	add	r3, sp, #12
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	462a      	mov	r2, r5
 8006324:	4b05      	ldr	r3, [pc, #20]	@ (800633c <_vfiprintf_r+0x228>)
 8006326:	a904      	add	r1, sp, #16
 8006328:	4630      	mov	r0, r6
 800632a:	f7fd fec5 	bl	80040b8 <_printf_i>
 800632e:	e7e4      	b.n	80062fa <_vfiprintf_r+0x1e6>
 8006330:	08006870 	.word	0x08006870
 8006334:	0800687a 	.word	0x0800687a
 8006338:	08003ba9 	.word	0x08003ba9
 800633c:	080060f1 	.word	0x080060f1
 8006340:	08006876 	.word	0x08006876

08006344 <__swbuf_r>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	460e      	mov	r6, r1
 8006348:	4614      	mov	r4, r2
 800634a:	4605      	mov	r5, r0
 800634c:	b118      	cbz	r0, 8006356 <__swbuf_r+0x12>
 800634e:	6a03      	ldr	r3, [r0, #32]
 8006350:	b90b      	cbnz	r3, 8006356 <__swbuf_r+0x12>
 8006352:	f7fe f85d 	bl	8004410 <__sinit>
 8006356:	69a3      	ldr	r3, [r4, #24]
 8006358:	60a3      	str	r3, [r4, #8]
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	071a      	lsls	r2, r3, #28
 800635e:	d501      	bpl.n	8006364 <__swbuf_r+0x20>
 8006360:	6923      	ldr	r3, [r4, #16]
 8006362:	b943      	cbnz	r3, 8006376 <__swbuf_r+0x32>
 8006364:	4621      	mov	r1, r4
 8006366:	4628      	mov	r0, r5
 8006368:	f000 f82a 	bl	80063c0 <__swsetup_r>
 800636c:	b118      	cbz	r0, 8006376 <__swbuf_r+0x32>
 800636e:	f04f 37ff 	mov.w	r7, #4294967295
 8006372:	4638      	mov	r0, r7
 8006374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	6922      	ldr	r2, [r4, #16]
 800637a:	1a98      	subs	r0, r3, r2
 800637c:	6963      	ldr	r3, [r4, #20]
 800637e:	b2f6      	uxtb	r6, r6
 8006380:	4283      	cmp	r3, r0
 8006382:	4637      	mov	r7, r6
 8006384:	dc05      	bgt.n	8006392 <__swbuf_r+0x4e>
 8006386:	4621      	mov	r1, r4
 8006388:	4628      	mov	r0, r5
 800638a:	f7ff fd99 	bl	8005ec0 <_fflush_r>
 800638e:	2800      	cmp	r0, #0
 8006390:	d1ed      	bne.n	800636e <__swbuf_r+0x2a>
 8006392:	68a3      	ldr	r3, [r4, #8]
 8006394:	3b01      	subs	r3, #1
 8006396:	60a3      	str	r3, [r4, #8]
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	6022      	str	r2, [r4, #0]
 800639e:	701e      	strb	r6, [r3, #0]
 80063a0:	6962      	ldr	r2, [r4, #20]
 80063a2:	1c43      	adds	r3, r0, #1
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d004      	beq.n	80063b2 <__swbuf_r+0x6e>
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	07db      	lsls	r3, r3, #31
 80063ac:	d5e1      	bpl.n	8006372 <__swbuf_r+0x2e>
 80063ae:	2e0a      	cmp	r6, #10
 80063b0:	d1df      	bne.n	8006372 <__swbuf_r+0x2e>
 80063b2:	4621      	mov	r1, r4
 80063b4:	4628      	mov	r0, r5
 80063b6:	f7ff fd83 	bl	8005ec0 <_fflush_r>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d0d9      	beq.n	8006372 <__swbuf_r+0x2e>
 80063be:	e7d6      	b.n	800636e <__swbuf_r+0x2a>

080063c0 <__swsetup_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4b29      	ldr	r3, [pc, #164]	@ (8006468 <__swsetup_r+0xa8>)
 80063c4:	4605      	mov	r5, r0
 80063c6:	6818      	ldr	r0, [r3, #0]
 80063c8:	460c      	mov	r4, r1
 80063ca:	b118      	cbz	r0, 80063d4 <__swsetup_r+0x14>
 80063cc:	6a03      	ldr	r3, [r0, #32]
 80063ce:	b90b      	cbnz	r3, 80063d4 <__swsetup_r+0x14>
 80063d0:	f7fe f81e 	bl	8004410 <__sinit>
 80063d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d8:	0719      	lsls	r1, r3, #28
 80063da:	d422      	bmi.n	8006422 <__swsetup_r+0x62>
 80063dc:	06da      	lsls	r2, r3, #27
 80063de:	d407      	bmi.n	80063f0 <__swsetup_r+0x30>
 80063e0:	2209      	movs	r2, #9
 80063e2:	602a      	str	r2, [r5, #0]
 80063e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063e8:	81a3      	strh	r3, [r4, #12]
 80063ea:	f04f 30ff 	mov.w	r0, #4294967295
 80063ee:	e033      	b.n	8006458 <__swsetup_r+0x98>
 80063f0:	0758      	lsls	r0, r3, #29
 80063f2:	d512      	bpl.n	800641a <__swsetup_r+0x5a>
 80063f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063f6:	b141      	cbz	r1, 800640a <__swsetup_r+0x4a>
 80063f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063fc:	4299      	cmp	r1, r3
 80063fe:	d002      	beq.n	8006406 <__swsetup_r+0x46>
 8006400:	4628      	mov	r0, r5
 8006402:	f7fe feff 	bl	8005204 <_free_r>
 8006406:	2300      	movs	r3, #0
 8006408:	6363      	str	r3, [r4, #52]	@ 0x34
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006410:	81a3      	strh	r3, [r4, #12]
 8006412:	2300      	movs	r3, #0
 8006414:	6063      	str	r3, [r4, #4]
 8006416:	6923      	ldr	r3, [r4, #16]
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	f043 0308 	orr.w	r3, r3, #8
 8006420:	81a3      	strh	r3, [r4, #12]
 8006422:	6923      	ldr	r3, [r4, #16]
 8006424:	b94b      	cbnz	r3, 800643a <__swsetup_r+0x7a>
 8006426:	89a3      	ldrh	r3, [r4, #12]
 8006428:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800642c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006430:	d003      	beq.n	800643a <__swsetup_r+0x7a>
 8006432:	4621      	mov	r1, r4
 8006434:	4628      	mov	r0, r5
 8006436:	f000 f883 	bl	8006540 <__smakebuf_r>
 800643a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800643e:	f013 0201 	ands.w	r2, r3, #1
 8006442:	d00a      	beq.n	800645a <__swsetup_r+0x9a>
 8006444:	2200      	movs	r2, #0
 8006446:	60a2      	str	r2, [r4, #8]
 8006448:	6962      	ldr	r2, [r4, #20]
 800644a:	4252      	negs	r2, r2
 800644c:	61a2      	str	r2, [r4, #24]
 800644e:	6922      	ldr	r2, [r4, #16]
 8006450:	b942      	cbnz	r2, 8006464 <__swsetup_r+0xa4>
 8006452:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006456:	d1c5      	bne.n	80063e4 <__swsetup_r+0x24>
 8006458:	bd38      	pop	{r3, r4, r5, pc}
 800645a:	0799      	lsls	r1, r3, #30
 800645c:	bf58      	it	pl
 800645e:	6962      	ldrpl	r2, [r4, #20]
 8006460:	60a2      	str	r2, [r4, #8]
 8006462:	e7f4      	b.n	800644e <__swsetup_r+0x8e>
 8006464:	2000      	movs	r0, #0
 8006466:	e7f7      	b.n	8006458 <__swsetup_r+0x98>
 8006468:	20000018 	.word	0x20000018

0800646c <_raise_r>:
 800646c:	291f      	cmp	r1, #31
 800646e:	b538      	push	{r3, r4, r5, lr}
 8006470:	4605      	mov	r5, r0
 8006472:	460c      	mov	r4, r1
 8006474:	d904      	bls.n	8006480 <_raise_r+0x14>
 8006476:	2316      	movs	r3, #22
 8006478:	6003      	str	r3, [r0, #0]
 800647a:	f04f 30ff 	mov.w	r0, #4294967295
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006482:	b112      	cbz	r2, 800648a <_raise_r+0x1e>
 8006484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006488:	b94b      	cbnz	r3, 800649e <_raise_r+0x32>
 800648a:	4628      	mov	r0, r5
 800648c:	f000 f830 	bl	80064f0 <_getpid_r>
 8006490:	4622      	mov	r2, r4
 8006492:	4601      	mov	r1, r0
 8006494:	4628      	mov	r0, r5
 8006496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800649a:	f000 b817 	b.w	80064cc <_kill_r>
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d00a      	beq.n	80064b8 <_raise_r+0x4c>
 80064a2:	1c59      	adds	r1, r3, #1
 80064a4:	d103      	bne.n	80064ae <_raise_r+0x42>
 80064a6:	2316      	movs	r3, #22
 80064a8:	6003      	str	r3, [r0, #0]
 80064aa:	2001      	movs	r0, #1
 80064ac:	e7e7      	b.n	800647e <_raise_r+0x12>
 80064ae:	2100      	movs	r1, #0
 80064b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80064b4:	4620      	mov	r0, r4
 80064b6:	4798      	blx	r3
 80064b8:	2000      	movs	r0, #0
 80064ba:	e7e0      	b.n	800647e <_raise_r+0x12>

080064bc <raise>:
 80064bc:	4b02      	ldr	r3, [pc, #8]	@ (80064c8 <raise+0xc>)
 80064be:	4601      	mov	r1, r0
 80064c0:	6818      	ldr	r0, [r3, #0]
 80064c2:	f7ff bfd3 	b.w	800646c <_raise_r>
 80064c6:	bf00      	nop
 80064c8:	20000018 	.word	0x20000018

080064cc <_kill_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	4d07      	ldr	r5, [pc, #28]	@ (80064ec <_kill_r+0x20>)
 80064d0:	2300      	movs	r3, #0
 80064d2:	4604      	mov	r4, r0
 80064d4:	4608      	mov	r0, r1
 80064d6:	4611      	mov	r1, r2
 80064d8:	602b      	str	r3, [r5, #0]
 80064da:	f7fa fc22 	bl	8000d22 <_kill>
 80064de:	1c43      	adds	r3, r0, #1
 80064e0:	d102      	bne.n	80064e8 <_kill_r+0x1c>
 80064e2:	682b      	ldr	r3, [r5, #0]
 80064e4:	b103      	cbz	r3, 80064e8 <_kill_r+0x1c>
 80064e6:	6023      	str	r3, [r4, #0]
 80064e8:	bd38      	pop	{r3, r4, r5, pc}
 80064ea:	bf00      	nop
 80064ec:	20000484 	.word	0x20000484

080064f0 <_getpid_r>:
 80064f0:	f7fa bc0f 	b.w	8000d12 <_getpid>

080064f4 <__swhatbuf_r>:
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	460c      	mov	r4, r1
 80064f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fc:	2900      	cmp	r1, #0
 80064fe:	b096      	sub	sp, #88	@ 0x58
 8006500:	4615      	mov	r5, r2
 8006502:	461e      	mov	r6, r3
 8006504:	da0d      	bge.n	8006522 <__swhatbuf_r+0x2e>
 8006506:	89a3      	ldrh	r3, [r4, #12]
 8006508:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800650c:	f04f 0100 	mov.w	r1, #0
 8006510:	bf14      	ite	ne
 8006512:	2340      	movne	r3, #64	@ 0x40
 8006514:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006518:	2000      	movs	r0, #0
 800651a:	6031      	str	r1, [r6, #0]
 800651c:	602b      	str	r3, [r5, #0]
 800651e:	b016      	add	sp, #88	@ 0x58
 8006520:	bd70      	pop	{r4, r5, r6, pc}
 8006522:	466a      	mov	r2, sp
 8006524:	f000 f848 	bl	80065b8 <_fstat_r>
 8006528:	2800      	cmp	r0, #0
 800652a:	dbec      	blt.n	8006506 <__swhatbuf_r+0x12>
 800652c:	9901      	ldr	r1, [sp, #4]
 800652e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006532:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006536:	4259      	negs	r1, r3
 8006538:	4159      	adcs	r1, r3
 800653a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800653e:	e7eb      	b.n	8006518 <__swhatbuf_r+0x24>

08006540 <__smakebuf_r>:
 8006540:	898b      	ldrh	r3, [r1, #12]
 8006542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006544:	079d      	lsls	r5, r3, #30
 8006546:	4606      	mov	r6, r0
 8006548:	460c      	mov	r4, r1
 800654a:	d507      	bpl.n	800655c <__smakebuf_r+0x1c>
 800654c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	6123      	str	r3, [r4, #16]
 8006554:	2301      	movs	r3, #1
 8006556:	6163      	str	r3, [r4, #20]
 8006558:	b003      	add	sp, #12
 800655a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800655c:	ab01      	add	r3, sp, #4
 800655e:	466a      	mov	r2, sp
 8006560:	f7ff ffc8 	bl	80064f4 <__swhatbuf_r>
 8006564:	9f00      	ldr	r7, [sp, #0]
 8006566:	4605      	mov	r5, r0
 8006568:	4639      	mov	r1, r7
 800656a:	4630      	mov	r0, r6
 800656c:	f7fe febe 	bl	80052ec <_malloc_r>
 8006570:	b948      	cbnz	r0, 8006586 <__smakebuf_r+0x46>
 8006572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006576:	059a      	lsls	r2, r3, #22
 8006578:	d4ee      	bmi.n	8006558 <__smakebuf_r+0x18>
 800657a:	f023 0303 	bic.w	r3, r3, #3
 800657e:	f043 0302 	orr.w	r3, r3, #2
 8006582:	81a3      	strh	r3, [r4, #12]
 8006584:	e7e2      	b.n	800654c <__smakebuf_r+0xc>
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	6020      	str	r0, [r4, #0]
 800658a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800658e:	81a3      	strh	r3, [r4, #12]
 8006590:	9b01      	ldr	r3, [sp, #4]
 8006592:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006596:	b15b      	cbz	r3, 80065b0 <__smakebuf_r+0x70>
 8006598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800659c:	4630      	mov	r0, r6
 800659e:	f000 f81d 	bl	80065dc <_isatty_r>
 80065a2:	b128      	cbz	r0, 80065b0 <__smakebuf_r+0x70>
 80065a4:	89a3      	ldrh	r3, [r4, #12]
 80065a6:	f023 0303 	bic.w	r3, r3, #3
 80065aa:	f043 0301 	orr.w	r3, r3, #1
 80065ae:	81a3      	strh	r3, [r4, #12]
 80065b0:	89a3      	ldrh	r3, [r4, #12]
 80065b2:	431d      	orrs	r5, r3
 80065b4:	81a5      	strh	r5, [r4, #12]
 80065b6:	e7cf      	b.n	8006558 <__smakebuf_r+0x18>

080065b8 <_fstat_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	4d07      	ldr	r5, [pc, #28]	@ (80065d8 <_fstat_r+0x20>)
 80065bc:	2300      	movs	r3, #0
 80065be:	4604      	mov	r4, r0
 80065c0:	4608      	mov	r0, r1
 80065c2:	4611      	mov	r1, r2
 80065c4:	602b      	str	r3, [r5, #0]
 80065c6:	f7fa fc0c 	bl	8000de2 <_fstat>
 80065ca:	1c43      	adds	r3, r0, #1
 80065cc:	d102      	bne.n	80065d4 <_fstat_r+0x1c>
 80065ce:	682b      	ldr	r3, [r5, #0]
 80065d0:	b103      	cbz	r3, 80065d4 <_fstat_r+0x1c>
 80065d2:	6023      	str	r3, [r4, #0]
 80065d4:	bd38      	pop	{r3, r4, r5, pc}
 80065d6:	bf00      	nop
 80065d8:	20000484 	.word	0x20000484

080065dc <_isatty_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	4d06      	ldr	r5, [pc, #24]	@ (80065f8 <_isatty_r+0x1c>)
 80065e0:	2300      	movs	r3, #0
 80065e2:	4604      	mov	r4, r0
 80065e4:	4608      	mov	r0, r1
 80065e6:	602b      	str	r3, [r5, #0]
 80065e8:	f7fa fc0b 	bl	8000e02 <_isatty>
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d102      	bne.n	80065f6 <_isatty_r+0x1a>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	b103      	cbz	r3, 80065f6 <_isatty_r+0x1a>
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	20000484 	.word	0x20000484

080065fc <_init>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	bf00      	nop
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr

08006608 <_fini>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	bf00      	nop
 800660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660e:	bc08      	pop	{r3}
 8006610:	469e      	mov	lr, r3
 8006612:	4770      	bx	lr
