
Lab06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080043b4  080043b4  000053b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800440c  0800440c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800440c  0800440c  0000540c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004414  08004414  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004414  08004414  00005414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004418  08004418  00005418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800441c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  08004478  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08004478  000062ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f676  00000000  00000000  0000608a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000218c  00000000  00000000  00015700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00017890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a51  00000000  00000000  000185d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002821f  00000000  00000000  00019021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011726  00000000  00000000  00041240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb557  00000000  00000000  00052966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014debd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bbc  00000000  00000000  0014df00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00151abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800439c 	.word	0x0800439c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	0800439c 	.word	0x0800439c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <MX_GPIO_Init+0x2c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a08      	ldr	r2, [pc, #32]	@ (800060c <MX_GPIO_Init+0x2c>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b06      	ldr	r3, [pc, #24]	@ (800060c <MX_GPIO_Init+0x2c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800

08000610 <displayTime>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void displayTime(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
    char timeStr[10];
    sprintf(timeStr, "%02d:%02d\r", minutes, seconds);
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <displayTime+0x38>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <displayTime+0x3c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	1d38      	adds	r0, r7, #4
 8000622:	490b      	ldr	r1, [pc, #44]	@ (8000650 <displayTime+0x40>)
 8000624:	f003 fa1a 	bl	8003a5c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)timeStr, strlen(timeStr), 100);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fe08 	bl	8000240 <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	b29a      	uxth	r2, r3
 8000634:	1d39      	adds	r1, r7, #4
 8000636:	2364      	movs	r3, #100	@ 0x64
 8000638:	4806      	ldr	r0, [pc, #24]	@ (8000654 <displayTime+0x44>)
 800063a:	f002 fd05 	bl	8003048 <HAL_UART_Transmit>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000078 	.word	0x20000078
 800064c:	20000079 	.word	0x20000079
 8000650:	080043b4 	.word	0x080043b4
 8000654:	20000118 	.word	0x20000118

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800065c:	f000 f886 	bl	800076c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f000 fb3f 	bl	8000ce2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f814 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f7ff ffba 	bl	80005e0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800066c:	f000 f99e 	bl	80009ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8000670:	f000 f9f0 	bl	8000a54 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000674:	f000 fa7c 	bl	8000b70 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <main+0x30>)
 800067a:	f002 f829 	bl	80026d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800067e:	4803      	ldr	r0, [pc, #12]	@ (800068c <main+0x34>)
 8000680:	f002 f826 	bl	80026d0 <HAL_TIM_Base_Start_IT>
//  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <main+0x2c>
 8000688:	20000080 	.word	0x20000080
 800068c:	200000cc 	.word	0x200000cc

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	@ 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	@ 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 f9fc 	bl	8003a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000764 <SystemClock_Config+0xd4>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	4a2a      	ldr	r2, [pc, #168]	@ (8000764 <SystemClock_Config+0xd4>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c0:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <SystemClock_Config+0xd4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <SystemClock_Config+0xd8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a25      	ldr	r2, [pc, #148]	@ (8000768 <SystemClock_Config+0xd8>)
 80006d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <SystemClock_Config+0xd8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f8:	2308      	movs	r3, #8
 80006fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006fc:	23d8      	movs	r3, #216	@ 0xd8
 80006fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fec9 	bl	80014a8 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800071c:	f000 f852 	bl	80007c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000720:	f000 fe72 	bl	8001408 <HAL_PWREx_EnableOverDrive>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800072a:	f000 f84b 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000744:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	2107      	movs	r1, #7
 800074c:	4618      	mov	r0, r3
 800074e:	f001 f959 	bl	8001a04 <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000758:	f000 f834 	bl	80007c4 <Error_Handler>
  }
}
 800075c:	bf00      	nop
 800075e:	3750      	adds	r7, #80	@ 0x50
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000772:	463b      	mov	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800077e:	f000 fc1f 	bl	8000fc0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000782:	2301      	movs	r3, #1
 8000784:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000786:	2300      	movs	r3, #0
 8000788:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800078e:	231f      	movs	r3, #31
 8000790:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000792:	2387      	movs	r3, #135	@ 0x87
 8000794:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000796:	2300      	movs	r3, #0
 8000798:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800079a:	2300      	movs	r3, #0
 800079c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800079e:	2301      	movs	r3, #1
 80007a0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007a2:	2301      	movs	r3, #1
 80007a4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007ae:	463b      	mov	r3, r7
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 fc3d 	bl	8001030 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007b6:	2004      	movs	r0, #4
 80007b8:	f000 fc1a 	bl	8000ff0 <HAL_MPU_Enable>

}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <Error_Handler+0x8>

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <HAL_MspInit+0x44>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007da:	4a0e      	ldr	r2, [pc, #56]	@ (8000814 <HAL_MspInit+0x44>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <HAL_MspInit+0x44>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <HAL_MspInit+0x44>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f2:	4a08      	ldr	r2, [pc, #32]	@ (8000814 <HAL_MspInit+0x44>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_MspInit+0x44>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000806:	2005      	movs	r0, #5
 8000808:	f000 fb98 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <NMI_Handler+0x4>

08000820 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <MemManage_Handler+0x4>

08000830 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <UsageFault_Handler+0x4>

08000840 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086e:	f000 fa75 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
    if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_UPDATE) != RESET)
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	691b      	ldr	r3, [r3, #16]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	2b01      	cmp	r3, #1
 8000888:	d11e      	bne.n	80008c8 <TIM1_UP_TIM10_IRQHandler+0x50>
    {
        if (__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_UPDATE) != RESET)
 800088a:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	2b01      	cmp	r3, #1
 8000896:	d117      	bne.n	80008c8 <TIM1_UP_TIM10_IRQHandler+0x50>
        {
            __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8000898:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f06f 0201 	mvn.w	r2, #1
 80008a0:	611a      	str	r2, [r3, #16]

            seconds++;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <TIM1_UP_TIM10_IRQHandler+0x60>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	3301      	adds	r3, #1
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <TIM1_UP_TIM10_IRQHandler+0x60>)
 80008ac:	701a      	strb	r2, [r3, #0]
            if (seconds >= 60)
 80008ae:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <TIM1_UP_TIM10_IRQHandler+0x60>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b3b      	cmp	r3, #59	@ 0x3b
 80008b4:	d908      	bls.n	80008c8 <TIM1_UP_TIM10_IRQHandler+0x50>
            {
                seconds = 0;
 80008b6:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <TIM1_UP_TIM10_IRQHandler+0x60>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
                minutes++;
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <TIM1_UP_TIM10_IRQHandler+0x64>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	3301      	adds	r3, #1
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <TIM1_UP_TIM10_IRQHandler+0x64>)
 80008c6:	701a      	strb	r2, [r3, #0]
            }
        }
    }
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
	 HAL_TIM_IRQHandler(&htim1);
 80008c8:	4802      	ldr	r0, [pc, #8]	@ (80008d4 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 80008ca:	f001 ff79 	bl	80027c0 <HAL_TIM_IRQHandler>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000080 	.word	0x20000080
 80008d8:	20000079 	.word	0x20000079
 80008dc:	20000078 	.word	0x20000078

080008e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET)
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <TIM2_IRQHandler+0x38>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10d      	bne.n	800090e <TIM2_IRQHandler+0x2e>
	     {
	         if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET)
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <TIM2_IRQHandler+0x38>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d106      	bne.n	800090e <TIM2_IRQHandler+0x2e>
	         {
	             __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000900:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <TIM2_IRQHandler+0x38>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f06f 0201 	mvn.w	r2, #1
 8000908:	611a      	str	r2, [r3, #16]
	             displayTime();
 800090a:	f7ff fe81 	bl	8000610 <displayTime>
	         }
	     }
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */
	  HAL_TIM_IRQHandler(&htim2);
 800090e:	4802      	ldr	r0, [pc, #8]	@ (8000918 <TIM2_IRQHandler+0x38>)
 8000910:	f001 ff56 	bl	80027c0 <HAL_TIM_IRQHandler>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200000cc 	.word	0x200000cc

0800091c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000924:	4a14      	ldr	r2, [pc, #80]	@ (8000978 <_sbrk+0x5c>)
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <_sbrk+0x60>)
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000930:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d102      	bne.n	800093e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <_sbrk+0x64>)
 800093a:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <_sbrk+0x68>)
 800093c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	429a      	cmp	r2, r3
 800094a:	d207      	bcs.n	800095c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800094c:	f003 f8ae 	bl	8003aac <__errno>
 8000950:	4603      	mov	r3, r0
 8000952:	220c      	movs	r2, #12
 8000954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	e009      	b.n	8000970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000962:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	4a05      	ldr	r2, [pc, #20]	@ (8000980 <_sbrk+0x64>)
 800096c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096e:	68fb      	ldr	r3, [r7, #12]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20080000 	.word	0x20080000
 800097c:	00000400 	.word	0x00000400
 8000980:	2000007c 	.word	0x2000007c
 8000984:	200002f0 	.word	0x200002f0

08000988 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <SystemInit+0x20>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000992:	4a05      	ldr	r2, [pc, #20]	@ (80009a8 <SystemInit+0x20>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b2:	f107 0310 	add.w	r3, r7, #16
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ca:	4b20      	ldr	r3, [pc, #128]	@ (8000a4c <MX_TIM1_Init+0xa0>)
 80009cc:	4a20      	ldr	r2, [pc, #128]	@ (8000a50 <MX_TIM1_Init+0xa4>)
 80009ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10800-1;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a4c <MX_TIM1_Init+0xa0>)
 80009d2:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 80009d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a4c <MX_TIM1_Init+0xa0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80009de:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <MX_TIM1_Init+0xa0>)
 80009e0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e6:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <MX_TIM1_Init+0xa0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ec:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <MX_TIM1_Init+0xa0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f2:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <MX_TIM1_Init+0xa0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009f8:	4814      	ldr	r0, [pc, #80]	@ (8000a4c <MX_TIM1_Init+0xa0>)
 80009fa:	f001 fe11 	bl	8002620 <HAL_TIM_Base_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000a04:	f7ff fede 	bl	80007c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	4619      	mov	r1, r3
 8000a14:	480d      	ldr	r0, [pc, #52]	@ (8000a4c <MX_TIM1_Init+0xa0>)
 8000a16:	f001 ffdb 	bl	80029d0 <HAL_TIM_ConfigClockSource>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000a20:	f7ff fed0 	bl	80007c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <MX_TIM1_Init+0xa0>)
 8000a36:	f002 fa0d 	bl	8002e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a40:	f7ff fec0 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000080 	.word	0x20000080
 8000a50:	40010000 	.word	0x40010000

08000a54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a72:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <MX_TIM2_Init+0x98>)
 8000a74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 13500-1;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <MX_TIM2_Init+0x98>)
 8000a7c:	f243 42bb 	movw	r2, #13499	@ 0x34bb
 8000a80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <MX_TIM2_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8000a88:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <MX_TIM2_Init+0x98>)
 8000a8a:	f240 128f 	movw	r2, #399	@ 0x18f
 8000a8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a90:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <MX_TIM2_Init+0x98>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <MX_TIM2_Init+0x98>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a9c:	4813      	ldr	r0, [pc, #76]	@ (8000aec <MX_TIM2_Init+0x98>)
 8000a9e:	f001 fdbf 	bl	8002620 <HAL_TIM_Base_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000aa8:	f7ff fe8c 	bl	80007c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480c      	ldr	r0, [pc, #48]	@ (8000aec <MX_TIM2_Init+0x98>)
 8000aba:	f001 ff89 	bl	80029d0 <HAL_TIM_ConfigClockSource>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000ac4:	f7ff fe7e 	bl	80007c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	@ (8000aec <MX_TIM2_Init+0x98>)
 8000ad6:	f002 f9bd 	bl	8002e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ae0:	f7ff fe70 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200000cc 	.word	0x200000cc

08000af0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b68 <HAL_TIM_Base_MspInit+0x78>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d114      	bne.n	8000b2c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <HAL_TIM_Base_MspInit+0x7c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	4a19      	ldr	r2, [pc, #100]	@ (8000b6c <HAL_TIM_Base_MspInit+0x7c>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <HAL_TIM_Base_MspInit+0x7c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	2019      	movs	r0, #25
 8000b20:	f000 fa17 	bl	8000f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b24:	2019      	movs	r0, #25
 8000b26:	f000 fa30 	bl	8000f8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b2a:	e018      	b.n	8000b5e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b34:	d113      	bne.n	8000b5e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b36:	4b0d      	ldr	r3, [pc, #52]	@ (8000b6c <HAL_TIM_Base_MspInit+0x7c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b6c <HAL_TIM_Base_MspInit+0x7c>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b42:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <HAL_TIM_Base_MspInit+0x7c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2102      	movs	r1, #2
 8000b52:	201c      	movs	r0, #28
 8000b54:	f000 f9fd 	bl	8000f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b58:	201c      	movs	r0, #28
 8000b5a:	f000 fa16 	bl	8000f8a <HAL_NVIC_EnableIRQ>
}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40010000 	.word	0x40010000
 8000b6c:	40023800 	.word	0x40023800

08000b70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b74:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b76:	4a15      	ldr	r2, [pc, #84]	@ (8000bcc <MX_USART3_UART_Init+0x5c>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000bb4:	f002 f9fa 	bl	8002fac <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bbe:	f7ff fe01 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000118 	.word	0x20000118
 8000bcc:	40004800 	.word	0x40004800

08000bd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b0ae      	sub	sp, #184	@ 0xb8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2290      	movs	r2, #144	@ 0x90
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f002 ff53 	bl	8003a9c <memset>
  if(uartHandle->Instance==USART3)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a22      	ldr	r2, [pc, #136]	@ (8000c84 <HAL_UART_MspInit+0xb4>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d13c      	bne.n	8000c7a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c04:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 f8de 	bl	8001dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c1a:	f7ff fdd3 	bl	80007c4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <HAL_UART_MspInit+0xb8>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	4a19      	ldr	r2, [pc, #100]	@ (8000c88 <HAL_UART_MspInit+0xb8>)
 8000c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2a:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <HAL_UART_MspInit+0xb8>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <HAL_UART_MspInit+0xb8>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a13      	ldr	r2, [pc, #76]	@ (8000c88 <HAL_UART_MspInit+0xb8>)
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <HAL_UART_MspInit+0xb8>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0308 	and.w	r3, r3, #8
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <HAL_UART_MspInit+0xbc>)
 8000c76:	f000 fa1b 	bl	80010b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	37b8      	adds	r7, #184	@ 0xb8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40004800 	.word	0x40004800
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020c00 	.word	0x40020c00

08000c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c94:	f7ff fe78 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	@ (8000cd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f002 fefb 	bl	8003ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc2:	f7ff fcc9 	bl	8000658 <main>
  bx  lr    
 8000cc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cd4:	0800441c 	.word	0x0800441c
  ldr r2, =_sbss
 8000cd8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cdc:	200002ec 	.word	0x200002ec

08000ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC_IRQHandler>

08000ce2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce6:	2003      	movs	r0, #3
 8000ce8:	f000 f928 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f000 f805 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf2:	f7ff fd6d 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f943 	bl	8000fa6 <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 f90b 	bl	8000f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	@ (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	200001a0 	.word	0x200001a0

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	@ (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	200001a0 	.word	0x200001a0

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x40>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x40>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00
 8000de0:	05fa0000 	.word	0x05fa0000

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db0b      	blt.n	8000e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	f003 021f 	and.w	r2, r3, #31
 8000e18:	4907      	ldr	r1, [pc, #28]	@ (8000e38 <__NVIC_EnableIRQ+0x38>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	2001      	movs	r0, #1
 8000e22:	fa00 f202 	lsl.w	r2, r0, r2
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	@ (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	@ (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	@ 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	@ 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f08:	d301      	bcc.n	8000f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00f      	b.n	8000f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <SysTick_Config+0x40>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f16:	210f      	movs	r1, #15
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f7ff ff8e 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <SysTick_Config+0x40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f26:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <SysTick_Config+0x40>)
 8000f28:	2207      	movs	r2, #7
 8000f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	e000e010 	.word	0xe000e010

08000f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff29 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f64:	f7ff ff3e 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	f7ff ff8e 	bl	8000e90 <NVIC_EncodePriority>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff5d 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff31 	bl	8000e00 <__NVIC_EnableIRQ>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffa2 	bl	8000ef8 <SysTick_Config>
 8000fb4:	4603      	mov	r3, r0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000fc4:	f3bf 8f5f 	dmb	sy
}
 8000fc8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <HAL_MPU_Disable+0x28>)
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fce:	4a06      	ldr	r2, [pc, #24]	@ (8000fe8 <HAL_MPU_Disable+0x28>)
 8000fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fd4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000fd6:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <HAL_MPU_Disable+0x2c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	605a      	str	r2, [r3, #4]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00
 8000fec:	e000ed90 	.word	0xe000ed90

08000ff0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <HAL_MPU_Enable+0x38>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <HAL_MPU_Enable+0x3c>)
 8001004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001006:	4a09      	ldr	r2, [pc, #36]	@ (800102c <HAL_MPU_Enable+0x3c>)
 8001008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800100c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800100e:	f3bf 8f4f 	dsb	sy
}
 8001012:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001014:	f3bf 8f6f 	isb	sy
}
 8001018:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed90 	.word	0xe000ed90
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	785a      	ldrb	r2, [r3, #1]
 800103c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <HAL_MPU_ConfigRegion+0x7c>)
 800103e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <HAL_MPU_ConfigRegion+0x7c>)
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	4a19      	ldr	r2, [pc, #100]	@ (80010ac <HAL_MPU_ConfigRegion+0x7c>)
 8001046:	f023 0301 	bic.w	r3, r3, #1
 800104a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800104c:	4a17      	ldr	r2, [pc, #92]	@ (80010ac <HAL_MPU_ConfigRegion+0x7c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7b1b      	ldrb	r3, [r3, #12]
 8001058:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7adb      	ldrb	r3, [r3, #11]
 800105e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001060:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7a9b      	ldrb	r3, [r3, #10]
 8001066:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001068:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7b5b      	ldrb	r3, [r3, #13]
 800106e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001070:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7b9b      	ldrb	r3, [r3, #14]
 8001076:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001078:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7bdb      	ldrb	r3, [r3, #15]
 800107e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001080:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7a5b      	ldrb	r3, [r3, #9]
 8001086:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001088:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7a1b      	ldrb	r3, [r3, #8]
 800108e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001090:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	7812      	ldrb	r2, [r2, #0]
 8001096:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001098:	4a04      	ldr	r2, [pc, #16]	@ (80010ac <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800109a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800109c:	6113      	str	r3, [r2, #16]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed90 	.word	0xe000ed90

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	@ 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	e175      	b.n	80013bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	f040 8164 	bne.w	80013b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d005      	beq.n	8001106 <HAL_GPIO_Init+0x56>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d130      	bne.n	8001168 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	f003 0201 	and.w	r2, r3, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b03      	cmp	r3, #3
 8001172:	d017      	beq.n	80011a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d123      	bne.n	80011f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	08da      	lsrs	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3208      	adds	r2, #8
 80011b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	08da      	lsrs	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3208      	adds	r2, #8
 80011f2:	69b9      	ldr	r1, [r7, #24]
 80011f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0203 	and.w	r2, r3, #3
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 80be 	beq.w	80013b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	4b66      	ldr	r3, [pc, #408]	@ (80013d4 <HAL_GPIO_Init+0x324>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	4a65      	ldr	r2, [pc, #404]	@ (80013d4 <HAL_GPIO_Init+0x324>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001244:	6453      	str	r3, [r2, #68]	@ 0x44
 8001246:	4b63      	ldr	r3, [pc, #396]	@ (80013d4 <HAL_GPIO_Init+0x324>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001252:	4a61      	ldr	r2, [pc, #388]	@ (80013d8 <HAL_GPIO_Init+0x328>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a58      	ldr	r2, [pc, #352]	@ (80013dc <HAL_GPIO_Init+0x32c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d037      	beq.n	80012ee <HAL_GPIO_Init+0x23e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a57      	ldr	r2, [pc, #348]	@ (80013e0 <HAL_GPIO_Init+0x330>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d031      	beq.n	80012ea <HAL_GPIO_Init+0x23a>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a56      	ldr	r2, [pc, #344]	@ (80013e4 <HAL_GPIO_Init+0x334>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d02b      	beq.n	80012e6 <HAL_GPIO_Init+0x236>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a55      	ldr	r2, [pc, #340]	@ (80013e8 <HAL_GPIO_Init+0x338>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d025      	beq.n	80012e2 <HAL_GPIO_Init+0x232>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a54      	ldr	r2, [pc, #336]	@ (80013ec <HAL_GPIO_Init+0x33c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d01f      	beq.n	80012de <HAL_GPIO_Init+0x22e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a53      	ldr	r2, [pc, #332]	@ (80013f0 <HAL_GPIO_Init+0x340>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d019      	beq.n	80012da <HAL_GPIO_Init+0x22a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a52      	ldr	r2, [pc, #328]	@ (80013f4 <HAL_GPIO_Init+0x344>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d013      	beq.n	80012d6 <HAL_GPIO_Init+0x226>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a51      	ldr	r2, [pc, #324]	@ (80013f8 <HAL_GPIO_Init+0x348>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00d      	beq.n	80012d2 <HAL_GPIO_Init+0x222>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a50      	ldr	r2, [pc, #320]	@ (80013fc <HAL_GPIO_Init+0x34c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d007      	beq.n	80012ce <HAL_GPIO_Init+0x21e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001400 <HAL_GPIO_Init+0x350>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d101      	bne.n	80012ca <HAL_GPIO_Init+0x21a>
 80012c6:	2309      	movs	r3, #9
 80012c8:	e012      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012ca:	230a      	movs	r3, #10
 80012cc:	e010      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012ce:	2308      	movs	r3, #8
 80012d0:	e00e      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012d2:	2307      	movs	r3, #7
 80012d4:	e00c      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012d6:	2306      	movs	r3, #6
 80012d8:	e00a      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012da:	2305      	movs	r3, #5
 80012dc:	e008      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012de:	2304      	movs	r3, #4
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012e2:	2303      	movs	r3, #3
 80012e4:	e004      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012ee:	2300      	movs	r3, #0
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	f002 0203 	and.w	r2, r2, #3
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	4093      	lsls	r3, r2
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001300:	4935      	ldr	r1, [pc, #212]	@ (80013d8 <HAL_GPIO_Init+0x328>)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130e:	4b3d      	ldr	r3, [pc, #244]	@ (8001404 <HAL_GPIO_Init+0x354>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001332:	4a34      	ldr	r2, [pc, #208]	@ (8001404 <HAL_GPIO_Init+0x354>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001338:	4b32      	ldr	r3, [pc, #200]	@ (8001404 <HAL_GPIO_Init+0x354>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800135c:	4a29      	ldr	r2, [pc, #164]	@ (8001404 <HAL_GPIO_Init+0x354>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001362:	4b28      	ldr	r3, [pc, #160]	@ (8001404 <HAL_GPIO_Init+0x354>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001386:	4a1f      	ldr	r2, [pc, #124]	@ (8001404 <HAL_GPIO_Init+0x354>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138c:	4b1d      	ldr	r3, [pc, #116]	@ (8001404 <HAL_GPIO_Init+0x354>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b0:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <HAL_GPIO_Init+0x354>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3301      	adds	r3, #1
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	f67f ae86 	bls.w	80010d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3724      	adds	r7, #36	@ 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40013800 	.word	0x40013800
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40020800 	.word	0x40020800
 80013e8:	40020c00 	.word	0x40020c00
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40021400 	.word	0x40021400
 80013f4:	40021800 	.word	0x40021800
 80013f8:	40021c00 	.word	0x40021c00
 80013fc:	40022000 	.word	0x40022000
 8001400:	40022400 	.word	0x40022400
 8001404:	40013c00 	.word	0x40013c00

08001408 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	4b23      	ldr	r3, [pc, #140]	@ (80014a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a22      	ldr	r2, [pc, #136]	@ (80014a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800142a:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a1d      	ldr	r2, [pc, #116]	@ (80014a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001434:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001436:	f7ff fca5 	bl	8000d84 <HAL_GetTick>
 800143a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800143c:	e009      	b.n	8001452 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800143e:	f7ff fca1 	bl	8000d84 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800144c:	d901      	bls.n	8001452 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e022      	b.n	8001498 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001452:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800145a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800145e:	d1ee      	bne.n	800143e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001460:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0f      	ldr	r2, [pc, #60]	@ (80014a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800146a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800146c:	f7ff fc8a 	bl	8000d84 <HAL_GetTick>
 8001470:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001472:	e009      	b.n	8001488 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001474:	f7ff fc86 	bl	8000d84 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001482:	d901      	bls.n	8001488 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e007      	b.n	8001498 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001490:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001494:	d1ee      	bne.n	8001474 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000

080014a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e29b      	b.n	80019f6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8087 	beq.w	80015da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014cc:	4b96      	ldr	r3, [pc, #600]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d00c      	beq.n	80014f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d8:	4b93      	ldr	r3, [pc, #588]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 030c 	and.w	r3, r3, #12
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d112      	bne.n	800150a <HAL_RCC_OscConfig+0x62>
 80014e4:	4b90      	ldr	r3, [pc, #576]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014f0:	d10b      	bne.n	800150a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f2:	4b8d      	ldr	r3, [pc, #564]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d06c      	beq.n	80015d8 <HAL_RCC_OscConfig+0x130>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d168      	bne.n	80015d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e275      	b.n	80019f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x7a>
 8001514:	4b84      	ldr	r3, [pc, #528]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a83      	ldr	r2, [pc, #524]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 800151a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	e02e      	b.n	8001580 <HAL_RCC_OscConfig+0xd8>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x9c>
 800152a:	4b7f      	ldr	r3, [pc, #508]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a7e      	ldr	r2, [pc, #504]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b7c      	ldr	r3, [pc, #496]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a7b      	ldr	r2, [pc, #492]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 800153c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e01d      	b.n	8001580 <HAL_RCC_OscConfig+0xd8>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0xc0>
 800154e:	4b76      	ldr	r3, [pc, #472]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a75      	ldr	r2, [pc, #468]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b73      	ldr	r3, [pc, #460]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a72      	ldr	r2, [pc, #456]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e00b      	b.n	8001580 <HAL_RCC_OscConfig+0xd8>
 8001568:	4b6f      	ldr	r3, [pc, #444]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a6e      	ldr	r2, [pc, #440]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 800156e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b6c      	ldr	r3, [pc, #432]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a6b      	ldr	r2, [pc, #428]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 800157a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800157e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fbfc 	bl	8000d84 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fbf8 	bl	8000d84 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	@ 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e229      	b.n	80019f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	4b61      	ldr	r3, [pc, #388]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0xe8>
 80015ae:	e014      	b.n	80015da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fbe8 	bl	8000d84 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fbe4 	bl	8000d84 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	@ 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e215      	b.n	80019f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ca:	4b57      	ldr	r3, [pc, #348]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x110>
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d069      	beq.n	80016ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015e6:	4b50      	ldr	r3, [pc, #320]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00b      	beq.n	800160a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d11c      	bne.n	8001638 <HAL_RCC_OscConfig+0x190>
 80015fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d116      	bne.n	8001638 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160a:	4b47      	ldr	r3, [pc, #284]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <HAL_RCC_OscConfig+0x17a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e1e9      	b.n	80019f6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001622:	4b41      	ldr	r3, [pc, #260]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	493d      	ldr	r1, [pc, #244]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001636:	e040      	b.n	80016ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d023      	beq.n	8001688 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001640:	4b39      	ldr	r3, [pc, #228]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a38      	ldr	r2, [pc, #224]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fb9a 	bl	8000d84 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001654:	f7ff fb96 	bl	8000d84 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e1c7      	b.n	80019f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001666:	4b30      	ldr	r3, [pc, #192]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b2d      	ldr	r3, [pc, #180]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4929      	ldr	r1, [pc, #164]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
 8001686:	e018      	b.n	80016ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a26      	ldr	r2, [pc, #152]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 800168e:	f023 0301 	bic.w	r3, r3, #1
 8001692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff fb76 	bl	8000d84 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169c:	f7ff fb72 	bl	8000d84 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e1a3      	b.n	80019f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d038      	beq.n	8001738 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d019      	beq.n	8001702 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ce:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 80016d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016d2:	4a15      	ldr	r2, [pc, #84]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016da:	f7ff fb53 	bl	8000d84 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e2:	f7ff fb4f 	bl	8000d84 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e180      	b.n	80019f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 80016f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x23a>
 8001700:	e01a      	b.n	8001738 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001706:	4a08      	ldr	r2, [pc, #32]	@ (8001728 <HAL_RCC_OscConfig+0x280>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170e:	f7ff fb39 	bl	8000d84 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001714:	e00a      	b.n	800172c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001716:	f7ff fb35 	bl	8000d84 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d903      	bls.n	800172c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e166      	b.n	80019f6 <HAL_RCC_OscConfig+0x54e>
 8001728:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172c:	4b92      	ldr	r3, [pc, #584]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 800172e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1ee      	bne.n	8001716 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80a4 	beq.w	800188e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001746:	4b8c      	ldr	r3, [pc, #560]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10d      	bne.n	800176e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	4b89      	ldr	r3, [pc, #548]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	4a88      	ldr	r2, [pc, #544]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800175c:	6413      	str	r3, [r2, #64]	@ 0x40
 800175e:	4b86      	ldr	r3, [pc, #536]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176a:	2301      	movs	r3, #1
 800176c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176e:	4b83      	ldr	r3, [pc, #524]	@ (800197c <HAL_RCC_OscConfig+0x4d4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001776:	2b00      	cmp	r3, #0
 8001778:	d118      	bne.n	80017ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800177a:	4b80      	ldr	r3, [pc, #512]	@ (800197c <HAL_RCC_OscConfig+0x4d4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a7f      	ldr	r2, [pc, #508]	@ (800197c <HAL_RCC_OscConfig+0x4d4>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001786:	f7ff fafd 	bl	8000d84 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178e:	f7ff faf9 	bl	8000d84 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b64      	cmp	r3, #100	@ 0x64
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e12a      	b.n	80019f6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a0:	4b76      	ldr	r3, [pc, #472]	@ (800197c <HAL_RCC_OscConfig+0x4d4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x31a>
 80017b4:	4b70      	ldr	r3, [pc, #448]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b8:	4a6f      	ldr	r2, [pc, #444]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c0:	e02d      	b.n	800181e <HAL_RCC_OscConfig+0x376>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x33c>
 80017ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ce:	4a6a      	ldr	r2, [pc, #424]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d6:	4b68      	ldr	r3, [pc, #416]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 80017d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017da:	4a67      	ldr	r2, [pc, #412]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e2:	e01c      	b.n	800181e <HAL_RCC_OscConfig+0x376>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d10c      	bne.n	8001806 <HAL_RCC_OscConfig+0x35e>
 80017ec:	4b62      	ldr	r3, [pc, #392]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f0:	4a61      	ldr	r2, [pc, #388]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fc:	4a5e      	ldr	r2, [pc, #376]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6713      	str	r3, [r2, #112]	@ 0x70
 8001804:	e00b      	b.n	800181e <HAL_RCC_OscConfig+0x376>
 8001806:	4b5c      	ldr	r3, [pc, #368]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180a:	4a5b      	ldr	r2, [pc, #364]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6713      	str	r3, [r2, #112]	@ 0x70
 8001812:	4b59      	ldr	r3, [pc, #356]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001816:	4a58      	ldr	r2, [pc, #352]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 8001818:	f023 0304 	bic.w	r3, r3, #4
 800181c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d015      	beq.n	8001852 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001826:	f7ff faad 	bl	8000d84 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182c:	e00a      	b.n	8001844 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7ff faa9 	bl	8000d84 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183c:	4293      	cmp	r3, r2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e0d8      	b.n	80019f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001844:	4b4c      	ldr	r3, [pc, #304]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 8001846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0ee      	beq.n	800182e <HAL_RCC_OscConfig+0x386>
 8001850:	e014      	b.n	800187c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff fa97 	bl	8000d84 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff fa93 	bl	8000d84 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e0c2      	b.n	80019f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001870:	4b41      	ldr	r3, [pc, #260]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 8001872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1ee      	bne.n	800185a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d105      	bne.n	800188e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001882:	4b3d      	ldr	r3, [pc, #244]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	4a3c      	ldr	r2, [pc, #240]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 8001888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800188c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 80ae 	beq.w	80019f4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001898:	4b37      	ldr	r3, [pc, #220]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d06d      	beq.n	8001980 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d14b      	bne.n	8001944 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ac:	4b32      	ldr	r3, [pc, #200]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a31      	ldr	r2, [pc, #196]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 80018b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff fa64 	bl	8000d84 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff fa60 	bl	8000d84 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e091      	b.n	80019f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d2:	4b29      	ldr	r3, [pc, #164]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69da      	ldr	r2, [r3, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	019b      	lsls	r3, r3, #6
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	3b01      	subs	r3, #1
 80018f8:	041b      	lsls	r3, r3, #16
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001900:	061b      	lsls	r3, r3, #24
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001908:	071b      	lsls	r3, r3, #28
 800190a:	491b      	ldr	r1, [pc, #108]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 800190c:	4313      	orrs	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001910:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a18      	ldr	r2, [pc, #96]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 8001916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800191a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff fa32 	bl	8000d84 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001924:	f7ff fa2e 	bl	8000d84 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e05f      	b.n	80019f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x47c>
 8001942:	e057      	b.n	80019f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0b      	ldr	r2, [pc, #44]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 800194a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800194e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff fa18 	bl	8000d84 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff fa14 	bl	8000d84 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e045      	b.n	80019f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <HAL_RCC_OscConfig+0x4d0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x4b0>
 8001976:	e03d      	b.n	80019f4 <HAL_RCC_OscConfig+0x54c>
 8001978:	40023800 	.word	0x40023800
 800197c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001980:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <HAL_RCC_OscConfig+0x558>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d030      	beq.n	80019f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d129      	bne.n	80019f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d122      	bne.n	80019f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019b0:	4013      	ands	r3, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d119      	bne.n	80019f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c6:	085b      	lsrs	r3, r3, #1
 80019c8:	3b01      	subs	r3, #1
 80019ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d10f      	bne.n	80019f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d107      	bne.n	80019f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800

08001a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0d0      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d910      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b67      	ldr	r3, [pc, #412]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 020f 	bic.w	r2, r3, #15
 8001a32:	4965      	ldr	r1, [pc, #404]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b63      	ldr	r3, [pc, #396]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0b8      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a64:	4b59      	ldr	r3, [pc, #356]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a58      	ldr	r2, [pc, #352]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001a6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a7c:	4b53      	ldr	r3, [pc, #332]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a52      	ldr	r2, [pc, #328]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001a82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b50      	ldr	r3, [pc, #320]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	494d      	ldr	r1, [pc, #308]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d040      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b47      	ldr	r3, [pc, #284]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d115      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e07f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac6:	4b41      	ldr	r3, [pc, #260]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e073      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e06b      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae6:	4b39      	ldr	r3, [pc, #228]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f023 0203 	bic.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4936      	ldr	r1, [pc, #216]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af8:	f7ff f944 	bl	8000d84 <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7ff f940 	bl	8000d84 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e053      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	4b2d      	ldr	r3, [pc, #180]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 020c 	and.w	r2, r3, #12
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1eb      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b28:	4b27      	ldr	r3, [pc, #156]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d210      	bcs.n	8001b58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b24      	ldr	r3, [pc, #144]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 020f 	bic.w	r2, r3, #15
 8001b3e:	4922      	ldr	r1, [pc, #136]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e032      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b64:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4916      	ldr	r1, [pc, #88]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b82:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	490e      	ldr	r1, [pc, #56]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b96:	f000 f821 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	490a      	ldr	r1, [pc, #40]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1cc>)
 8001ba8:	5ccb      	ldrb	r3, [r1, r3]
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	4a09      	ldr	r2, [pc, #36]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1d0>)
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bb2:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1d4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f8a0 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023c00 	.word	0x40023c00
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	080043c0 	.word	0x080043c0
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000004 	.word	0x20000004

08001bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be0:	b090      	sub	sp, #64	@ 0x40
 8001be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001be8:	2300      	movs	r3, #0
 8001bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bec:	2300      	movs	r3, #0
 8001bee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf4:	4b59      	ldr	r3, [pc, #356]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d00d      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x40>
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	f200 80a1 	bhi.w	8001d48 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x34>
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c0e:	e09b      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c10:	4b53      	ldr	r3, [pc, #332]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c14:	e09b      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c16:	4b53      	ldr	r3, [pc, #332]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c1a:	e098      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c24:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c26:	4b4d      	ldr	r3, [pc, #308]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d028      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c32:	4b4a      	ldr	r3, [pc, #296]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	099b      	lsrs	r3, r3, #6
 8001c38:	2200      	movs	r2, #0
 8001c3a:	623b      	str	r3, [r7, #32]
 8001c3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c44:	2100      	movs	r1, #0
 8001c46:	4b47      	ldr	r3, [pc, #284]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c48:	fb03 f201 	mul.w	r2, r3, r1
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	fb00 f303 	mul.w	r3, r0, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	4a43      	ldr	r2, [pc, #268]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c56:	fba0 1202 	umull	r1, r2, r0, r2
 8001c5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c5c:	460a      	mov	r2, r1
 8001c5e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001c60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c62:	4413      	add	r3, r2
 8001c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
 8001c6c:	61fa      	str	r2, [r7, #28]
 8001c6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c76:	f7fe fb3b 	bl	80002f0 <__aeabi_uldivmod>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4613      	mov	r3, r2
 8001c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c82:	e053      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c84:	4b35      	ldr	r3, [pc, #212]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	099b      	lsrs	r3, r3, #6
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	617a      	str	r2, [r7, #20]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c96:	f04f 0b00 	mov.w	fp, #0
 8001c9a:	4652      	mov	r2, sl
 8001c9c:	465b      	mov	r3, fp
 8001c9e:	f04f 0000 	mov.w	r0, #0
 8001ca2:	f04f 0100 	mov.w	r1, #0
 8001ca6:	0159      	lsls	r1, r3, #5
 8001ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cac:	0150      	lsls	r0, r2, #5
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	ebb2 080a 	subs.w	r8, r2, sl
 8001cb6:	eb63 090b 	sbc.w	r9, r3, fp
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001cc6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001cca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cce:	ebb2 0408 	subs.w	r4, r2, r8
 8001cd2:	eb63 0509 	sbc.w	r5, r3, r9
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	00eb      	lsls	r3, r5, #3
 8001ce0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce4:	00e2      	lsls	r2, r4, #3
 8001ce6:	4614      	mov	r4, r2
 8001ce8:	461d      	mov	r5, r3
 8001cea:	eb14 030a 	adds.w	r3, r4, sl
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	eb45 030b 	adc.w	r3, r5, fp
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d02:	4629      	mov	r1, r5
 8001d04:	028b      	lsls	r3, r1, #10
 8001d06:	4621      	mov	r1, r4
 8001d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	028a      	lsls	r2, r1, #10
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d16:	2200      	movs	r2, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	60fa      	str	r2, [r7, #12]
 8001d1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d20:	f7fe fae6 	bl	80002f0 <__aeabi_uldivmod>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4613      	mov	r3, r2
 8001d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	3301      	adds	r3, #1
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001d3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d46:	e002      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3740      	adds	r7, #64	@ 0x40
 8001d54:	46bd      	mov	sp, r7
 8001d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	00f42400 	.word	0x00f42400
 8001d64:	017d7840 	.word	0x017d7840

08001d68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	@ (8001d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000000 	.word	0x20000000

08001d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d84:	f7ff fff0 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	0a9b      	lsrs	r3, r3, #10
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	4903      	ldr	r1, [pc, #12]	@ (8001da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40023800 	.word	0x40023800
 8001da4:	080043d0 	.word	0x080043d0

08001da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dac:	f7ff ffdc 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	0b5b      	lsrs	r3, r3, #13
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	4903      	ldr	r1, [pc, #12]	@ (8001dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dbe:	5ccb      	ldrb	r3, [r1, r3]
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	080043d0 	.word	0x080043d0

08001dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d012      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001df8:	4b69      	ldr	r3, [pc, #420]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4a68      	ldr	r2, [pc, #416]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e02:	6093      	str	r3, [r2, #8]
 8001e04:	4b66      	ldr	r3, [pc, #408]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e0c:	4964      	ldr	r1, [pc, #400]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d017      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e30:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e38:	4959      	ldr	r1, [pc, #356]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e48:	d101      	bne.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d017      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e66:	4b4e      	ldr	r3, [pc, #312]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e6c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	494a      	ldr	r1, [pc, #296]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e84:	d101      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e92:	2301      	movs	r3, #1
 8001e94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 808b 	beq.w	8001fca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	4a39      	ldr	r2, [pc, #228]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec0:	4b37      	ldr	r3, [pc, #220]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ecc:	4b35      	ldr	r3, [pc, #212]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a34      	ldr	r2, [pc, #208]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed8:	f7fe ff54 	bl	8000d84 <HAL_GetTick>
 8001edc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee0:	f7fe ff50 	bl	8000d84 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	@ 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e38f      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001efe:	4b28      	ldr	r3, [pc, #160]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d035      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d02e      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f1c:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f26:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f30:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f32:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f36:	4a1a      	ldr	r2, [pc, #104]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f3c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f3e:	4a18      	ldr	r2, [pc, #96]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f44:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d114      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7fe ff18 	bl	8000d84 <HAL_GetTick>
 8001f54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f56:	e00a      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f58:	f7fe ff14 	bl	8000d84 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e351      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0ee      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f86:	d111      	bne.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f88:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f94:	4b04      	ldr	r3, [pc, #16]	@ (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f96:	400b      	ands	r3, r1
 8001f98:	4901      	ldr	r1, [pc, #4]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40007000 	.word	0x40007000
 8001fa8:	0ffffcff 	.word	0x0ffffcff
 8001fac:	4bac      	ldr	r3, [pc, #688]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4aab      	ldr	r2, [pc, #684]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001fb6:	6093      	str	r3, [r2, #8]
 8001fb8:	4ba9      	ldr	r3, [pc, #676]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	49a6      	ldr	r1, [pc, #664]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d010      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001fd6:	4ba2      	ldr	r3, [pc, #648]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fdc:	4aa0      	ldr	r2, [pc, #640]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fe2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fe6:	4b9e      	ldr	r3, [pc, #632]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff0:	499b      	ldr	r1, [pc, #620]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002004:	4b96      	ldr	r3, [pc, #600]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002012:	4993      	ldr	r1, [pc, #588]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002026:	4b8e      	ldr	r3, [pc, #568]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002034:	498a      	ldr	r1, [pc, #552]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002048:	4b85      	ldr	r3, [pc, #532]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002056:	4982      	ldr	r1, [pc, #520]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800206a:	4b7d      	ldr	r3, [pc, #500]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002070:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002078:	4979      	ldr	r1, [pc, #484]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800208c:	4b74      	ldr	r3, [pc, #464]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	4971      	ldr	r1, [pc, #452]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b4:	f023 020c 	bic.w	r2, r3, #12
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020bc:	4968      	ldr	r1, [pc, #416]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020d0:	4b63      	ldr	r3, [pc, #396]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020de:	4960      	ldr	r1, [pc, #384]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002100:	4957      	ldr	r1, [pc, #348]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002114:	4b52      	ldr	r3, [pc, #328]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002122:	494f      	ldr	r1, [pc, #316]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002136:	4b4a      	ldr	r3, [pc, #296]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002144:	4946      	ldr	r1, [pc, #280]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002158:	4b41      	ldr	r3, [pc, #260]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002166:	493e      	ldr	r1, [pc, #248]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800217a:	4b39      	ldr	r3, [pc, #228]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002180:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002188:	4935      	ldr	r1, [pc, #212]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800219c:	4b30      	ldr	r3, [pc, #192]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021aa:	492d      	ldr	r1, [pc, #180]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d011      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80021be:	4b28      	ldr	r3, [pc, #160]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021cc:	4924      	ldr	r1, [pc, #144]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021dc:	d101      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80021de:	2301      	movs	r3, #1
 80021e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80021ee:	2301      	movs	r3, #1
 80021f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021fe:	4b18      	ldr	r3, [pc, #96]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002204:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800220c:	4914      	ldr	r1, [pc, #80]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00b      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002220:	4b0f      	ldr	r3, [pc, #60]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002226:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002230:	490b      	ldr	r1, [pc, #44]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00f      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800224a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002254:	4902      	ldr	r1, [pc, #8]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800225c:	e002      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00b      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002270:	4b8a      	ldr	r3, [pc, #552]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002272:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002276:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002280:	4986      	ldr	r1, [pc, #536]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00b      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002294:	4b81      	ldr	r3, [pc, #516]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002296:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800229a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022a4:	497d      	ldr	r1, [pc, #500]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d006      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80d6 	beq.w	800246c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022c0:	4b76      	ldr	r3, [pc, #472]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a75      	ldr	r2, [pc, #468]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80022ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022cc:	f7fe fd5a 	bl	8000d84 <HAL_GetTick>
 80022d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022d4:	f7fe fd56 	bl	8000d84 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	@ 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e195      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022e6:	4b6d      	ldr	r3, [pc, #436]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d021      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002302:	2b00      	cmp	r3, #0
 8002304:	d11d      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002306:	4b65      	ldr	r3, [pc, #404]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002308:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800230c:	0c1b      	lsrs	r3, r3, #16
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002314:	4b61      	ldr	r3, [pc, #388]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800231a:	0e1b      	lsrs	r3, r3, #24
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	019a      	lsls	r2, r3, #6
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	041b      	lsls	r3, r3, #16
 800232c:	431a      	orrs	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	071b      	lsls	r3, r3, #28
 800233a:	4958      	ldr	r1, [pc, #352]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002352:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002356:	d00a      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002360:	2b00      	cmp	r3, #0
 8002362:	d02e      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002368:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800236c:	d129      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800236e:	4b4b      	ldr	r3, [pc, #300]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002374:	0c1b      	lsrs	r3, r3, #16
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800237c:	4b47      	ldr	r3, [pc, #284]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800237e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002382:	0f1b      	lsrs	r3, r3, #28
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	019a      	lsls	r2, r3, #6
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	061b      	lsls	r3, r3, #24
 800239c:	431a      	orrs	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	071b      	lsls	r3, r3, #28
 80023a2:	493e      	ldr	r1, [pc, #248]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80023aa:	4b3c      	ldr	r3, [pc, #240]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023b0:	f023 021f 	bic.w	r2, r3, #31
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	3b01      	subs	r3, #1
 80023ba:	4938      	ldr	r1, [pc, #224]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01d      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023ce:	4b33      	ldr	r3, [pc, #204]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023d4:	0e1b      	lsrs	r3, r3, #24
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023dc:	4b2f      	ldr	r3, [pc, #188]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023e2:	0f1b      	lsrs	r3, r3, #28
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	019a      	lsls	r2, r3, #6
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	041b      	lsls	r3, r3, #16
 80023f6:	431a      	orrs	r2, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	061b      	lsls	r3, r3, #24
 80023fc:	431a      	orrs	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	071b      	lsls	r3, r3, #28
 8002402:	4926      	ldr	r1, [pc, #152]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d011      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	019a      	lsls	r2, r3, #6
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	061b      	lsls	r3, r3, #24
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	071b      	lsls	r3, r3, #28
 8002432:	491a      	ldr	r1, [pc, #104]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800243a:	4b18      	ldr	r3, [pc, #96]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a17      	ldr	r2, [pc, #92]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002440:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002446:	f7fe fc9d 	bl	8000d84 <HAL_GetTick>
 800244a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800244e:	f7fe fc99 	bl	8000d84 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b64      	cmp	r3, #100	@ 0x64
 800245a:	d901      	bls.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0d8      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002460:	4b0e      	ldr	r3, [pc, #56]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2b01      	cmp	r3, #1
 8002470:	f040 80ce 	bne.w	8002610 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002474:	4b09      	ldr	r3, [pc, #36]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a08      	ldr	r2, [pc, #32]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800247e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002480:	f7fe fc80 	bl	8000d84 <HAL_GetTick>
 8002484:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002486:	e00b      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002488:	f7fe fc7c 	bl	8000d84 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	@ 0x64
 8002494:	d904      	bls.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e0bb      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024a0:	4b5e      	ldr	r3, [pc, #376]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024ac:	d0ec      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d02e      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d12a      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024d6:	4b51      	ldr	r3, [pc, #324]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024e4:	4b4d      	ldr	r3, [pc, #308]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ea:	0f1b      	lsrs	r3, r3, #28
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	019a      	lsls	r2, r3, #6
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	041b      	lsls	r3, r3, #16
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	061b      	lsls	r3, r3, #24
 8002504:	431a      	orrs	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	071b      	lsls	r3, r3, #28
 800250a:	4944      	ldr	r1, [pc, #272]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002512:	4b42      	ldr	r3, [pc, #264]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002518:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002520:	3b01      	subs	r3, #1
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	493d      	ldr	r1, [pc, #244]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d022      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800253c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002540:	d11d      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002542:	4b36      	ldr	r3, [pc, #216]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002548:	0e1b      	lsrs	r3, r3, #24
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002550:	4b32      	ldr	r3, [pc, #200]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002556:	0f1b      	lsrs	r3, r3, #28
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	019a      	lsls	r2, r3, #6
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	431a      	orrs	r2, r3
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	061b      	lsls	r3, r3, #24
 8002570:	431a      	orrs	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	071b      	lsls	r3, r3, #28
 8002576:	4929      	ldr	r1, [pc, #164]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d028      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800258a:	4b24      	ldr	r3, [pc, #144]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800258c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002590:	0e1b      	lsrs	r3, r3, #24
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002598:	4b20      	ldr	r3, [pc, #128]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259e:	0c1b      	lsrs	r3, r3, #16
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	019a      	lsls	r2, r3, #6
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	041b      	lsls	r3, r3, #16
 80025b0:	431a      	orrs	r2, r3
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	071b      	lsls	r3, r3, #28
 80025be:	4917      	ldr	r1, [pc, #92]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d4:	4911      	ldr	r1, [pc, #68]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025dc:	4b0f      	ldr	r3, [pc, #60]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0e      	ldr	r2, [pc, #56]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e8:	f7fe fbcc 	bl	8000d84 <HAL_GetTick>
 80025ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025f0:	f7fe fbc8 	bl	8000d84 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	@ 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e007      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800260a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800260e:	d1ef      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3720      	adds	r7, #32
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800

08002620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e049      	b.n	80026c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe fa52 	bl	8000af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3304      	adds	r3, #4
 800265c:	4619      	mov	r1, r3
 800265e:	4610      	mov	r0, r2
 8002660:	f000 fab2 	bl	8002bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d001      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e054      	b.n	8002792 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a26      	ldr	r2, [pc, #152]	@ (80027a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d022      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002712:	d01d      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a22      	ldr	r2, [pc, #136]	@ (80027a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d018      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a21      	ldr	r2, [pc, #132]	@ (80027a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d013      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1f      	ldr	r2, [pc, #124]	@ (80027ac <HAL_TIM_Base_Start_IT+0xdc>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00e      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a1e      	ldr	r2, [pc, #120]	@ (80027b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d009      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1c      	ldr	r2, [pc, #112]	@ (80027b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a1b      	ldr	r2, [pc, #108]	@ (80027b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d115      	bne.n	800277c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	4b19      	ldr	r3, [pc, #100]	@ (80027bc <HAL_TIM_Base_Start_IT+0xec>)
 8002758:	4013      	ands	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b06      	cmp	r3, #6
 8002760:	d015      	beq.n	800278e <HAL_TIM_Base_Start_IT+0xbe>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002768:	d011      	beq.n	800278e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277a:	e008      	b.n	800278e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	e000      	b.n	8002790 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40010000 	.word	0x40010000
 80027a4:	40000400 	.word	0x40000400
 80027a8:	40000800 	.word	0x40000800
 80027ac:	40000c00 	.word	0x40000c00
 80027b0:	40010400 	.word	0x40010400
 80027b4:	40014000 	.word	0x40014000
 80027b8:	40001800 	.word	0x40001800
 80027bc:	00010007 	.word	0x00010007

080027c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d020      	beq.n	8002824 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01b      	beq.n	8002824 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0202 	mvn.w	r2, #2
 80027f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f9be 	bl	8002b8c <HAL_TIM_IC_CaptureCallback>
 8002810:	e005      	b.n	800281e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f9b0 	bl	8002b78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f9c1 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d020      	beq.n	8002870 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01b      	beq.n	8002870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0204 	mvn.w	r2, #4
 8002840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2202      	movs	r2, #2
 8002846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f998 	bl	8002b8c <HAL_TIM_IC_CaptureCallback>
 800285c:	e005      	b.n	800286a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f98a 	bl	8002b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f99b 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d020      	beq.n	80028bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01b      	beq.n	80028bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0208 	mvn.w	r2, #8
 800288c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2204      	movs	r2, #4
 8002892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f972 	bl	8002b8c <HAL_TIM_IC_CaptureCallback>
 80028a8:	e005      	b.n	80028b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f964 	bl	8002b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f975 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d020      	beq.n	8002908 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01b      	beq.n	8002908 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0210 	mvn.w	r2, #16
 80028d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2208      	movs	r2, #8
 80028de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f94c 	bl	8002b8c <HAL_TIM_IC_CaptureCallback>
 80028f4:	e005      	b.n	8002902 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f93e 	bl	8002b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f94f 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00c      	beq.n	800292c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0201 	mvn.w	r2, #1
 8002924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f91c 	bl	8002b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002932:	2b00      	cmp	r3, #0
 8002934:	d104      	bne.n	8002940 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00c      	beq.n	800295a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fb15 	bl	8002f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00c      	beq.n	800297e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fb0d 	bl	8002f98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00c      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800299a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f909 	bl	8002bb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00c      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d007      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f06f 0220 	mvn.w	r2, #32
 80029be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fad5 	bl	8002f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_TIM_ConfigClockSource+0x1c>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e0b4      	b.n	8002b56 <HAL_TIM_ConfigClockSource+0x186>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	4b56      	ldr	r3, [pc, #344]	@ (8002b60 <HAL_TIM_ConfigClockSource+0x190>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a24:	d03e      	beq.n	8002aa4 <HAL_TIM_ConfigClockSource+0xd4>
 8002a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a2a:	f200 8087 	bhi.w	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a32:	f000 8086 	beq.w	8002b42 <HAL_TIM_ConfigClockSource+0x172>
 8002a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a3a:	d87f      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a3c:	2b70      	cmp	r3, #112	@ 0x70
 8002a3e:	d01a      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0xa6>
 8002a40:	2b70      	cmp	r3, #112	@ 0x70
 8002a42:	d87b      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a44:	2b60      	cmp	r3, #96	@ 0x60
 8002a46:	d050      	beq.n	8002aea <HAL_TIM_ConfigClockSource+0x11a>
 8002a48:	2b60      	cmp	r3, #96	@ 0x60
 8002a4a:	d877      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a4c:	2b50      	cmp	r3, #80	@ 0x50
 8002a4e:	d03c      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0xfa>
 8002a50:	2b50      	cmp	r3, #80	@ 0x50
 8002a52:	d873      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a54:	2b40      	cmp	r3, #64	@ 0x40
 8002a56:	d058      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x13a>
 8002a58:	2b40      	cmp	r3, #64	@ 0x40
 8002a5a:	d86f      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a5c:	2b30      	cmp	r3, #48	@ 0x30
 8002a5e:	d064      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x15a>
 8002a60:	2b30      	cmp	r3, #48	@ 0x30
 8002a62:	d86b      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d060      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x15a>
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	d867      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d05c      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x15a>
 8002a70:	2b10      	cmp	r3, #16
 8002a72:	d05a      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x15a>
 8002a74:	e062      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a86:	f000 f9c5 	bl	8002e14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	609a      	str	r2, [r3, #8]
      break;
 8002aa2:	e04f      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ab4:	f000 f9ae 	bl	8002e14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ac6:	609a      	str	r2, [r3, #8]
      break;
 8002ac8:	e03c      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f000 f922 	bl	8002d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2150      	movs	r1, #80	@ 0x50
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f97b 	bl	8002dde <TIM_ITRx_SetConfig>
      break;
 8002ae8:	e02c      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002af6:	461a      	mov	r2, r3
 8002af8:	f000 f941 	bl	8002d7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2160      	movs	r1, #96	@ 0x60
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f96b 	bl	8002dde <TIM_ITRx_SetConfig>
      break;
 8002b08:	e01c      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b16:	461a      	mov	r2, r3
 8002b18:	f000 f902 	bl	8002d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2140      	movs	r1, #64	@ 0x40
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f95b 	bl	8002dde <TIM_ITRx_SetConfig>
      break;
 8002b28:	e00c      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4619      	mov	r1, r3
 8002b34:	4610      	mov	r0, r2
 8002b36:	f000 f952 	bl	8002dde <TIM_ITRx_SetConfig>
      break;
 8002b3a:	e003      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b40:	e000      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	fffeff88 	.word	0xfffeff88

08002b64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a46      	ldr	r2, [pc, #280]	@ (8002cf4 <TIM_Base_SetConfig+0x12c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d013      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002be6:	d00f      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a43      	ldr	r2, [pc, #268]	@ (8002cf8 <TIM_Base_SetConfig+0x130>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00b      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a42      	ldr	r2, [pc, #264]	@ (8002cfc <TIM_Base_SetConfig+0x134>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d007      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a41      	ldr	r2, [pc, #260]	@ (8002d00 <TIM_Base_SetConfig+0x138>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d003      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a40      	ldr	r2, [pc, #256]	@ (8002d04 <TIM_Base_SetConfig+0x13c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d108      	bne.n	8002c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a35      	ldr	r2, [pc, #212]	@ (8002cf4 <TIM_Base_SetConfig+0x12c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d02b      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c28:	d027      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a32      	ldr	r2, [pc, #200]	@ (8002cf8 <TIM_Base_SetConfig+0x130>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d023      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a31      	ldr	r2, [pc, #196]	@ (8002cfc <TIM_Base_SetConfig+0x134>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01f      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a30      	ldr	r2, [pc, #192]	@ (8002d00 <TIM_Base_SetConfig+0x138>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d01b      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a2f      	ldr	r2, [pc, #188]	@ (8002d04 <TIM_Base_SetConfig+0x13c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d017      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a2e      	ldr	r2, [pc, #184]	@ (8002d08 <TIM_Base_SetConfig+0x140>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a2d      	ldr	r2, [pc, #180]	@ (8002d0c <TIM_Base_SetConfig+0x144>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00f      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a2c      	ldr	r2, [pc, #176]	@ (8002d10 <TIM_Base_SetConfig+0x148>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00b      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a2b      	ldr	r2, [pc, #172]	@ (8002d14 <TIM_Base_SetConfig+0x14c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a2a      	ldr	r2, [pc, #168]	@ (8002d18 <TIM_Base_SetConfig+0x150>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a29      	ldr	r2, [pc, #164]	@ (8002d1c <TIM_Base_SetConfig+0x154>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a10      	ldr	r2, [pc, #64]	@ (8002cf4 <TIM_Base_SetConfig+0x12c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d003      	beq.n	8002cc0 <TIM_Base_SetConfig+0xf8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a12      	ldr	r2, [pc, #72]	@ (8002d04 <TIM_Base_SetConfig+0x13c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d103      	bne.n	8002cc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d105      	bne.n	8002ce6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f023 0201 	bic.w	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	611a      	str	r2, [r3, #16]
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40010000 	.word	0x40010000
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40000800 	.word	0x40000800
 8002d00:	40000c00 	.word	0x40000c00
 8002d04:	40010400 	.word	0x40010400
 8002d08:	40014000 	.word	0x40014000
 8002d0c:	40014400 	.word	0x40014400
 8002d10:	40014800 	.word	0x40014800
 8002d14:	40001800 	.word	0x40001800
 8002d18:	40001c00 	.word	0x40001c00
 8002d1c:	40002000 	.word	0x40002000

08002d20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f023 0201 	bic.w	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f023 030a 	bic.w	r3, r3, #10
 8002d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	621a      	str	r2, [r3, #32]
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b087      	sub	sp, #28
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	f023 0210 	bic.w	r2, r3, #16
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	031b      	lsls	r3, r3, #12
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002dba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	621a      	str	r2, [r3, #32]
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002df4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f043 0307 	orr.w	r3, r3, #7
 8002e00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	609a      	str	r2, [r3, #8]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	021a      	lsls	r2, r3, #8
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	609a      	str	r2, [r3, #8]
}
 8002e48:	bf00      	nop
 8002e4a:	371c      	adds	r7, #28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e06d      	b.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a30      	ldr	r2, [pc, #192]	@ (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2f      	ldr	r2, [pc, #188]	@ (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d108      	bne.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002ea6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a20      	ldr	r2, [pc, #128]	@ (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d022      	beq.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ede:	d01d      	beq.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d018      	beq.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1c      	ldr	r2, [pc, #112]	@ (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d013      	beq.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00e      	beq.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a15      	ldr	r2, [pc, #84]	@ (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d009      	beq.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a16      	ldr	r2, [pc, #88]	@ (8002f68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d004      	beq.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a15      	ldr	r2, [pc, #84]	@ (8002f6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d10c      	bne.n	8002f36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40010400 	.word	0x40010400
 8002f5c:	40000400 	.word	0x40000400
 8002f60:	40000800 	.word	0x40000800
 8002f64:	40000c00 	.word	0x40000c00
 8002f68:	40014000 	.word	0x40014000
 8002f6c:	40001800 	.word	0x40001800

08002f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e040      	b.n	8003040 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fd fdfe 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	@ 0x24
 8002fd8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0201 	bic.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fb16 	bl	8003624 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f8af 	bl	800315c <UART_SetConfig>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e01b      	b.n	8003040 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fb95 	bl	8003768 <UART_CheckIdleState>
 800303e:	4603      	mov	r3, r0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	@ 0x28
 800304c:	af02      	add	r7, sp, #8
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	4613      	mov	r3, r2
 8003056:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800305c:	2b20      	cmp	r3, #32
 800305e:	d177      	bne.n	8003150 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_UART_Transmit+0x24>
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e070      	b.n	8003152 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2221      	movs	r2, #33	@ 0x21
 800307c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800307e:	f7fd fe81 	bl	8000d84 <HAL_GetTick>
 8003082:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	88fa      	ldrh	r2, [r7, #6]
 8003088:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	88fa      	ldrh	r2, [r7, #6]
 8003090:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800309c:	d108      	bne.n	80030b0 <HAL_UART_Transmit+0x68>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d104      	bne.n	80030b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	61bb      	str	r3, [r7, #24]
 80030ae:	e003      	b.n	80030b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030b8:	e02f      	b.n	800311a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2200      	movs	r2, #0
 80030c2:	2180      	movs	r1, #128	@ 0x80
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 fbf7 	bl	80038b8 <UART_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d004      	beq.n	80030da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e03b      	b.n	8003152 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10b      	bne.n	80030f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	3302      	adds	r3, #2
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	e007      	b.n	8003108 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	781a      	ldrb	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3301      	adds	r3, #1
 8003106:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1c9      	bne.n	80030ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2200      	movs	r2, #0
 800312e:	2140      	movs	r1, #64	@ 0x40
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 fbc1 	bl	80038b8 <UART_WaitOnFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e005      	b.n	8003152 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	e000      	b.n	8003152 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003150:	2302      	movs	r3, #2
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4ba6      	ldr	r3, [pc, #664]	@ (8003420 <UART_SetConfig+0x2c4>)
 8003188:	4013      	ands	r3, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	6979      	ldr	r1, [r7, #20]
 8003190:	430b      	orrs	r3, r1
 8003192:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a94      	ldr	r2, [pc, #592]	@ (8003424 <UART_SetConfig+0x2c8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d120      	bne.n	800321a <UART_SetConfig+0xbe>
 80031d8:	4b93      	ldr	r3, [pc, #588]	@ (8003428 <UART_SetConfig+0x2cc>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d816      	bhi.n	8003214 <UART_SetConfig+0xb8>
 80031e6:	a201      	add	r2, pc, #4	@ (adr r2, 80031ec <UART_SetConfig+0x90>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	080031fd 	.word	0x080031fd
 80031f0:	08003209 	.word	0x08003209
 80031f4:	08003203 	.word	0x08003203
 80031f8:	0800320f 	.word	0x0800320f
 80031fc:	2301      	movs	r3, #1
 80031fe:	77fb      	strb	r3, [r7, #31]
 8003200:	e150      	b.n	80034a4 <UART_SetConfig+0x348>
 8003202:	2302      	movs	r3, #2
 8003204:	77fb      	strb	r3, [r7, #31]
 8003206:	e14d      	b.n	80034a4 <UART_SetConfig+0x348>
 8003208:	2304      	movs	r3, #4
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e14a      	b.n	80034a4 <UART_SetConfig+0x348>
 800320e:	2308      	movs	r3, #8
 8003210:	77fb      	strb	r3, [r7, #31]
 8003212:	e147      	b.n	80034a4 <UART_SetConfig+0x348>
 8003214:	2310      	movs	r3, #16
 8003216:	77fb      	strb	r3, [r7, #31]
 8003218:	e144      	b.n	80034a4 <UART_SetConfig+0x348>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a83      	ldr	r2, [pc, #524]	@ (800342c <UART_SetConfig+0x2d0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d132      	bne.n	800328a <UART_SetConfig+0x12e>
 8003224:	4b80      	ldr	r3, [pc, #512]	@ (8003428 <UART_SetConfig+0x2cc>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d828      	bhi.n	8003284 <UART_SetConfig+0x128>
 8003232:	a201      	add	r2, pc, #4	@ (adr r2, 8003238 <UART_SetConfig+0xdc>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	0800326d 	.word	0x0800326d
 800323c:	08003285 	.word	0x08003285
 8003240:	08003285 	.word	0x08003285
 8003244:	08003285 	.word	0x08003285
 8003248:	08003279 	.word	0x08003279
 800324c:	08003285 	.word	0x08003285
 8003250:	08003285 	.word	0x08003285
 8003254:	08003285 	.word	0x08003285
 8003258:	08003273 	.word	0x08003273
 800325c:	08003285 	.word	0x08003285
 8003260:	08003285 	.word	0x08003285
 8003264:	08003285 	.word	0x08003285
 8003268:	0800327f 	.word	0x0800327f
 800326c:	2300      	movs	r3, #0
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	e118      	b.n	80034a4 <UART_SetConfig+0x348>
 8003272:	2302      	movs	r3, #2
 8003274:	77fb      	strb	r3, [r7, #31]
 8003276:	e115      	b.n	80034a4 <UART_SetConfig+0x348>
 8003278:	2304      	movs	r3, #4
 800327a:	77fb      	strb	r3, [r7, #31]
 800327c:	e112      	b.n	80034a4 <UART_SetConfig+0x348>
 800327e:	2308      	movs	r3, #8
 8003280:	77fb      	strb	r3, [r7, #31]
 8003282:	e10f      	b.n	80034a4 <UART_SetConfig+0x348>
 8003284:	2310      	movs	r3, #16
 8003286:	77fb      	strb	r3, [r7, #31]
 8003288:	e10c      	b.n	80034a4 <UART_SetConfig+0x348>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a68      	ldr	r2, [pc, #416]	@ (8003430 <UART_SetConfig+0x2d4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d120      	bne.n	80032d6 <UART_SetConfig+0x17a>
 8003294:	4b64      	ldr	r3, [pc, #400]	@ (8003428 <UART_SetConfig+0x2cc>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800329a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800329e:	2b30      	cmp	r3, #48	@ 0x30
 80032a0:	d013      	beq.n	80032ca <UART_SetConfig+0x16e>
 80032a2:	2b30      	cmp	r3, #48	@ 0x30
 80032a4:	d814      	bhi.n	80032d0 <UART_SetConfig+0x174>
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d009      	beq.n	80032be <UART_SetConfig+0x162>
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	d810      	bhi.n	80032d0 <UART_SetConfig+0x174>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <UART_SetConfig+0x15c>
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	d006      	beq.n	80032c4 <UART_SetConfig+0x168>
 80032b6:	e00b      	b.n	80032d0 <UART_SetConfig+0x174>
 80032b8:	2300      	movs	r3, #0
 80032ba:	77fb      	strb	r3, [r7, #31]
 80032bc:	e0f2      	b.n	80034a4 <UART_SetConfig+0x348>
 80032be:	2302      	movs	r3, #2
 80032c0:	77fb      	strb	r3, [r7, #31]
 80032c2:	e0ef      	b.n	80034a4 <UART_SetConfig+0x348>
 80032c4:	2304      	movs	r3, #4
 80032c6:	77fb      	strb	r3, [r7, #31]
 80032c8:	e0ec      	b.n	80034a4 <UART_SetConfig+0x348>
 80032ca:	2308      	movs	r3, #8
 80032cc:	77fb      	strb	r3, [r7, #31]
 80032ce:	e0e9      	b.n	80034a4 <UART_SetConfig+0x348>
 80032d0:	2310      	movs	r3, #16
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	e0e6      	b.n	80034a4 <UART_SetConfig+0x348>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a56      	ldr	r2, [pc, #344]	@ (8003434 <UART_SetConfig+0x2d8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d120      	bne.n	8003322 <UART_SetConfig+0x1c6>
 80032e0:	4b51      	ldr	r3, [pc, #324]	@ (8003428 <UART_SetConfig+0x2cc>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80032ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80032ec:	d013      	beq.n	8003316 <UART_SetConfig+0x1ba>
 80032ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80032f0:	d814      	bhi.n	800331c <UART_SetConfig+0x1c0>
 80032f2:	2b80      	cmp	r3, #128	@ 0x80
 80032f4:	d009      	beq.n	800330a <UART_SetConfig+0x1ae>
 80032f6:	2b80      	cmp	r3, #128	@ 0x80
 80032f8:	d810      	bhi.n	800331c <UART_SetConfig+0x1c0>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <UART_SetConfig+0x1a8>
 80032fe:	2b40      	cmp	r3, #64	@ 0x40
 8003300:	d006      	beq.n	8003310 <UART_SetConfig+0x1b4>
 8003302:	e00b      	b.n	800331c <UART_SetConfig+0x1c0>
 8003304:	2300      	movs	r3, #0
 8003306:	77fb      	strb	r3, [r7, #31]
 8003308:	e0cc      	b.n	80034a4 <UART_SetConfig+0x348>
 800330a:	2302      	movs	r3, #2
 800330c:	77fb      	strb	r3, [r7, #31]
 800330e:	e0c9      	b.n	80034a4 <UART_SetConfig+0x348>
 8003310:	2304      	movs	r3, #4
 8003312:	77fb      	strb	r3, [r7, #31]
 8003314:	e0c6      	b.n	80034a4 <UART_SetConfig+0x348>
 8003316:	2308      	movs	r3, #8
 8003318:	77fb      	strb	r3, [r7, #31]
 800331a:	e0c3      	b.n	80034a4 <UART_SetConfig+0x348>
 800331c:	2310      	movs	r3, #16
 800331e:	77fb      	strb	r3, [r7, #31]
 8003320:	e0c0      	b.n	80034a4 <UART_SetConfig+0x348>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a44      	ldr	r2, [pc, #272]	@ (8003438 <UART_SetConfig+0x2dc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d125      	bne.n	8003378 <UART_SetConfig+0x21c>
 800332c:	4b3e      	ldr	r3, [pc, #248]	@ (8003428 <UART_SetConfig+0x2cc>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003336:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800333a:	d017      	beq.n	800336c <UART_SetConfig+0x210>
 800333c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003340:	d817      	bhi.n	8003372 <UART_SetConfig+0x216>
 8003342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003346:	d00b      	beq.n	8003360 <UART_SetConfig+0x204>
 8003348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800334c:	d811      	bhi.n	8003372 <UART_SetConfig+0x216>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <UART_SetConfig+0x1fe>
 8003352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003356:	d006      	beq.n	8003366 <UART_SetConfig+0x20a>
 8003358:	e00b      	b.n	8003372 <UART_SetConfig+0x216>
 800335a:	2300      	movs	r3, #0
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e0a1      	b.n	80034a4 <UART_SetConfig+0x348>
 8003360:	2302      	movs	r3, #2
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e09e      	b.n	80034a4 <UART_SetConfig+0x348>
 8003366:	2304      	movs	r3, #4
 8003368:	77fb      	strb	r3, [r7, #31]
 800336a:	e09b      	b.n	80034a4 <UART_SetConfig+0x348>
 800336c:	2308      	movs	r3, #8
 800336e:	77fb      	strb	r3, [r7, #31]
 8003370:	e098      	b.n	80034a4 <UART_SetConfig+0x348>
 8003372:	2310      	movs	r3, #16
 8003374:	77fb      	strb	r3, [r7, #31]
 8003376:	e095      	b.n	80034a4 <UART_SetConfig+0x348>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a2f      	ldr	r2, [pc, #188]	@ (800343c <UART_SetConfig+0x2e0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d125      	bne.n	80033ce <UART_SetConfig+0x272>
 8003382:	4b29      	ldr	r3, [pc, #164]	@ (8003428 <UART_SetConfig+0x2cc>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003388:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800338c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003390:	d017      	beq.n	80033c2 <UART_SetConfig+0x266>
 8003392:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003396:	d817      	bhi.n	80033c8 <UART_SetConfig+0x26c>
 8003398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800339c:	d00b      	beq.n	80033b6 <UART_SetConfig+0x25a>
 800339e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033a2:	d811      	bhi.n	80033c8 <UART_SetConfig+0x26c>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <UART_SetConfig+0x254>
 80033a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ac:	d006      	beq.n	80033bc <UART_SetConfig+0x260>
 80033ae:	e00b      	b.n	80033c8 <UART_SetConfig+0x26c>
 80033b0:	2301      	movs	r3, #1
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e076      	b.n	80034a4 <UART_SetConfig+0x348>
 80033b6:	2302      	movs	r3, #2
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e073      	b.n	80034a4 <UART_SetConfig+0x348>
 80033bc:	2304      	movs	r3, #4
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e070      	b.n	80034a4 <UART_SetConfig+0x348>
 80033c2:	2308      	movs	r3, #8
 80033c4:	77fb      	strb	r3, [r7, #31]
 80033c6:	e06d      	b.n	80034a4 <UART_SetConfig+0x348>
 80033c8:	2310      	movs	r3, #16
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e06a      	b.n	80034a4 <UART_SetConfig+0x348>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003440 <UART_SetConfig+0x2e4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d138      	bne.n	800344a <UART_SetConfig+0x2ee>
 80033d8:	4b13      	ldr	r3, [pc, #76]	@ (8003428 <UART_SetConfig+0x2cc>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80033e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033e6:	d017      	beq.n	8003418 <UART_SetConfig+0x2bc>
 80033e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033ec:	d82a      	bhi.n	8003444 <UART_SetConfig+0x2e8>
 80033ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033f2:	d00b      	beq.n	800340c <UART_SetConfig+0x2b0>
 80033f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033f8:	d824      	bhi.n	8003444 <UART_SetConfig+0x2e8>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <UART_SetConfig+0x2aa>
 80033fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003402:	d006      	beq.n	8003412 <UART_SetConfig+0x2b6>
 8003404:	e01e      	b.n	8003444 <UART_SetConfig+0x2e8>
 8003406:	2300      	movs	r3, #0
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e04b      	b.n	80034a4 <UART_SetConfig+0x348>
 800340c:	2302      	movs	r3, #2
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e048      	b.n	80034a4 <UART_SetConfig+0x348>
 8003412:	2304      	movs	r3, #4
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e045      	b.n	80034a4 <UART_SetConfig+0x348>
 8003418:	2308      	movs	r3, #8
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e042      	b.n	80034a4 <UART_SetConfig+0x348>
 800341e:	bf00      	nop
 8003420:	efff69f3 	.word	0xefff69f3
 8003424:	40011000 	.word	0x40011000
 8003428:	40023800 	.word	0x40023800
 800342c:	40004400 	.word	0x40004400
 8003430:	40004800 	.word	0x40004800
 8003434:	40004c00 	.word	0x40004c00
 8003438:	40005000 	.word	0x40005000
 800343c:	40011400 	.word	0x40011400
 8003440:	40007800 	.word	0x40007800
 8003444:	2310      	movs	r3, #16
 8003446:	77fb      	strb	r3, [r7, #31]
 8003448:	e02c      	b.n	80034a4 <UART_SetConfig+0x348>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a72      	ldr	r2, [pc, #456]	@ (8003618 <UART_SetConfig+0x4bc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d125      	bne.n	80034a0 <UART_SetConfig+0x344>
 8003454:	4b71      	ldr	r3, [pc, #452]	@ (800361c <UART_SetConfig+0x4c0>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800345e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003462:	d017      	beq.n	8003494 <UART_SetConfig+0x338>
 8003464:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003468:	d817      	bhi.n	800349a <UART_SetConfig+0x33e>
 800346a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800346e:	d00b      	beq.n	8003488 <UART_SetConfig+0x32c>
 8003470:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003474:	d811      	bhi.n	800349a <UART_SetConfig+0x33e>
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <UART_SetConfig+0x326>
 800347a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800347e:	d006      	beq.n	800348e <UART_SetConfig+0x332>
 8003480:	e00b      	b.n	800349a <UART_SetConfig+0x33e>
 8003482:	2300      	movs	r3, #0
 8003484:	77fb      	strb	r3, [r7, #31]
 8003486:	e00d      	b.n	80034a4 <UART_SetConfig+0x348>
 8003488:	2302      	movs	r3, #2
 800348a:	77fb      	strb	r3, [r7, #31]
 800348c:	e00a      	b.n	80034a4 <UART_SetConfig+0x348>
 800348e:	2304      	movs	r3, #4
 8003490:	77fb      	strb	r3, [r7, #31]
 8003492:	e007      	b.n	80034a4 <UART_SetConfig+0x348>
 8003494:	2308      	movs	r3, #8
 8003496:	77fb      	strb	r3, [r7, #31]
 8003498:	e004      	b.n	80034a4 <UART_SetConfig+0x348>
 800349a:	2310      	movs	r3, #16
 800349c:	77fb      	strb	r3, [r7, #31]
 800349e:	e001      	b.n	80034a4 <UART_SetConfig+0x348>
 80034a0:	2310      	movs	r3, #16
 80034a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034ac:	d15b      	bne.n	8003566 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80034ae:	7ffb      	ldrb	r3, [r7, #31]
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d828      	bhi.n	8003506 <UART_SetConfig+0x3aa>
 80034b4:	a201      	add	r2, pc, #4	@ (adr r2, 80034bc <UART_SetConfig+0x360>)
 80034b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ba:	bf00      	nop
 80034bc:	080034e1 	.word	0x080034e1
 80034c0:	080034e9 	.word	0x080034e9
 80034c4:	080034f1 	.word	0x080034f1
 80034c8:	08003507 	.word	0x08003507
 80034cc:	080034f7 	.word	0x080034f7
 80034d0:	08003507 	.word	0x08003507
 80034d4:	08003507 	.word	0x08003507
 80034d8:	08003507 	.word	0x08003507
 80034dc:	080034ff 	.word	0x080034ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034e0:	f7fe fc4e 	bl	8001d80 <HAL_RCC_GetPCLK1Freq>
 80034e4:	61b8      	str	r0, [r7, #24]
        break;
 80034e6:	e013      	b.n	8003510 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034e8:	f7fe fc5e 	bl	8001da8 <HAL_RCC_GetPCLK2Freq>
 80034ec:	61b8      	str	r0, [r7, #24]
        break;
 80034ee:	e00f      	b.n	8003510 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003620 <UART_SetConfig+0x4c4>)
 80034f2:	61bb      	str	r3, [r7, #24]
        break;
 80034f4:	e00c      	b.n	8003510 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034f6:	f7fe fb71 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 80034fa:	61b8      	str	r0, [r7, #24]
        break;
 80034fc:	e008      	b.n	8003510 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003502:	61bb      	str	r3, [r7, #24]
        break;
 8003504:	e004      	b.n	8003510 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	77bb      	strb	r3, [r7, #30]
        break;
 800350e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d074      	beq.n	8003600 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	005a      	lsls	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	085b      	lsrs	r3, r3, #1
 8003520:	441a      	add	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	fbb2 f3f3 	udiv	r3, r2, r3
 800352a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	2b0f      	cmp	r3, #15
 8003530:	d916      	bls.n	8003560 <UART_SetConfig+0x404>
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003538:	d212      	bcs.n	8003560 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	b29b      	uxth	r3, r3
 800353e:	f023 030f 	bic.w	r3, r3, #15
 8003542:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	085b      	lsrs	r3, r3, #1
 8003548:	b29b      	uxth	r3, r3
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	b29a      	uxth	r2, r3
 8003550:	89fb      	ldrh	r3, [r7, #14]
 8003552:	4313      	orrs	r3, r2
 8003554:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	89fa      	ldrh	r2, [r7, #14]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	e04f      	b.n	8003600 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	77bb      	strb	r3, [r7, #30]
 8003564:	e04c      	b.n	8003600 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003566:	7ffb      	ldrb	r3, [r7, #31]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d828      	bhi.n	80035be <UART_SetConfig+0x462>
 800356c:	a201      	add	r2, pc, #4	@ (adr r2, 8003574 <UART_SetConfig+0x418>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	08003599 	.word	0x08003599
 8003578:	080035a1 	.word	0x080035a1
 800357c:	080035a9 	.word	0x080035a9
 8003580:	080035bf 	.word	0x080035bf
 8003584:	080035af 	.word	0x080035af
 8003588:	080035bf 	.word	0x080035bf
 800358c:	080035bf 	.word	0x080035bf
 8003590:	080035bf 	.word	0x080035bf
 8003594:	080035b7 	.word	0x080035b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003598:	f7fe fbf2 	bl	8001d80 <HAL_RCC_GetPCLK1Freq>
 800359c:	61b8      	str	r0, [r7, #24]
        break;
 800359e:	e013      	b.n	80035c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035a0:	f7fe fc02 	bl	8001da8 <HAL_RCC_GetPCLK2Freq>
 80035a4:	61b8      	str	r0, [r7, #24]
        break;
 80035a6:	e00f      	b.n	80035c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003620 <UART_SetConfig+0x4c4>)
 80035aa:	61bb      	str	r3, [r7, #24]
        break;
 80035ac:	e00c      	b.n	80035c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ae:	f7fe fb15 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 80035b2:	61b8      	str	r0, [r7, #24]
        break;
 80035b4:	e008      	b.n	80035c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ba:	61bb      	str	r3, [r7, #24]
        break;
 80035bc:	e004      	b.n	80035c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	77bb      	strb	r3, [r7, #30]
        break;
 80035c6:	bf00      	nop
    }

    if (pclk != 0U)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d018      	beq.n	8003600 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	085a      	lsrs	r2, r3, #1
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	441a      	add	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2b0f      	cmp	r3, #15
 80035e6:	d909      	bls.n	80035fc <UART_SetConfig+0x4a0>
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ee:	d205      	bcs.n	80035fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60da      	str	r2, [r3, #12]
 80035fa:	e001      	b.n	8003600 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800360c:	7fbb      	ldrb	r3, [r7, #30]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40007c00 	.word	0x40007c00
 800361c:	40023800 	.word	0x40023800
 8003620:	00f42400 	.word	0x00f42400

08003624 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01a      	beq.n	800373a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003722:	d10a      	bne.n	800373a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	605a      	str	r2, [r3, #4]
  }
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b098      	sub	sp, #96	@ 0x60
 800376c:	af02      	add	r7, sp, #8
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003778:	f7fd fb04 	bl	8000d84 <HAL_GetTick>
 800377c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b08      	cmp	r3, #8
 800378a:	d12e      	bne.n	80037ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800378c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003794:	2200      	movs	r2, #0
 8003796:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f88c 	bl	80038b8 <UART_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d021      	beq.n	80037ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e6      	bne.n	80037a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e062      	b.n	80038b0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d149      	bne.n	800388c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003800:	2200      	movs	r2, #0
 8003802:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f856 	bl	80038b8 <UART_WaitOnFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d03c      	beq.n	800388c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	623b      	str	r3, [r7, #32]
   return(result);
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	461a      	mov	r2, r3
 800382e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003830:	633b      	str	r3, [r7, #48]	@ 0x30
 8003832:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003834:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003838:	e841 2300 	strex	r3, r2, [r1]
 800383c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800383e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e6      	bne.n	8003812 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3308      	adds	r3, #8
 800384a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	e853 3f00 	ldrex	r3, [r3]
 8003852:	60fb      	str	r3, [r7, #12]
   return(result);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0301 	bic.w	r3, r3, #1
 800385a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3308      	adds	r3, #8
 8003862:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003864:	61fa      	str	r2, [r7, #28]
 8003866:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	69b9      	ldr	r1, [r7, #24]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	e841 2300 	strex	r3, r2, [r1]
 8003870:	617b      	str	r3, [r7, #20]
   return(result);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e5      	bne.n	8003844 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e011      	b.n	80038b0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3758      	adds	r7, #88	@ 0x58
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	4613      	mov	r3, r2
 80038c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c8:	e04f      	b.n	800396a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d0:	d04b      	beq.n	800396a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d2:	f7fd fa57 	bl	8000d84 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d302      	bcc.n	80038e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e04e      	b.n	800398a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d037      	beq.n	800396a <UART_WaitOnFlagUntilTimeout+0xb2>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b80      	cmp	r3, #128	@ 0x80
 80038fe:	d034      	beq.n	800396a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b40      	cmp	r3, #64	@ 0x40
 8003904:	d031      	beq.n	800396a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b08      	cmp	r3, #8
 8003912:	d110      	bne.n	8003936 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2208      	movs	r2, #8
 800391a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f838 	bl	8003992 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2208      	movs	r2, #8
 8003926:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e029      	b.n	800398a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003944:	d111      	bne.n	800396a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800394e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f81e 	bl	8003992 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e00f      	b.n	800398a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4013      	ands	r3, r2
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	429a      	cmp	r2, r3
 8003978:	bf0c      	ite	eq
 800397a:	2301      	moveq	r3, #1
 800397c:	2300      	movne	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	429a      	cmp	r2, r3
 8003986:	d0a0      	beq.n	80038ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003992:	b480      	push	{r7}
 8003994:	b095      	sub	sp, #84	@ 0x54
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039c0:	e841 2300 	strex	r3, r2, [r1]
 80039c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e6      	bne.n	800399a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3308      	adds	r3, #8
 80039d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	e853 3f00 	ldrex	r3, [r3]
 80039da:	61fb      	str	r3, [r7, #28]
   return(result);
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3308      	adds	r3, #8
 80039ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039f4:	e841 2300 	strex	r3, r2, [r1]
 80039f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1e5      	bne.n	80039cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d118      	bne.n	8003a3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f023 0310 	bic.w	r3, r3, #16
 8003a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6979      	ldr	r1, [r7, #20]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	613b      	str	r3, [r7, #16]
   return(result);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e6      	bne.n	8003a08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a4e:	bf00      	nop
 8003a50:	3754      	adds	r7, #84	@ 0x54
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
	...

08003a5c <siprintf>:
 8003a5c:	b40e      	push	{r1, r2, r3}
 8003a5e:	b500      	push	{lr}
 8003a60:	b09c      	sub	sp, #112	@ 0x70
 8003a62:	ab1d      	add	r3, sp, #116	@ 0x74
 8003a64:	9002      	str	r0, [sp, #8]
 8003a66:	9006      	str	r0, [sp, #24]
 8003a68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003a6c:	4809      	ldr	r0, [pc, #36]	@ (8003a94 <siprintf+0x38>)
 8003a6e:	9107      	str	r1, [sp, #28]
 8003a70:	9104      	str	r1, [sp, #16]
 8003a72:	4909      	ldr	r1, [pc, #36]	@ (8003a98 <siprintf+0x3c>)
 8003a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a78:	9105      	str	r1, [sp, #20]
 8003a7a:	6800      	ldr	r0, [r0, #0]
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	a902      	add	r1, sp, #8
 8003a80:	f000 f994 	bl	8003dac <_svfiprintf_r>
 8003a84:	9b02      	ldr	r3, [sp, #8]
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
 8003a8a:	b01c      	add	sp, #112	@ 0x70
 8003a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a90:	b003      	add	sp, #12
 8003a92:	4770      	bx	lr
 8003a94:	2000000c 	.word	0x2000000c
 8003a98:	ffff0208 	.word	0xffff0208

08003a9c <memset>:
 8003a9c:	4402      	add	r2, r0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d100      	bne.n	8003aa6 <memset+0xa>
 8003aa4:	4770      	bx	lr
 8003aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aaa:	e7f9      	b.n	8003aa0 <memset+0x4>

08003aac <__errno>:
 8003aac:	4b01      	ldr	r3, [pc, #4]	@ (8003ab4 <__errno+0x8>)
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	2000000c 	.word	0x2000000c

08003ab8 <__libc_init_array>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	4d0d      	ldr	r5, [pc, #52]	@ (8003af0 <__libc_init_array+0x38>)
 8003abc:	4c0d      	ldr	r4, [pc, #52]	@ (8003af4 <__libc_init_array+0x3c>)
 8003abe:	1b64      	subs	r4, r4, r5
 8003ac0:	10a4      	asrs	r4, r4, #2
 8003ac2:	2600      	movs	r6, #0
 8003ac4:	42a6      	cmp	r6, r4
 8003ac6:	d109      	bne.n	8003adc <__libc_init_array+0x24>
 8003ac8:	4d0b      	ldr	r5, [pc, #44]	@ (8003af8 <__libc_init_array+0x40>)
 8003aca:	4c0c      	ldr	r4, [pc, #48]	@ (8003afc <__libc_init_array+0x44>)
 8003acc:	f000 fc66 	bl	800439c <_init>
 8003ad0:	1b64      	subs	r4, r4, r5
 8003ad2:	10a4      	asrs	r4, r4, #2
 8003ad4:	2600      	movs	r6, #0
 8003ad6:	42a6      	cmp	r6, r4
 8003ad8:	d105      	bne.n	8003ae6 <__libc_init_array+0x2e>
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
 8003adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae0:	4798      	blx	r3
 8003ae2:	3601      	adds	r6, #1
 8003ae4:	e7ee      	b.n	8003ac4 <__libc_init_array+0xc>
 8003ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aea:	4798      	blx	r3
 8003aec:	3601      	adds	r6, #1
 8003aee:	e7f2      	b.n	8003ad6 <__libc_init_array+0x1e>
 8003af0:	08004414 	.word	0x08004414
 8003af4:	08004414 	.word	0x08004414
 8003af8:	08004414 	.word	0x08004414
 8003afc:	08004418 	.word	0x08004418

08003b00 <__retarget_lock_acquire_recursive>:
 8003b00:	4770      	bx	lr

08003b02 <__retarget_lock_release_recursive>:
 8003b02:	4770      	bx	lr

08003b04 <_free_r>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	4605      	mov	r5, r0
 8003b08:	2900      	cmp	r1, #0
 8003b0a:	d041      	beq.n	8003b90 <_free_r+0x8c>
 8003b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b10:	1f0c      	subs	r4, r1, #4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bfb8      	it	lt
 8003b16:	18e4      	addlt	r4, r4, r3
 8003b18:	f000 f8e0 	bl	8003cdc <__malloc_lock>
 8003b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b94 <_free_r+0x90>)
 8003b1e:	6813      	ldr	r3, [r2, #0]
 8003b20:	b933      	cbnz	r3, 8003b30 <_free_r+0x2c>
 8003b22:	6063      	str	r3, [r4, #4]
 8003b24:	6014      	str	r4, [r2, #0]
 8003b26:	4628      	mov	r0, r5
 8003b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b2c:	f000 b8dc 	b.w	8003ce8 <__malloc_unlock>
 8003b30:	42a3      	cmp	r3, r4
 8003b32:	d908      	bls.n	8003b46 <_free_r+0x42>
 8003b34:	6820      	ldr	r0, [r4, #0]
 8003b36:	1821      	adds	r1, r4, r0
 8003b38:	428b      	cmp	r3, r1
 8003b3a:	bf01      	itttt	eq
 8003b3c:	6819      	ldreq	r1, [r3, #0]
 8003b3e:	685b      	ldreq	r3, [r3, #4]
 8003b40:	1809      	addeq	r1, r1, r0
 8003b42:	6021      	streq	r1, [r4, #0]
 8003b44:	e7ed      	b.n	8003b22 <_free_r+0x1e>
 8003b46:	461a      	mov	r2, r3
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	b10b      	cbz	r3, 8003b50 <_free_r+0x4c>
 8003b4c:	42a3      	cmp	r3, r4
 8003b4e:	d9fa      	bls.n	8003b46 <_free_r+0x42>
 8003b50:	6811      	ldr	r1, [r2, #0]
 8003b52:	1850      	adds	r0, r2, r1
 8003b54:	42a0      	cmp	r0, r4
 8003b56:	d10b      	bne.n	8003b70 <_free_r+0x6c>
 8003b58:	6820      	ldr	r0, [r4, #0]
 8003b5a:	4401      	add	r1, r0
 8003b5c:	1850      	adds	r0, r2, r1
 8003b5e:	4283      	cmp	r3, r0
 8003b60:	6011      	str	r1, [r2, #0]
 8003b62:	d1e0      	bne.n	8003b26 <_free_r+0x22>
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	6053      	str	r3, [r2, #4]
 8003b6a:	4408      	add	r0, r1
 8003b6c:	6010      	str	r0, [r2, #0]
 8003b6e:	e7da      	b.n	8003b26 <_free_r+0x22>
 8003b70:	d902      	bls.n	8003b78 <_free_r+0x74>
 8003b72:	230c      	movs	r3, #12
 8003b74:	602b      	str	r3, [r5, #0]
 8003b76:	e7d6      	b.n	8003b26 <_free_r+0x22>
 8003b78:	6820      	ldr	r0, [r4, #0]
 8003b7a:	1821      	adds	r1, r4, r0
 8003b7c:	428b      	cmp	r3, r1
 8003b7e:	bf04      	itt	eq
 8003b80:	6819      	ldreq	r1, [r3, #0]
 8003b82:	685b      	ldreq	r3, [r3, #4]
 8003b84:	6063      	str	r3, [r4, #4]
 8003b86:	bf04      	itt	eq
 8003b88:	1809      	addeq	r1, r1, r0
 8003b8a:	6021      	streq	r1, [r4, #0]
 8003b8c:	6054      	str	r4, [r2, #4]
 8003b8e:	e7ca      	b.n	8003b26 <_free_r+0x22>
 8003b90:	bd38      	pop	{r3, r4, r5, pc}
 8003b92:	bf00      	nop
 8003b94:	200002e8 	.word	0x200002e8

08003b98 <sbrk_aligned>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	4e0f      	ldr	r6, [pc, #60]	@ (8003bd8 <sbrk_aligned+0x40>)
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	6831      	ldr	r1, [r6, #0]
 8003ba0:	4605      	mov	r5, r0
 8003ba2:	b911      	cbnz	r1, 8003baa <sbrk_aligned+0x12>
 8003ba4:	f000 fba6 	bl	80042f4 <_sbrk_r>
 8003ba8:	6030      	str	r0, [r6, #0]
 8003baa:	4621      	mov	r1, r4
 8003bac:	4628      	mov	r0, r5
 8003bae:	f000 fba1 	bl	80042f4 <_sbrk_r>
 8003bb2:	1c43      	adds	r3, r0, #1
 8003bb4:	d103      	bne.n	8003bbe <sbrk_aligned+0x26>
 8003bb6:	f04f 34ff 	mov.w	r4, #4294967295
 8003bba:	4620      	mov	r0, r4
 8003bbc:	bd70      	pop	{r4, r5, r6, pc}
 8003bbe:	1cc4      	adds	r4, r0, #3
 8003bc0:	f024 0403 	bic.w	r4, r4, #3
 8003bc4:	42a0      	cmp	r0, r4
 8003bc6:	d0f8      	beq.n	8003bba <sbrk_aligned+0x22>
 8003bc8:	1a21      	subs	r1, r4, r0
 8003bca:	4628      	mov	r0, r5
 8003bcc:	f000 fb92 	bl	80042f4 <_sbrk_r>
 8003bd0:	3001      	adds	r0, #1
 8003bd2:	d1f2      	bne.n	8003bba <sbrk_aligned+0x22>
 8003bd4:	e7ef      	b.n	8003bb6 <sbrk_aligned+0x1e>
 8003bd6:	bf00      	nop
 8003bd8:	200002e4 	.word	0x200002e4

08003bdc <_malloc_r>:
 8003bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003be0:	1ccd      	adds	r5, r1, #3
 8003be2:	f025 0503 	bic.w	r5, r5, #3
 8003be6:	3508      	adds	r5, #8
 8003be8:	2d0c      	cmp	r5, #12
 8003bea:	bf38      	it	cc
 8003bec:	250c      	movcc	r5, #12
 8003bee:	2d00      	cmp	r5, #0
 8003bf0:	4606      	mov	r6, r0
 8003bf2:	db01      	blt.n	8003bf8 <_malloc_r+0x1c>
 8003bf4:	42a9      	cmp	r1, r5
 8003bf6:	d904      	bls.n	8003c02 <_malloc_r+0x26>
 8003bf8:	230c      	movs	r3, #12
 8003bfa:	6033      	str	r3, [r6, #0]
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003cd8 <_malloc_r+0xfc>
 8003c06:	f000 f869 	bl	8003cdc <__malloc_lock>
 8003c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8003c0e:	461c      	mov	r4, r3
 8003c10:	bb44      	cbnz	r4, 8003c64 <_malloc_r+0x88>
 8003c12:	4629      	mov	r1, r5
 8003c14:	4630      	mov	r0, r6
 8003c16:	f7ff ffbf 	bl	8003b98 <sbrk_aligned>
 8003c1a:	1c43      	adds	r3, r0, #1
 8003c1c:	4604      	mov	r4, r0
 8003c1e:	d158      	bne.n	8003cd2 <_malloc_r+0xf6>
 8003c20:	f8d8 4000 	ldr.w	r4, [r8]
 8003c24:	4627      	mov	r7, r4
 8003c26:	2f00      	cmp	r7, #0
 8003c28:	d143      	bne.n	8003cb2 <_malloc_r+0xd6>
 8003c2a:	2c00      	cmp	r4, #0
 8003c2c:	d04b      	beq.n	8003cc6 <_malloc_r+0xea>
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	4639      	mov	r1, r7
 8003c32:	4630      	mov	r0, r6
 8003c34:	eb04 0903 	add.w	r9, r4, r3
 8003c38:	f000 fb5c 	bl	80042f4 <_sbrk_r>
 8003c3c:	4581      	cmp	r9, r0
 8003c3e:	d142      	bne.n	8003cc6 <_malloc_r+0xea>
 8003c40:	6821      	ldr	r1, [r4, #0]
 8003c42:	1a6d      	subs	r5, r5, r1
 8003c44:	4629      	mov	r1, r5
 8003c46:	4630      	mov	r0, r6
 8003c48:	f7ff ffa6 	bl	8003b98 <sbrk_aligned>
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	d03a      	beq.n	8003cc6 <_malloc_r+0xea>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	442b      	add	r3, r5
 8003c54:	6023      	str	r3, [r4, #0]
 8003c56:	f8d8 3000 	ldr.w	r3, [r8]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	bb62      	cbnz	r2, 8003cb8 <_malloc_r+0xdc>
 8003c5e:	f8c8 7000 	str.w	r7, [r8]
 8003c62:	e00f      	b.n	8003c84 <_malloc_r+0xa8>
 8003c64:	6822      	ldr	r2, [r4, #0]
 8003c66:	1b52      	subs	r2, r2, r5
 8003c68:	d420      	bmi.n	8003cac <_malloc_r+0xd0>
 8003c6a:	2a0b      	cmp	r2, #11
 8003c6c:	d917      	bls.n	8003c9e <_malloc_r+0xc2>
 8003c6e:	1961      	adds	r1, r4, r5
 8003c70:	42a3      	cmp	r3, r4
 8003c72:	6025      	str	r5, [r4, #0]
 8003c74:	bf18      	it	ne
 8003c76:	6059      	strne	r1, [r3, #4]
 8003c78:	6863      	ldr	r3, [r4, #4]
 8003c7a:	bf08      	it	eq
 8003c7c:	f8c8 1000 	streq.w	r1, [r8]
 8003c80:	5162      	str	r2, [r4, r5]
 8003c82:	604b      	str	r3, [r1, #4]
 8003c84:	4630      	mov	r0, r6
 8003c86:	f000 f82f 	bl	8003ce8 <__malloc_unlock>
 8003c8a:	f104 000b 	add.w	r0, r4, #11
 8003c8e:	1d23      	adds	r3, r4, #4
 8003c90:	f020 0007 	bic.w	r0, r0, #7
 8003c94:	1ac2      	subs	r2, r0, r3
 8003c96:	bf1c      	itt	ne
 8003c98:	1a1b      	subne	r3, r3, r0
 8003c9a:	50a3      	strne	r3, [r4, r2]
 8003c9c:	e7af      	b.n	8003bfe <_malloc_r+0x22>
 8003c9e:	6862      	ldr	r2, [r4, #4]
 8003ca0:	42a3      	cmp	r3, r4
 8003ca2:	bf0c      	ite	eq
 8003ca4:	f8c8 2000 	streq.w	r2, [r8]
 8003ca8:	605a      	strne	r2, [r3, #4]
 8003caa:	e7eb      	b.n	8003c84 <_malloc_r+0xa8>
 8003cac:	4623      	mov	r3, r4
 8003cae:	6864      	ldr	r4, [r4, #4]
 8003cb0:	e7ae      	b.n	8003c10 <_malloc_r+0x34>
 8003cb2:	463c      	mov	r4, r7
 8003cb4:	687f      	ldr	r7, [r7, #4]
 8003cb6:	e7b6      	b.n	8003c26 <_malloc_r+0x4a>
 8003cb8:	461a      	mov	r2, r3
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	42a3      	cmp	r3, r4
 8003cbe:	d1fb      	bne.n	8003cb8 <_malloc_r+0xdc>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	6053      	str	r3, [r2, #4]
 8003cc4:	e7de      	b.n	8003c84 <_malloc_r+0xa8>
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	6033      	str	r3, [r6, #0]
 8003cca:	4630      	mov	r0, r6
 8003ccc:	f000 f80c 	bl	8003ce8 <__malloc_unlock>
 8003cd0:	e794      	b.n	8003bfc <_malloc_r+0x20>
 8003cd2:	6005      	str	r5, [r0, #0]
 8003cd4:	e7d6      	b.n	8003c84 <_malloc_r+0xa8>
 8003cd6:	bf00      	nop
 8003cd8:	200002e8 	.word	0x200002e8

08003cdc <__malloc_lock>:
 8003cdc:	4801      	ldr	r0, [pc, #4]	@ (8003ce4 <__malloc_lock+0x8>)
 8003cde:	f7ff bf0f 	b.w	8003b00 <__retarget_lock_acquire_recursive>
 8003ce2:	bf00      	nop
 8003ce4:	200002e0 	.word	0x200002e0

08003ce8 <__malloc_unlock>:
 8003ce8:	4801      	ldr	r0, [pc, #4]	@ (8003cf0 <__malloc_unlock+0x8>)
 8003cea:	f7ff bf0a 	b.w	8003b02 <__retarget_lock_release_recursive>
 8003cee:	bf00      	nop
 8003cf0:	200002e0 	.word	0x200002e0

08003cf4 <__ssputs_r>:
 8003cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf8:	688e      	ldr	r6, [r1, #8]
 8003cfa:	461f      	mov	r7, r3
 8003cfc:	42be      	cmp	r6, r7
 8003cfe:	680b      	ldr	r3, [r1, #0]
 8003d00:	4682      	mov	sl, r0
 8003d02:	460c      	mov	r4, r1
 8003d04:	4690      	mov	r8, r2
 8003d06:	d82d      	bhi.n	8003d64 <__ssputs_r+0x70>
 8003d08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003d10:	d026      	beq.n	8003d60 <__ssputs_r+0x6c>
 8003d12:	6965      	ldr	r5, [r4, #20]
 8003d14:	6909      	ldr	r1, [r1, #16]
 8003d16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d1a:	eba3 0901 	sub.w	r9, r3, r1
 8003d1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d22:	1c7b      	adds	r3, r7, #1
 8003d24:	444b      	add	r3, r9
 8003d26:	106d      	asrs	r5, r5, #1
 8003d28:	429d      	cmp	r5, r3
 8003d2a:	bf38      	it	cc
 8003d2c:	461d      	movcc	r5, r3
 8003d2e:	0553      	lsls	r3, r2, #21
 8003d30:	d527      	bpl.n	8003d82 <__ssputs_r+0x8e>
 8003d32:	4629      	mov	r1, r5
 8003d34:	f7ff ff52 	bl	8003bdc <_malloc_r>
 8003d38:	4606      	mov	r6, r0
 8003d3a:	b360      	cbz	r0, 8003d96 <__ssputs_r+0xa2>
 8003d3c:	6921      	ldr	r1, [r4, #16]
 8003d3e:	464a      	mov	r2, r9
 8003d40:	f000 fae8 	bl	8004314 <memcpy>
 8003d44:	89a3      	ldrh	r3, [r4, #12]
 8003d46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d4e:	81a3      	strh	r3, [r4, #12]
 8003d50:	6126      	str	r6, [r4, #16]
 8003d52:	6165      	str	r5, [r4, #20]
 8003d54:	444e      	add	r6, r9
 8003d56:	eba5 0509 	sub.w	r5, r5, r9
 8003d5a:	6026      	str	r6, [r4, #0]
 8003d5c:	60a5      	str	r5, [r4, #8]
 8003d5e:	463e      	mov	r6, r7
 8003d60:	42be      	cmp	r6, r7
 8003d62:	d900      	bls.n	8003d66 <__ssputs_r+0x72>
 8003d64:	463e      	mov	r6, r7
 8003d66:	6820      	ldr	r0, [r4, #0]
 8003d68:	4632      	mov	r2, r6
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	f000 faa8 	bl	80042c0 <memmove>
 8003d70:	68a3      	ldr	r3, [r4, #8]
 8003d72:	1b9b      	subs	r3, r3, r6
 8003d74:	60a3      	str	r3, [r4, #8]
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	4433      	add	r3, r6
 8003d7a:	6023      	str	r3, [r4, #0]
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d82:	462a      	mov	r2, r5
 8003d84:	f000 fad4 	bl	8004330 <_realloc_r>
 8003d88:	4606      	mov	r6, r0
 8003d8a:	2800      	cmp	r0, #0
 8003d8c:	d1e0      	bne.n	8003d50 <__ssputs_r+0x5c>
 8003d8e:	6921      	ldr	r1, [r4, #16]
 8003d90:	4650      	mov	r0, sl
 8003d92:	f7ff feb7 	bl	8003b04 <_free_r>
 8003d96:	230c      	movs	r3, #12
 8003d98:	f8ca 3000 	str.w	r3, [sl]
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003da2:	81a3      	strh	r3, [r4, #12]
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	e7e9      	b.n	8003d7e <__ssputs_r+0x8a>
	...

08003dac <_svfiprintf_r>:
 8003dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db0:	4698      	mov	r8, r3
 8003db2:	898b      	ldrh	r3, [r1, #12]
 8003db4:	061b      	lsls	r3, r3, #24
 8003db6:	b09d      	sub	sp, #116	@ 0x74
 8003db8:	4607      	mov	r7, r0
 8003dba:	460d      	mov	r5, r1
 8003dbc:	4614      	mov	r4, r2
 8003dbe:	d510      	bpl.n	8003de2 <_svfiprintf_r+0x36>
 8003dc0:	690b      	ldr	r3, [r1, #16]
 8003dc2:	b973      	cbnz	r3, 8003de2 <_svfiprintf_r+0x36>
 8003dc4:	2140      	movs	r1, #64	@ 0x40
 8003dc6:	f7ff ff09 	bl	8003bdc <_malloc_r>
 8003dca:	6028      	str	r0, [r5, #0]
 8003dcc:	6128      	str	r0, [r5, #16]
 8003dce:	b930      	cbnz	r0, 8003dde <_svfiprintf_r+0x32>
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd8:	b01d      	add	sp, #116	@ 0x74
 8003dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dde:	2340      	movs	r3, #64	@ 0x40
 8003de0:	616b      	str	r3, [r5, #20]
 8003de2:	2300      	movs	r3, #0
 8003de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003de6:	2320      	movs	r3, #32
 8003de8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8003df0:	2330      	movs	r3, #48	@ 0x30
 8003df2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f90 <_svfiprintf_r+0x1e4>
 8003df6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003dfa:	f04f 0901 	mov.w	r9, #1
 8003dfe:	4623      	mov	r3, r4
 8003e00:	469a      	mov	sl, r3
 8003e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e06:	b10a      	cbz	r2, 8003e0c <_svfiprintf_r+0x60>
 8003e08:	2a25      	cmp	r2, #37	@ 0x25
 8003e0a:	d1f9      	bne.n	8003e00 <_svfiprintf_r+0x54>
 8003e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8003e10:	d00b      	beq.n	8003e2a <_svfiprintf_r+0x7e>
 8003e12:	465b      	mov	r3, fp
 8003e14:	4622      	mov	r2, r4
 8003e16:	4629      	mov	r1, r5
 8003e18:	4638      	mov	r0, r7
 8003e1a:	f7ff ff6b 	bl	8003cf4 <__ssputs_r>
 8003e1e:	3001      	adds	r0, #1
 8003e20:	f000 80a7 	beq.w	8003f72 <_svfiprintf_r+0x1c6>
 8003e24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e26:	445a      	add	r2, fp
 8003e28:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 809f 	beq.w	8003f72 <_svfiprintf_r+0x1c6>
 8003e34:	2300      	movs	r3, #0
 8003e36:	f04f 32ff 	mov.w	r2, #4294967295
 8003e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e3e:	f10a 0a01 	add.w	sl, sl, #1
 8003e42:	9304      	str	r3, [sp, #16]
 8003e44:	9307      	str	r3, [sp, #28]
 8003e46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e4c:	4654      	mov	r4, sl
 8003e4e:	2205      	movs	r2, #5
 8003e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e54:	484e      	ldr	r0, [pc, #312]	@ (8003f90 <_svfiprintf_r+0x1e4>)
 8003e56:	f7fc f9fb 	bl	8000250 <memchr>
 8003e5a:	9a04      	ldr	r2, [sp, #16]
 8003e5c:	b9d8      	cbnz	r0, 8003e96 <_svfiprintf_r+0xea>
 8003e5e:	06d0      	lsls	r0, r2, #27
 8003e60:	bf44      	itt	mi
 8003e62:	2320      	movmi	r3, #32
 8003e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e68:	0711      	lsls	r1, r2, #28
 8003e6a:	bf44      	itt	mi
 8003e6c:	232b      	movmi	r3, #43	@ 0x2b
 8003e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e72:	f89a 3000 	ldrb.w	r3, [sl]
 8003e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e78:	d015      	beq.n	8003ea6 <_svfiprintf_r+0xfa>
 8003e7a:	9a07      	ldr	r2, [sp, #28]
 8003e7c:	4654      	mov	r4, sl
 8003e7e:	2000      	movs	r0, #0
 8003e80:	f04f 0c0a 	mov.w	ip, #10
 8003e84:	4621      	mov	r1, r4
 8003e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e8a:	3b30      	subs	r3, #48	@ 0x30
 8003e8c:	2b09      	cmp	r3, #9
 8003e8e:	d94b      	bls.n	8003f28 <_svfiprintf_r+0x17c>
 8003e90:	b1b0      	cbz	r0, 8003ec0 <_svfiprintf_r+0x114>
 8003e92:	9207      	str	r2, [sp, #28]
 8003e94:	e014      	b.n	8003ec0 <_svfiprintf_r+0x114>
 8003e96:	eba0 0308 	sub.w	r3, r0, r8
 8003e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	9304      	str	r3, [sp, #16]
 8003ea2:	46a2      	mov	sl, r4
 8003ea4:	e7d2      	b.n	8003e4c <_svfiprintf_r+0xa0>
 8003ea6:	9b03      	ldr	r3, [sp, #12]
 8003ea8:	1d19      	adds	r1, r3, #4
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	9103      	str	r1, [sp, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bfbb      	ittet	lt
 8003eb2:	425b      	neglt	r3, r3
 8003eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8003eb8:	9307      	strge	r3, [sp, #28]
 8003eba:	9307      	strlt	r3, [sp, #28]
 8003ebc:	bfb8      	it	lt
 8003ebe:	9204      	strlt	r2, [sp, #16]
 8003ec0:	7823      	ldrb	r3, [r4, #0]
 8003ec2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ec4:	d10a      	bne.n	8003edc <_svfiprintf_r+0x130>
 8003ec6:	7863      	ldrb	r3, [r4, #1]
 8003ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003eca:	d132      	bne.n	8003f32 <_svfiprintf_r+0x186>
 8003ecc:	9b03      	ldr	r3, [sp, #12]
 8003ece:	1d1a      	adds	r2, r3, #4
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	9203      	str	r2, [sp, #12]
 8003ed4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ed8:	3402      	adds	r4, #2
 8003eda:	9305      	str	r3, [sp, #20]
 8003edc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003fa0 <_svfiprintf_r+0x1f4>
 8003ee0:	7821      	ldrb	r1, [r4, #0]
 8003ee2:	2203      	movs	r2, #3
 8003ee4:	4650      	mov	r0, sl
 8003ee6:	f7fc f9b3 	bl	8000250 <memchr>
 8003eea:	b138      	cbz	r0, 8003efc <_svfiprintf_r+0x150>
 8003eec:	9b04      	ldr	r3, [sp, #16]
 8003eee:	eba0 000a 	sub.w	r0, r0, sl
 8003ef2:	2240      	movs	r2, #64	@ 0x40
 8003ef4:	4082      	lsls	r2, r0
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	3401      	adds	r4, #1
 8003efa:	9304      	str	r3, [sp, #16]
 8003efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f00:	4824      	ldr	r0, [pc, #144]	@ (8003f94 <_svfiprintf_r+0x1e8>)
 8003f02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f06:	2206      	movs	r2, #6
 8003f08:	f7fc f9a2 	bl	8000250 <memchr>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d036      	beq.n	8003f7e <_svfiprintf_r+0x1d2>
 8003f10:	4b21      	ldr	r3, [pc, #132]	@ (8003f98 <_svfiprintf_r+0x1ec>)
 8003f12:	bb1b      	cbnz	r3, 8003f5c <_svfiprintf_r+0x1b0>
 8003f14:	9b03      	ldr	r3, [sp, #12]
 8003f16:	3307      	adds	r3, #7
 8003f18:	f023 0307 	bic.w	r3, r3, #7
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	9303      	str	r3, [sp, #12]
 8003f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f22:	4433      	add	r3, r6
 8003f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f26:	e76a      	b.n	8003dfe <_svfiprintf_r+0x52>
 8003f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	2001      	movs	r0, #1
 8003f30:	e7a8      	b.n	8003e84 <_svfiprintf_r+0xd8>
 8003f32:	2300      	movs	r3, #0
 8003f34:	3401      	adds	r4, #1
 8003f36:	9305      	str	r3, [sp, #20]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f04f 0c0a 	mov.w	ip, #10
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f44:	3a30      	subs	r2, #48	@ 0x30
 8003f46:	2a09      	cmp	r2, #9
 8003f48:	d903      	bls.n	8003f52 <_svfiprintf_r+0x1a6>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0c6      	beq.n	8003edc <_svfiprintf_r+0x130>
 8003f4e:	9105      	str	r1, [sp, #20]
 8003f50:	e7c4      	b.n	8003edc <_svfiprintf_r+0x130>
 8003f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f56:	4604      	mov	r4, r0
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e7f0      	b.n	8003f3e <_svfiprintf_r+0x192>
 8003f5c:	ab03      	add	r3, sp, #12
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	462a      	mov	r2, r5
 8003f62:	4b0e      	ldr	r3, [pc, #56]	@ (8003f9c <_svfiprintf_r+0x1f0>)
 8003f64:	a904      	add	r1, sp, #16
 8003f66:	4638      	mov	r0, r7
 8003f68:	f3af 8000 	nop.w
 8003f6c:	1c42      	adds	r2, r0, #1
 8003f6e:	4606      	mov	r6, r0
 8003f70:	d1d6      	bne.n	8003f20 <_svfiprintf_r+0x174>
 8003f72:	89ab      	ldrh	r3, [r5, #12]
 8003f74:	065b      	lsls	r3, r3, #25
 8003f76:	f53f af2d 	bmi.w	8003dd4 <_svfiprintf_r+0x28>
 8003f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f7c:	e72c      	b.n	8003dd8 <_svfiprintf_r+0x2c>
 8003f7e:	ab03      	add	r3, sp, #12
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	462a      	mov	r2, r5
 8003f84:	4b05      	ldr	r3, [pc, #20]	@ (8003f9c <_svfiprintf_r+0x1f0>)
 8003f86:	a904      	add	r1, sp, #16
 8003f88:	4638      	mov	r0, r7
 8003f8a:	f000 f879 	bl	8004080 <_printf_i>
 8003f8e:	e7ed      	b.n	8003f6c <_svfiprintf_r+0x1c0>
 8003f90:	080043d8 	.word	0x080043d8
 8003f94:	080043e2 	.word	0x080043e2
 8003f98:	00000000 	.word	0x00000000
 8003f9c:	08003cf5 	.word	0x08003cf5
 8003fa0:	080043de 	.word	0x080043de

08003fa4 <_printf_common>:
 8003fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa8:	4616      	mov	r6, r2
 8003faa:	4698      	mov	r8, r3
 8003fac:	688a      	ldr	r2, [r1, #8]
 8003fae:	690b      	ldr	r3, [r1, #16]
 8003fb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	bfb8      	it	lt
 8003fb8:	4613      	movlt	r3, r2
 8003fba:	6033      	str	r3, [r6, #0]
 8003fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fc0:	4607      	mov	r7, r0
 8003fc2:	460c      	mov	r4, r1
 8003fc4:	b10a      	cbz	r2, 8003fca <_printf_common+0x26>
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	6033      	str	r3, [r6, #0]
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	0699      	lsls	r1, r3, #26
 8003fce:	bf42      	ittt	mi
 8003fd0:	6833      	ldrmi	r3, [r6, #0]
 8003fd2:	3302      	addmi	r3, #2
 8003fd4:	6033      	strmi	r3, [r6, #0]
 8003fd6:	6825      	ldr	r5, [r4, #0]
 8003fd8:	f015 0506 	ands.w	r5, r5, #6
 8003fdc:	d106      	bne.n	8003fec <_printf_common+0x48>
 8003fde:	f104 0a19 	add.w	sl, r4, #25
 8003fe2:	68e3      	ldr	r3, [r4, #12]
 8003fe4:	6832      	ldr	r2, [r6, #0]
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	42ab      	cmp	r3, r5
 8003fea:	dc26      	bgt.n	800403a <_printf_common+0x96>
 8003fec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ff0:	6822      	ldr	r2, [r4, #0]
 8003ff2:	3b00      	subs	r3, #0
 8003ff4:	bf18      	it	ne
 8003ff6:	2301      	movne	r3, #1
 8003ff8:	0692      	lsls	r2, r2, #26
 8003ffa:	d42b      	bmi.n	8004054 <_printf_common+0xb0>
 8003ffc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004000:	4641      	mov	r1, r8
 8004002:	4638      	mov	r0, r7
 8004004:	47c8      	blx	r9
 8004006:	3001      	adds	r0, #1
 8004008:	d01e      	beq.n	8004048 <_printf_common+0xa4>
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	6922      	ldr	r2, [r4, #16]
 800400e:	f003 0306 	and.w	r3, r3, #6
 8004012:	2b04      	cmp	r3, #4
 8004014:	bf02      	ittt	eq
 8004016:	68e5      	ldreq	r5, [r4, #12]
 8004018:	6833      	ldreq	r3, [r6, #0]
 800401a:	1aed      	subeq	r5, r5, r3
 800401c:	68a3      	ldr	r3, [r4, #8]
 800401e:	bf0c      	ite	eq
 8004020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004024:	2500      	movne	r5, #0
 8004026:	4293      	cmp	r3, r2
 8004028:	bfc4      	itt	gt
 800402a:	1a9b      	subgt	r3, r3, r2
 800402c:	18ed      	addgt	r5, r5, r3
 800402e:	2600      	movs	r6, #0
 8004030:	341a      	adds	r4, #26
 8004032:	42b5      	cmp	r5, r6
 8004034:	d11a      	bne.n	800406c <_printf_common+0xc8>
 8004036:	2000      	movs	r0, #0
 8004038:	e008      	b.n	800404c <_printf_common+0xa8>
 800403a:	2301      	movs	r3, #1
 800403c:	4652      	mov	r2, sl
 800403e:	4641      	mov	r1, r8
 8004040:	4638      	mov	r0, r7
 8004042:	47c8      	blx	r9
 8004044:	3001      	adds	r0, #1
 8004046:	d103      	bne.n	8004050 <_printf_common+0xac>
 8004048:	f04f 30ff 	mov.w	r0, #4294967295
 800404c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004050:	3501      	adds	r5, #1
 8004052:	e7c6      	b.n	8003fe2 <_printf_common+0x3e>
 8004054:	18e1      	adds	r1, r4, r3
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	2030      	movs	r0, #48	@ 0x30
 800405a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800405e:	4422      	add	r2, r4
 8004060:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004064:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004068:	3302      	adds	r3, #2
 800406a:	e7c7      	b.n	8003ffc <_printf_common+0x58>
 800406c:	2301      	movs	r3, #1
 800406e:	4622      	mov	r2, r4
 8004070:	4641      	mov	r1, r8
 8004072:	4638      	mov	r0, r7
 8004074:	47c8      	blx	r9
 8004076:	3001      	adds	r0, #1
 8004078:	d0e6      	beq.n	8004048 <_printf_common+0xa4>
 800407a:	3601      	adds	r6, #1
 800407c:	e7d9      	b.n	8004032 <_printf_common+0x8e>
	...

08004080 <_printf_i>:
 8004080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004084:	7e0f      	ldrb	r7, [r1, #24]
 8004086:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004088:	2f78      	cmp	r7, #120	@ 0x78
 800408a:	4691      	mov	r9, r2
 800408c:	4680      	mov	r8, r0
 800408e:	460c      	mov	r4, r1
 8004090:	469a      	mov	sl, r3
 8004092:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004096:	d807      	bhi.n	80040a8 <_printf_i+0x28>
 8004098:	2f62      	cmp	r7, #98	@ 0x62
 800409a:	d80a      	bhi.n	80040b2 <_printf_i+0x32>
 800409c:	2f00      	cmp	r7, #0
 800409e:	f000 80d2 	beq.w	8004246 <_printf_i+0x1c6>
 80040a2:	2f58      	cmp	r7, #88	@ 0x58
 80040a4:	f000 80b9 	beq.w	800421a <_printf_i+0x19a>
 80040a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040b0:	e03a      	b.n	8004128 <_printf_i+0xa8>
 80040b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040b6:	2b15      	cmp	r3, #21
 80040b8:	d8f6      	bhi.n	80040a8 <_printf_i+0x28>
 80040ba:	a101      	add	r1, pc, #4	@ (adr r1, 80040c0 <_printf_i+0x40>)
 80040bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040c0:	08004119 	.word	0x08004119
 80040c4:	0800412d 	.word	0x0800412d
 80040c8:	080040a9 	.word	0x080040a9
 80040cc:	080040a9 	.word	0x080040a9
 80040d0:	080040a9 	.word	0x080040a9
 80040d4:	080040a9 	.word	0x080040a9
 80040d8:	0800412d 	.word	0x0800412d
 80040dc:	080040a9 	.word	0x080040a9
 80040e0:	080040a9 	.word	0x080040a9
 80040e4:	080040a9 	.word	0x080040a9
 80040e8:	080040a9 	.word	0x080040a9
 80040ec:	0800422d 	.word	0x0800422d
 80040f0:	08004157 	.word	0x08004157
 80040f4:	080041e7 	.word	0x080041e7
 80040f8:	080040a9 	.word	0x080040a9
 80040fc:	080040a9 	.word	0x080040a9
 8004100:	0800424f 	.word	0x0800424f
 8004104:	080040a9 	.word	0x080040a9
 8004108:	08004157 	.word	0x08004157
 800410c:	080040a9 	.word	0x080040a9
 8004110:	080040a9 	.word	0x080040a9
 8004114:	080041ef 	.word	0x080041ef
 8004118:	6833      	ldr	r3, [r6, #0]
 800411a:	1d1a      	adds	r2, r3, #4
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6032      	str	r2, [r6, #0]
 8004120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004124:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004128:	2301      	movs	r3, #1
 800412a:	e09d      	b.n	8004268 <_printf_i+0x1e8>
 800412c:	6833      	ldr	r3, [r6, #0]
 800412e:	6820      	ldr	r0, [r4, #0]
 8004130:	1d19      	adds	r1, r3, #4
 8004132:	6031      	str	r1, [r6, #0]
 8004134:	0606      	lsls	r6, r0, #24
 8004136:	d501      	bpl.n	800413c <_printf_i+0xbc>
 8004138:	681d      	ldr	r5, [r3, #0]
 800413a:	e003      	b.n	8004144 <_printf_i+0xc4>
 800413c:	0645      	lsls	r5, r0, #25
 800413e:	d5fb      	bpl.n	8004138 <_printf_i+0xb8>
 8004140:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004144:	2d00      	cmp	r5, #0
 8004146:	da03      	bge.n	8004150 <_printf_i+0xd0>
 8004148:	232d      	movs	r3, #45	@ 0x2d
 800414a:	426d      	negs	r5, r5
 800414c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004150:	4859      	ldr	r0, [pc, #356]	@ (80042b8 <_printf_i+0x238>)
 8004152:	230a      	movs	r3, #10
 8004154:	e011      	b.n	800417a <_printf_i+0xfa>
 8004156:	6821      	ldr	r1, [r4, #0]
 8004158:	6833      	ldr	r3, [r6, #0]
 800415a:	0608      	lsls	r0, r1, #24
 800415c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004160:	d402      	bmi.n	8004168 <_printf_i+0xe8>
 8004162:	0649      	lsls	r1, r1, #25
 8004164:	bf48      	it	mi
 8004166:	b2ad      	uxthmi	r5, r5
 8004168:	2f6f      	cmp	r7, #111	@ 0x6f
 800416a:	4853      	ldr	r0, [pc, #332]	@ (80042b8 <_printf_i+0x238>)
 800416c:	6033      	str	r3, [r6, #0]
 800416e:	bf14      	ite	ne
 8004170:	230a      	movne	r3, #10
 8004172:	2308      	moveq	r3, #8
 8004174:	2100      	movs	r1, #0
 8004176:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800417a:	6866      	ldr	r6, [r4, #4]
 800417c:	60a6      	str	r6, [r4, #8]
 800417e:	2e00      	cmp	r6, #0
 8004180:	bfa2      	ittt	ge
 8004182:	6821      	ldrge	r1, [r4, #0]
 8004184:	f021 0104 	bicge.w	r1, r1, #4
 8004188:	6021      	strge	r1, [r4, #0]
 800418a:	b90d      	cbnz	r5, 8004190 <_printf_i+0x110>
 800418c:	2e00      	cmp	r6, #0
 800418e:	d04b      	beq.n	8004228 <_printf_i+0x1a8>
 8004190:	4616      	mov	r6, r2
 8004192:	fbb5 f1f3 	udiv	r1, r5, r3
 8004196:	fb03 5711 	mls	r7, r3, r1, r5
 800419a:	5dc7      	ldrb	r7, [r0, r7]
 800419c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041a0:	462f      	mov	r7, r5
 80041a2:	42bb      	cmp	r3, r7
 80041a4:	460d      	mov	r5, r1
 80041a6:	d9f4      	bls.n	8004192 <_printf_i+0x112>
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d10b      	bne.n	80041c4 <_printf_i+0x144>
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	07df      	lsls	r7, r3, #31
 80041b0:	d508      	bpl.n	80041c4 <_printf_i+0x144>
 80041b2:	6923      	ldr	r3, [r4, #16]
 80041b4:	6861      	ldr	r1, [r4, #4]
 80041b6:	4299      	cmp	r1, r3
 80041b8:	bfde      	ittt	le
 80041ba:	2330      	movle	r3, #48	@ 0x30
 80041bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041c4:	1b92      	subs	r2, r2, r6
 80041c6:	6122      	str	r2, [r4, #16]
 80041c8:	f8cd a000 	str.w	sl, [sp]
 80041cc:	464b      	mov	r3, r9
 80041ce:	aa03      	add	r2, sp, #12
 80041d0:	4621      	mov	r1, r4
 80041d2:	4640      	mov	r0, r8
 80041d4:	f7ff fee6 	bl	8003fa4 <_printf_common>
 80041d8:	3001      	adds	r0, #1
 80041da:	d14a      	bne.n	8004272 <_printf_i+0x1f2>
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	b004      	add	sp, #16
 80041e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	f043 0320 	orr.w	r3, r3, #32
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	4833      	ldr	r0, [pc, #204]	@ (80042bc <_printf_i+0x23c>)
 80041f0:	2778      	movs	r7, #120	@ 0x78
 80041f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	6831      	ldr	r1, [r6, #0]
 80041fa:	061f      	lsls	r7, r3, #24
 80041fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8004200:	d402      	bmi.n	8004208 <_printf_i+0x188>
 8004202:	065f      	lsls	r7, r3, #25
 8004204:	bf48      	it	mi
 8004206:	b2ad      	uxthmi	r5, r5
 8004208:	6031      	str	r1, [r6, #0]
 800420a:	07d9      	lsls	r1, r3, #31
 800420c:	bf44      	itt	mi
 800420e:	f043 0320 	orrmi.w	r3, r3, #32
 8004212:	6023      	strmi	r3, [r4, #0]
 8004214:	b11d      	cbz	r5, 800421e <_printf_i+0x19e>
 8004216:	2310      	movs	r3, #16
 8004218:	e7ac      	b.n	8004174 <_printf_i+0xf4>
 800421a:	4827      	ldr	r0, [pc, #156]	@ (80042b8 <_printf_i+0x238>)
 800421c:	e7e9      	b.n	80041f2 <_printf_i+0x172>
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	f023 0320 	bic.w	r3, r3, #32
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	e7f6      	b.n	8004216 <_printf_i+0x196>
 8004228:	4616      	mov	r6, r2
 800422a:	e7bd      	b.n	80041a8 <_printf_i+0x128>
 800422c:	6833      	ldr	r3, [r6, #0]
 800422e:	6825      	ldr	r5, [r4, #0]
 8004230:	6961      	ldr	r1, [r4, #20]
 8004232:	1d18      	adds	r0, r3, #4
 8004234:	6030      	str	r0, [r6, #0]
 8004236:	062e      	lsls	r6, r5, #24
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	d501      	bpl.n	8004240 <_printf_i+0x1c0>
 800423c:	6019      	str	r1, [r3, #0]
 800423e:	e002      	b.n	8004246 <_printf_i+0x1c6>
 8004240:	0668      	lsls	r0, r5, #25
 8004242:	d5fb      	bpl.n	800423c <_printf_i+0x1bc>
 8004244:	8019      	strh	r1, [r3, #0]
 8004246:	2300      	movs	r3, #0
 8004248:	6123      	str	r3, [r4, #16]
 800424a:	4616      	mov	r6, r2
 800424c:	e7bc      	b.n	80041c8 <_printf_i+0x148>
 800424e:	6833      	ldr	r3, [r6, #0]
 8004250:	1d1a      	adds	r2, r3, #4
 8004252:	6032      	str	r2, [r6, #0]
 8004254:	681e      	ldr	r6, [r3, #0]
 8004256:	6862      	ldr	r2, [r4, #4]
 8004258:	2100      	movs	r1, #0
 800425a:	4630      	mov	r0, r6
 800425c:	f7fb fff8 	bl	8000250 <memchr>
 8004260:	b108      	cbz	r0, 8004266 <_printf_i+0x1e6>
 8004262:	1b80      	subs	r0, r0, r6
 8004264:	6060      	str	r0, [r4, #4]
 8004266:	6863      	ldr	r3, [r4, #4]
 8004268:	6123      	str	r3, [r4, #16]
 800426a:	2300      	movs	r3, #0
 800426c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004270:	e7aa      	b.n	80041c8 <_printf_i+0x148>
 8004272:	6923      	ldr	r3, [r4, #16]
 8004274:	4632      	mov	r2, r6
 8004276:	4649      	mov	r1, r9
 8004278:	4640      	mov	r0, r8
 800427a:	47d0      	blx	sl
 800427c:	3001      	adds	r0, #1
 800427e:	d0ad      	beq.n	80041dc <_printf_i+0x15c>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	079b      	lsls	r3, r3, #30
 8004284:	d413      	bmi.n	80042ae <_printf_i+0x22e>
 8004286:	68e0      	ldr	r0, [r4, #12]
 8004288:	9b03      	ldr	r3, [sp, #12]
 800428a:	4298      	cmp	r0, r3
 800428c:	bfb8      	it	lt
 800428e:	4618      	movlt	r0, r3
 8004290:	e7a6      	b.n	80041e0 <_printf_i+0x160>
 8004292:	2301      	movs	r3, #1
 8004294:	4632      	mov	r2, r6
 8004296:	4649      	mov	r1, r9
 8004298:	4640      	mov	r0, r8
 800429a:	47d0      	blx	sl
 800429c:	3001      	adds	r0, #1
 800429e:	d09d      	beq.n	80041dc <_printf_i+0x15c>
 80042a0:	3501      	adds	r5, #1
 80042a2:	68e3      	ldr	r3, [r4, #12]
 80042a4:	9903      	ldr	r1, [sp, #12]
 80042a6:	1a5b      	subs	r3, r3, r1
 80042a8:	42ab      	cmp	r3, r5
 80042aa:	dcf2      	bgt.n	8004292 <_printf_i+0x212>
 80042ac:	e7eb      	b.n	8004286 <_printf_i+0x206>
 80042ae:	2500      	movs	r5, #0
 80042b0:	f104 0619 	add.w	r6, r4, #25
 80042b4:	e7f5      	b.n	80042a2 <_printf_i+0x222>
 80042b6:	bf00      	nop
 80042b8:	080043e9 	.word	0x080043e9
 80042bc:	080043fa 	.word	0x080043fa

080042c0 <memmove>:
 80042c0:	4288      	cmp	r0, r1
 80042c2:	b510      	push	{r4, lr}
 80042c4:	eb01 0402 	add.w	r4, r1, r2
 80042c8:	d902      	bls.n	80042d0 <memmove+0x10>
 80042ca:	4284      	cmp	r4, r0
 80042cc:	4623      	mov	r3, r4
 80042ce:	d807      	bhi.n	80042e0 <memmove+0x20>
 80042d0:	1e43      	subs	r3, r0, #1
 80042d2:	42a1      	cmp	r1, r4
 80042d4:	d008      	beq.n	80042e8 <memmove+0x28>
 80042d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042de:	e7f8      	b.n	80042d2 <memmove+0x12>
 80042e0:	4402      	add	r2, r0
 80042e2:	4601      	mov	r1, r0
 80042e4:	428a      	cmp	r2, r1
 80042e6:	d100      	bne.n	80042ea <memmove+0x2a>
 80042e8:	bd10      	pop	{r4, pc}
 80042ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042f2:	e7f7      	b.n	80042e4 <memmove+0x24>

080042f4 <_sbrk_r>:
 80042f4:	b538      	push	{r3, r4, r5, lr}
 80042f6:	4d06      	ldr	r5, [pc, #24]	@ (8004310 <_sbrk_r+0x1c>)
 80042f8:	2300      	movs	r3, #0
 80042fa:	4604      	mov	r4, r0
 80042fc:	4608      	mov	r0, r1
 80042fe:	602b      	str	r3, [r5, #0]
 8004300:	f7fc fb0c 	bl	800091c <_sbrk>
 8004304:	1c43      	adds	r3, r0, #1
 8004306:	d102      	bne.n	800430e <_sbrk_r+0x1a>
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	b103      	cbz	r3, 800430e <_sbrk_r+0x1a>
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	bd38      	pop	{r3, r4, r5, pc}
 8004310:	200002dc 	.word	0x200002dc

08004314 <memcpy>:
 8004314:	440a      	add	r2, r1
 8004316:	4291      	cmp	r1, r2
 8004318:	f100 33ff 	add.w	r3, r0, #4294967295
 800431c:	d100      	bne.n	8004320 <memcpy+0xc>
 800431e:	4770      	bx	lr
 8004320:	b510      	push	{r4, lr}
 8004322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004326:	f803 4f01 	strb.w	r4, [r3, #1]!
 800432a:	4291      	cmp	r1, r2
 800432c:	d1f9      	bne.n	8004322 <memcpy+0xe>
 800432e:	bd10      	pop	{r4, pc}

08004330 <_realloc_r>:
 8004330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004334:	4680      	mov	r8, r0
 8004336:	4615      	mov	r5, r2
 8004338:	460c      	mov	r4, r1
 800433a:	b921      	cbnz	r1, 8004346 <_realloc_r+0x16>
 800433c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004340:	4611      	mov	r1, r2
 8004342:	f7ff bc4b 	b.w	8003bdc <_malloc_r>
 8004346:	b92a      	cbnz	r2, 8004354 <_realloc_r+0x24>
 8004348:	f7ff fbdc 	bl	8003b04 <_free_r>
 800434c:	2400      	movs	r4, #0
 800434e:	4620      	mov	r0, r4
 8004350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004354:	f000 f81a 	bl	800438c <_malloc_usable_size_r>
 8004358:	4285      	cmp	r5, r0
 800435a:	4606      	mov	r6, r0
 800435c:	d802      	bhi.n	8004364 <_realloc_r+0x34>
 800435e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004362:	d8f4      	bhi.n	800434e <_realloc_r+0x1e>
 8004364:	4629      	mov	r1, r5
 8004366:	4640      	mov	r0, r8
 8004368:	f7ff fc38 	bl	8003bdc <_malloc_r>
 800436c:	4607      	mov	r7, r0
 800436e:	2800      	cmp	r0, #0
 8004370:	d0ec      	beq.n	800434c <_realloc_r+0x1c>
 8004372:	42b5      	cmp	r5, r6
 8004374:	462a      	mov	r2, r5
 8004376:	4621      	mov	r1, r4
 8004378:	bf28      	it	cs
 800437a:	4632      	movcs	r2, r6
 800437c:	f7ff ffca 	bl	8004314 <memcpy>
 8004380:	4621      	mov	r1, r4
 8004382:	4640      	mov	r0, r8
 8004384:	f7ff fbbe 	bl	8003b04 <_free_r>
 8004388:	463c      	mov	r4, r7
 800438a:	e7e0      	b.n	800434e <_realloc_r+0x1e>

0800438c <_malloc_usable_size_r>:
 800438c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004390:	1f18      	subs	r0, r3, #4
 8004392:	2b00      	cmp	r3, #0
 8004394:	bfbc      	itt	lt
 8004396:	580b      	ldrlt	r3, [r1, r0]
 8004398:	18c0      	addlt	r0, r0, r3
 800439a:	4770      	bx	lr

0800439c <_init>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	bf00      	nop
 80043a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a2:	bc08      	pop	{r3}
 80043a4:	469e      	mov	lr, r3
 80043a6:	4770      	bx	lr

080043a8 <_fini>:
 80043a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043aa:	bf00      	nop
 80043ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ae:	bc08      	pop	{r3}
 80043b0:	469e      	mov	lr, r3
 80043b2:	4770      	bx	lr
