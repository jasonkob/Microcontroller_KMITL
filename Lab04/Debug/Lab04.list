
Lab04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e08  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003000  08003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003028  08003028  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003028  08003028  00004028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003030  08003030  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003030  08003030  00004030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003034  08003034  00004034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003038  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08003044  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08003044  000050b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a69d  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a68  00000000  00000000  0000f6d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  00011140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b1  00000000  00000000  000118c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002624d  00000000  00000000  00011e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abd5  00000000  00000000  000380be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed403  00000000  00000000  00042c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130096  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ccc  00000000  00000000  001300dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00131da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002fe8 	.word	0x08002fe8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002fe8 	.word	0x08002fe8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	@ 0x28
 800052c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	4b3a      	ldr	r3, [pc, #232]	@ (8000628 <MX_GPIO_Init+0x100>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a39      	ldr	r2, [pc, #228]	@ (8000628 <MX_GPIO_Init+0x100>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b37      	ldr	r3, [pc, #220]	@ (8000628 <MX_GPIO_Init+0x100>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b34      	ldr	r3, [pc, #208]	@ (8000628 <MX_GPIO_Init+0x100>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a33      	ldr	r2, [pc, #204]	@ (8000628 <MX_GPIO_Init+0x100>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b31      	ldr	r3, [pc, #196]	@ (8000628 <MX_GPIO_Init+0x100>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b2e      	ldr	r3, [pc, #184]	@ (8000628 <MX_GPIO_Init+0x100>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	4a2d      	ldr	r2, [pc, #180]	@ (8000628 <MX_GPIO_Init+0x100>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	6313      	str	r3, [r2, #48]	@ 0x30
 800057a:	4b2b      	ldr	r3, [pc, #172]	@ (8000628 <MX_GPIO_Init+0x100>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000586:	4b28      	ldr	r3, [pc, #160]	@ (8000628 <MX_GPIO_Init+0x100>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a27      	ldr	r2, [pc, #156]	@ (8000628 <MX_GPIO_Init+0x100>)
 800058c:	f043 0308 	orr.w	r3, r3, #8
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b25      	ldr	r3, [pc, #148]	@ (8000628 <MX_GPIO_Init+0x100>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0308 	and.w	r3, r3, #8
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80005a4:	4821      	ldr	r0, [pc, #132]	@ (800062c <MX_GPIO_Init+0x104>)
 80005a6:	f000 fe37 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	481b      	ldr	r0, [pc, #108]	@ (8000630 <MX_GPIO_Init+0x108>)
 80005c2:	f000 fc7d 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005c6:	2301      	movs	r3, #1
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	4816      	ldr	r0, [pc, #88]	@ (8000634 <MX_GPIO_Init+0x10c>)
 80005dc:	f000 fc70 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80005e0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	480c      	ldr	r0, [pc, #48]	@ (800062c <MX_GPIO_Init+0x104>)
 80005fa:	f000 fc61 	bl	8000ec0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 3);
 80005fe:	2203      	movs	r2, #3
 8000600:	2102      	movs	r1, #2
 8000602:	2006      	movs	r0, #6
 8000604:	f000 fbad 	bl	8000d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000608:	2006      	movs	r0, #6
 800060a:	f000 fbc6 	bl	8000d9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	2103      	movs	r1, #3
 8000612:	2028      	movs	r0, #40	@ 0x28
 8000614:	f000 fba5 	bl	8000d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000618:	2028      	movs	r0, #40	@ 0x28
 800061a:	f000 fbbe 	bl	8000d9a <HAL_NVIC_EnableIRQ>

}
 800061e:	bf00      	nop
 8000620:	3728      	adds	r7, #40	@ 0x28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40020400 	.word	0x40020400
 8000630:	40020800 	.word	0x40020800
 8000634:	40020000 	.word	0x40020000

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800063c:	f000 f886 	bl	800074c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 fa33 	bl	8000aaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f814 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f7ff ff6e 	bl	8000528 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800064c:	f000 f974 	bl	8000938 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart3, (uint8_t *)".", 1, 100);
 8000650:	2364      	movs	r3, #100	@ 0x64
 8000652:	2201      	movs	r2, #1
 8000654:	4904      	ldr	r1, [pc, #16]	@ (8000668 <main+0x30>)
 8000656:	4805      	ldr	r0, [pc, #20]	@ (800066c <main+0x34>)
 8000658:	f001 ff90 	bl	800257c <HAL_UART_Transmit>
	  HAL_Delay(400);
 800065c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000660:	f000 fa80 	bl	8000b64 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, (uint8_t *)".", 1, 100);
 8000664:	bf00      	nop
 8000666:	e7f3      	b.n	8000650 <main+0x18>
 8000668:	08003000 	.word	0x08003000
 800066c:	20000028 	.word	0x20000028

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	@ 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	2234      	movs	r2, #52	@ 0x34
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f002 fc85 	bl	8002f8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	4b2b      	ldr	r3, [pc, #172]	@ (8000744 <SystemClock_Config+0xd4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	4a2a      	ldr	r2, [pc, #168]	@ (8000744 <SystemClock_Config+0xd4>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a0:	4b28      	ldr	r3, [pc, #160]	@ (8000744 <SystemClock_Config+0xd4>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <SystemClock_Config+0xd8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemClock_Config+0xd8>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <SystemClock_Config+0xd8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d8:	2308      	movs	r3, #8
 80006da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006dc:	23d8      	movs	r3, #216	@ 0xd8
 80006de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fe39 	bl	8001368 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006fc:	f000 f852 	bl	80007a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000700:	f000 fde2 	bl	80012c8 <HAL_PWREx_EnableOverDrive>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800070a:	f000 f84b 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000724:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	2107      	movs	r1, #7
 800072c:	4618      	mov	r0, r3
 800072e:	f001 f8c9 	bl	80018c4 <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000738:	f000 f834 	bl	80007a4 <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	3750      	adds	r7, #80	@ 0x50
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800075e:	f000 fb37 	bl	8000dd0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000762:	2301      	movs	r3, #1
 8000764:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000766:	2300      	movs	r3, #0
 8000768:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800076e:	231f      	movs	r3, #31
 8000770:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000772:	2387      	movs	r3, #135	@ 0x87
 8000774:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000776:	2300      	movs	r3, #0
 8000778:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800077a:	2300      	movs	r3, #0
 800077c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800077e:	2301      	movs	r3, #1
 8000780:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000782:	2301      	movs	r3, #1
 8000784:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800078e:	463b      	mov	r3, r7
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fb55 	bl	8000e40 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000796:	2004      	movs	r0, #4
 8000798:	f000 fb32 	bl	8000e00 <HAL_MPU_Enable>

}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <Error_Handler+0x8>

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <HAL_MspInit+0x44>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	4a0e      	ldr	r2, [pc, #56]	@ (80007f4 <HAL_MspInit+0x44>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <HAL_MspInit+0x44>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <HAL_MspInit+0x44>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d2:	4a08      	ldr	r2, [pc, #32]	@ (80007f4 <HAL_MspInit+0x44>)
 80007d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <HAL_MspInit+0x44>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80007e6:	2005      	movs	r0, #5
 80007e8:	f000 fab0 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <NMI_Handler+0x4>

08000800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <HardFault_Handler+0x4>

08000808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <MemManage_Handler+0x4>

08000810 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <UsageFault_Handler+0x4>

08000820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084e:	f000 f969 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_UART_Transmit(&huart3, (uint8_t *)"---", 3, 100);
 800085e:	2364      	movs	r3, #100	@ 0x64
 8000860:	2203      	movs	r2, #3
 8000862:	4910      	ldr	r1, [pc, #64]	@ (80008a4 <EXTI0_IRQHandler+0x4c>)
 8000864:	4810      	ldr	r0, [pc, #64]	@ (80008a8 <EXTI0_IRQHandler+0x50>)
 8000866:	f001 fe89 	bl	800257c <HAL_UART_Transmit>
	HAL_Delay(200);
 800086a:	20c8      	movs	r0, #200	@ 0xc8
 800086c:	f000 f97a 	bl	8000b64 <HAL_Delay>

	for(int i=0; i<20; i++)
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	e00b      	b.n	800088e <EXTI0_IRQHandler+0x36>
	{
		HAL_UART_Transmit(&huart3, (uint8_t *)"E", 1, 100);
 8000876:	2364      	movs	r3, #100	@ 0x64
 8000878:	2201      	movs	r2, #1
 800087a:	490c      	ldr	r1, [pc, #48]	@ (80008ac <EXTI0_IRQHandler+0x54>)
 800087c:	480a      	ldr	r0, [pc, #40]	@ (80008a8 <EXTI0_IRQHandler+0x50>)
 800087e:	f001 fe7d 	bl	800257c <HAL_UART_Transmit>
		HAL_Delay(200);
 8000882:	20c8      	movs	r0, #200	@ 0xc8
 8000884:	f000 f96e 	bl	8000b64 <HAL_Delay>
	for(int i=0; i<20; i++)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3301      	adds	r3, #1
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b13      	cmp	r3, #19
 8000892:	ddf0      	ble.n	8000876 <EXTI0_IRQHandler+0x1e>
	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000894:	2001      	movs	r0, #1
 8000896:	f000 fcf3 	bl	8001280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	08003004 	.word	0x08003004
 80008a8:	20000028 	.word	0x20000028
 80008ac:	08003008 	.word	0x08003008

080008b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_UART_Transmit(&huart3, (uint8_t *)"---", 3, 100);
 80008b6:	2364      	movs	r3, #100	@ 0x64
 80008b8:	2203      	movs	r2, #3
 80008ba:	4912      	ldr	r1, [pc, #72]	@ (8000904 <EXTI15_10_IRQHandler+0x54>)
 80008bc:	4812      	ldr	r0, [pc, #72]	@ (8000908 <EXTI15_10_IRQHandler+0x58>)
 80008be:	f001 fe5d 	bl	800257c <HAL_UART_Transmit>
	HAL_Delay(200);
 80008c2:	20c8      	movs	r0, #200	@ 0xc8
 80008c4:	f000 f94e 	bl	8000b64 <HAL_Delay>

	for(int i=0; i<20; i++)
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	e00b      	b.n	80008e6 <EXTI15_10_IRQHandler+0x36>
	{
		HAL_UART_Transmit(&huart3, (uint8_t *)"B", 1, 100);
 80008ce:	2364      	movs	r3, #100	@ 0x64
 80008d0:	2201      	movs	r2, #1
 80008d2:	490e      	ldr	r1, [pc, #56]	@ (800090c <EXTI15_10_IRQHandler+0x5c>)
 80008d4:	480c      	ldr	r0, [pc, #48]	@ (8000908 <EXTI15_10_IRQHandler+0x58>)
 80008d6:	f001 fe51 	bl	800257c <HAL_UART_Transmit>
		HAL_Delay(200);
 80008da:	20c8      	movs	r0, #200	@ 0xc8
 80008dc:	f000 f942 	bl	8000b64 <HAL_Delay>
	for(int i=0; i<20; i++)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3301      	adds	r3, #1
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b13      	cmp	r3, #19
 80008ea:	ddf0      	ble.n	80008ce <EXTI15_10_IRQHandler+0x1e>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80008ec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80008f0:	f000 fcc6 	bl	8001280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008f4:	2101      	movs	r1, #1
 80008f6:	4806      	ldr	r0, [pc, #24]	@ (8000910 <EXTI15_10_IRQHandler+0x60>)
 80008f8:	f000 fca7 	bl	800124a <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	08003004 	.word	0x08003004
 8000908:	20000028 	.word	0x20000028
 800090c:	0800300c 	.word	0x0800300c
 8000910:	40020400 	.word	0x40020400

08000914 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <SystemInit+0x20>)
 800091a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800091e:	4a05      	ldr	r2, [pc, #20]	@ (8000934 <SystemInit+0x20>)
 8000920:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000924:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 800093e:	4a15      	ldr	r2, [pc, #84]	@ (8000994 <MX_USART3_UART_Init+0x5c>)
 8000940:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 800097c:	f001 fdb0 	bl	80024e0 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000986:	f7ff ff0d 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000028 	.word	0x20000028
 8000994:	40004800 	.word	0x40004800

08000998 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b0ae      	sub	sp, #184	@ 0xb8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2290      	movs	r2, #144	@ 0x90
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 fae8 	bl	8002f8e <memset>
  if(uartHandle->Instance==USART3)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a22      	ldr	r2, [pc, #136]	@ (8000a4c <HAL_UART_MspInit+0xb4>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d13c      	bne.n	8000a42 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009cc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 f95a 	bl	8001c90 <HAL_RCCEx_PeriphCLKConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009e2:	f7ff fedf 	bl	80007a4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a50 <HAL_UART_MspInit+0xb8>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	4a19      	ldr	r2, [pc, #100]	@ (8000a50 <HAL_UART_MspInit+0xb8>)
 80009ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f2:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <HAL_UART_MspInit+0xb8>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <HAL_UART_MspInit+0xb8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a13      	ldr	r2, [pc, #76]	@ (8000a50 <HAL_UART_MspInit+0xb8>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <HAL_UART_MspInit+0xb8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a30:	2307      	movs	r3, #7
 8000a32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <HAL_UART_MspInit+0xbc>)
 8000a3e:	f000 fa3f 	bl	8000ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a42:	bf00      	nop
 8000a44:	37b8      	adds	r7, #184	@ 0xb8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40004800 	.word	0x40004800
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020c00 	.word	0x40020c00

08000a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a5c:	f7ff ff5a 	bl	8000914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a60:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a62:	490d      	ldr	r1, [pc, #52]	@ (8000a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a64:	4a0d      	ldr	r2, [pc, #52]	@ (8000a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a78:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f002 fa8b 	bl	8002fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8a:	f7ff fdd5 	bl	8000638 <main>
  bx  lr    
 8000a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a90:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a9c:	08003038 	.word	0x08003038
  ldr r2, =_sbss
 8000aa0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aa4:	200000b4 	.word	0x200000b4

08000aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC_IRQHandler>

08000aaa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aae:	2003      	movs	r0, #3
 8000ab0:	f000 f94c 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 f805 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aba:	f7ff fe79 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <HAL_InitTick+0x54>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <HAL_InitTick+0x58>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f967 	bl	8000db6 <HAL_SYSTICK_Config>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00e      	b.n	8000b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d80a      	bhi.n	8000b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f000 f92f 	bl	8000d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b04:	4a06      	ldr	r2, [pc, #24]	@ (8000b20 <HAL_InitTick+0x5c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_IncTick+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_IncTick+0x24>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <HAL_IncTick+0x24>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	200000b0 	.word	0x200000b0

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b03      	ldr	r3, [pc, #12]	@ (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200000b0 	.word	0x200000b0

08000b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff ffee 	bl	8000b4c <HAL_GetTick>
 8000b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7c:	d005      	beq.n	8000b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <HAL_Delay+0x44>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b8a:	bf00      	nop
 8000b8c:	f7ff ffde 	bl	8000b4c <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d8f7      	bhi.n	8000b8c <HAL_Delay+0x28>
  {
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <__NVIC_SetPriorityGrouping+0x40>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <__NVIC_SetPriorityGrouping+0x40>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00
 8000bf0:	05fa0000 	.word	0x05fa0000

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0b      	blt.n	8000c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f003 021f 	and.w	r2, r3, #31
 8000c28:	4907      	ldr	r1, [pc, #28]	@ (8000c48 <__NVIC_EnableIRQ+0x38>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	2001      	movs	r0, #1
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	@ (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	@ (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	@ 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	@ 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d18:	d301      	bcc.n	8000d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00f      	b.n	8000d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <SysTick_Config+0x40>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d26:	210f      	movs	r1, #15
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f7ff ff8e 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <SysTick_Config+0x40>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d36:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <SysTick_Config+0x40>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff29 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff3e 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff8e 	bl	8000ca0 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5d 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff31 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffa2 	bl	8000d08 <SysTick_Config>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000dd4:	f3bf 8f5f 	dmb	sy
}
 8000dd8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000dda:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <HAL_MPU_Disable+0x28>)
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dde:	4a06      	ldr	r2, [pc, #24]	@ (8000df8 <HAL_MPU_Disable+0x28>)
 8000de0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000de4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000de6:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <HAL_MPU_Disable+0x2c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00
 8000dfc:	e000ed90 	.word	0xe000ed90

08000e00 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e08:	4a0b      	ldr	r2, [pc, #44]	@ (8000e38 <HAL_MPU_Enable+0x38>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <HAL_MPU_Enable+0x3c>)
 8000e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e16:	4a09      	ldr	r2, [pc, #36]	@ (8000e3c <HAL_MPU_Enable+0x3c>)
 8000e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e1c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e1e:	f3bf 8f4f 	dsb	sy
}
 8000e22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e24:	f3bf 8f6f 	isb	sy
}
 8000e28:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed90 	.word	0xe000ed90
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	785a      	ldrb	r2, [r3, #1]
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <HAL_MPU_ConfigRegion+0x7c>)
 8000e4e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000e50:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <HAL_MPU_ConfigRegion+0x7c>)
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	4a19      	ldr	r2, [pc, #100]	@ (8000ebc <HAL_MPU_ConfigRegion+0x7c>)
 8000e56:	f023 0301 	bic.w	r3, r3, #1
 8000e5a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000e5c:	4a17      	ldr	r2, [pc, #92]	@ (8000ebc <HAL_MPU_ConfigRegion+0x7c>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	7b1b      	ldrb	r3, [r3, #12]
 8000e68:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7adb      	ldrb	r3, [r3, #11]
 8000e6e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7a9b      	ldrb	r3, [r3, #10]
 8000e76:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7b5b      	ldrb	r3, [r3, #13]
 8000e7e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7b9b      	ldrb	r3, [r3, #14]
 8000e86:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7bdb      	ldrb	r3, [r3, #15]
 8000e8e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7a5b      	ldrb	r3, [r3, #9]
 8000e96:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7a1b      	ldrb	r3, [r3, #8]
 8000e9e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000ea0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	7812      	ldrb	r2, [r2, #0]
 8000ea6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ea8:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000eaa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000eac:	6113      	str	r3, [r2, #16]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed90 	.word	0xe000ed90

08000ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	@ 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	e175      	b.n	80011cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f040 8164 	bne.w	80011c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d005      	beq.n	8000f16 <HAL_GPIO_Init+0x56>
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d130      	bne.n	8000f78 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	091b      	lsrs	r3, r3, #4
 8000f62:	f003 0201 	and.w	r2, r3, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d017      	beq.n	8000fb4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d123      	bne.n	8001008 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	08da      	lsrs	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3208      	adds	r2, #8
 8001002:	69b9      	ldr	r1, [r7, #24]
 8001004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0203 	and.w	r2, r3, #3
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80be 	beq.w	80011c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	4b66      	ldr	r3, [pc, #408]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	4a65      	ldr	r2, [pc, #404]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001054:	6453      	str	r3, [r2, #68]	@ 0x44
 8001056:	4b63      	ldr	r3, [pc, #396]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001062:	4a61      	ldr	r2, [pc, #388]	@ (80011e8 <HAL_GPIO_Init+0x328>)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a58      	ldr	r2, [pc, #352]	@ (80011ec <HAL_GPIO_Init+0x32c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d037      	beq.n	80010fe <HAL_GPIO_Init+0x23e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a57      	ldr	r2, [pc, #348]	@ (80011f0 <HAL_GPIO_Init+0x330>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d031      	beq.n	80010fa <HAL_GPIO_Init+0x23a>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a56      	ldr	r2, [pc, #344]	@ (80011f4 <HAL_GPIO_Init+0x334>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d02b      	beq.n	80010f6 <HAL_GPIO_Init+0x236>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a55      	ldr	r2, [pc, #340]	@ (80011f8 <HAL_GPIO_Init+0x338>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d025      	beq.n	80010f2 <HAL_GPIO_Init+0x232>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a54      	ldr	r2, [pc, #336]	@ (80011fc <HAL_GPIO_Init+0x33c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d01f      	beq.n	80010ee <HAL_GPIO_Init+0x22e>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a53      	ldr	r2, [pc, #332]	@ (8001200 <HAL_GPIO_Init+0x340>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d019      	beq.n	80010ea <HAL_GPIO_Init+0x22a>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a52      	ldr	r2, [pc, #328]	@ (8001204 <HAL_GPIO_Init+0x344>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d013      	beq.n	80010e6 <HAL_GPIO_Init+0x226>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a51      	ldr	r2, [pc, #324]	@ (8001208 <HAL_GPIO_Init+0x348>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d00d      	beq.n	80010e2 <HAL_GPIO_Init+0x222>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a50      	ldr	r2, [pc, #320]	@ (800120c <HAL_GPIO_Init+0x34c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d007      	beq.n	80010de <HAL_GPIO_Init+0x21e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4f      	ldr	r2, [pc, #316]	@ (8001210 <HAL_GPIO_Init+0x350>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d101      	bne.n	80010da <HAL_GPIO_Init+0x21a>
 80010d6:	2309      	movs	r3, #9
 80010d8:	e012      	b.n	8001100 <HAL_GPIO_Init+0x240>
 80010da:	230a      	movs	r3, #10
 80010dc:	e010      	b.n	8001100 <HAL_GPIO_Init+0x240>
 80010de:	2308      	movs	r3, #8
 80010e0:	e00e      	b.n	8001100 <HAL_GPIO_Init+0x240>
 80010e2:	2307      	movs	r3, #7
 80010e4:	e00c      	b.n	8001100 <HAL_GPIO_Init+0x240>
 80010e6:	2306      	movs	r3, #6
 80010e8:	e00a      	b.n	8001100 <HAL_GPIO_Init+0x240>
 80010ea:	2305      	movs	r3, #5
 80010ec:	e008      	b.n	8001100 <HAL_GPIO_Init+0x240>
 80010ee:	2304      	movs	r3, #4
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x240>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e004      	b.n	8001100 <HAL_GPIO_Init+0x240>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x240>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x240>
 80010fe:	2300      	movs	r3, #0
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	f002 0203 	and.w	r2, r2, #3
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	4093      	lsls	r3, r2
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001110:	4935      	ldr	r1, [pc, #212]	@ (80011e8 <HAL_GPIO_Init+0x328>)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111e:	4b3d      	ldr	r3, [pc, #244]	@ (8001214 <HAL_GPIO_Init+0x354>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001142:	4a34      	ldr	r2, [pc, #208]	@ (8001214 <HAL_GPIO_Init+0x354>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001148:	4b32      	ldr	r3, [pc, #200]	@ (8001214 <HAL_GPIO_Init+0x354>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800116c:	4a29      	ldr	r2, [pc, #164]	@ (8001214 <HAL_GPIO_Init+0x354>)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001172:	4b28      	ldr	r3, [pc, #160]	@ (8001214 <HAL_GPIO_Init+0x354>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001196:	4a1f      	ldr	r2, [pc, #124]	@ (8001214 <HAL_GPIO_Init+0x354>)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800119c:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <HAL_GPIO_Init+0x354>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c0:	4a14      	ldr	r2, [pc, #80]	@ (8001214 <HAL_GPIO_Init+0x354>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3301      	adds	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	2b0f      	cmp	r3, #15
 80011d0:	f67f ae86 	bls.w	8000ee0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3724      	adds	r7, #36	@ 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40013800 	.word	0x40013800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020800 	.word	0x40020800
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	40021000 	.word	0x40021000
 8001200:	40021400 	.word	0x40021400
 8001204:	40021800 	.word	0x40021800
 8001208:	40021c00 	.word	0x40021c00
 800120c:	40022000 	.word	0x40022000
 8001210:	40022400 	.word	0x40022400
 8001214:	40013c00 	.word	0x40013c00

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001234:	e003      	b.n	800123e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	041a      	lsls	r2, r3, #16
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	619a      	str	r2, [r3, #24]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800124a:	b480      	push	{r7}
 800124c:	b085      	sub	sp, #20
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	460b      	mov	r3, r1
 8001254:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800125c:	887a      	ldrh	r2, [r7, #2]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4013      	ands	r3, r2
 8001262:	041a      	lsls	r2, r3, #16
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	43d9      	mvns	r1, r3
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	400b      	ands	r3, r1
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	619a      	str	r2, [r3, #24]
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	4013      	ands	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d006      	beq.n	80012a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001296:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f806 	bl	80012b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40013c00 	.word	0x40013c00

080012b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	4b23      	ldr	r3, [pc, #140]	@ (8001360 <HAL_PWREx_EnableOverDrive+0x98>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	4a22      	ldr	r2, [pc, #136]	@ (8001360 <HAL_PWREx_EnableOverDrive+0x98>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012de:	4b20      	ldr	r3, [pc, #128]	@ (8001360 <HAL_PWREx_EnableOverDrive+0x98>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001364 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001364 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012f6:	f7ff fc29 	bl	8000b4c <HAL_GetTick>
 80012fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012fc:	e009      	b.n	8001312 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012fe:	f7ff fc25 	bl	8000b4c <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800130c:	d901      	bls.n	8001312 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e022      	b.n	8001358 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001312:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800131a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800131e:	d1ee      	bne.n	80012fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001320:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0f      	ldr	r2, [pc, #60]	@ (8001364 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800132a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800132c:	f7ff fc0e 	bl	8000b4c <HAL_GetTick>
 8001330:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001332:	e009      	b.n	8001348 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001334:	f7ff fc0a 	bl	8000b4c <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001342:	d901      	bls.n	8001348 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e007      	b.n	8001358 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_PWREx_EnableOverDrive+0x9c>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001350:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001354:	d1ee      	bne.n	8001334 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40007000 	.word	0x40007000

08001368 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e29b      	b.n	80018b6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 8087 	beq.w	800149a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800138c:	4b96      	ldr	r3, [pc, #600]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 030c 	and.w	r3, r3, #12
 8001394:	2b04      	cmp	r3, #4
 8001396:	d00c      	beq.n	80013b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001398:	4b93      	ldr	r3, [pc, #588]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d112      	bne.n	80013ca <HAL_RCC_OscConfig+0x62>
 80013a4:	4b90      	ldr	r3, [pc, #576]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013b0:	d10b      	bne.n	80013ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b2:	4b8d      	ldr	r3, [pc, #564]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d06c      	beq.n	8001498 <HAL_RCC_OscConfig+0x130>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d168      	bne.n	8001498 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e275      	b.n	80018b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013d2:	d106      	bne.n	80013e2 <HAL_RCC_OscConfig+0x7a>
 80013d4:	4b84      	ldr	r3, [pc, #528]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a83      	ldr	r2, [pc, #524]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80013da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e02e      	b.n	8001440 <HAL_RCC_OscConfig+0xd8>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x9c>
 80013ea:	4b7f      	ldr	r3, [pc, #508]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a7e      	ldr	r2, [pc, #504]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80013f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b7c      	ldr	r3, [pc, #496]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a7b      	ldr	r2, [pc, #492]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80013fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e01d      	b.n	8001440 <HAL_RCC_OscConfig+0xd8>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800140c:	d10c      	bne.n	8001428 <HAL_RCC_OscConfig+0xc0>
 800140e:	4b76      	ldr	r3, [pc, #472]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a75      	ldr	r2, [pc, #468]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 8001414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4b73      	ldr	r3, [pc, #460]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a72      	ldr	r2, [pc, #456]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e00b      	b.n	8001440 <HAL_RCC_OscConfig+0xd8>
 8001428:	4b6f      	ldr	r3, [pc, #444]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a6e      	ldr	r2, [pc, #440]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 800142e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	4b6c      	ldr	r3, [pc, #432]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a6b      	ldr	r2, [pc, #428]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 800143a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800143e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d013      	beq.n	8001470 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fb80 	bl	8000b4c <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fb7c 	bl	8000b4c <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	@ 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e229      	b.n	80018b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	4b61      	ldr	r3, [pc, #388]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0xe8>
 800146e:	e014      	b.n	800149a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fb6c 	bl	8000b4c <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff fb68 	bl	8000b4c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	@ 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e215      	b.n	80018b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	4b57      	ldr	r3, [pc, #348]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x110>
 8001496:	e000      	b.n	800149a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d069      	beq.n	800157a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014a6:	4b50      	ldr	r3, [pc, #320]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00b      	beq.n	80014ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014b2:	4b4d      	ldr	r3, [pc, #308]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d11c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x190>
 80014be:	4b4a      	ldr	r3, [pc, #296]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d116      	bne.n	80014f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ca:	4b47      	ldr	r3, [pc, #284]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <HAL_RCC_OscConfig+0x17a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d001      	beq.n	80014e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e1e9      	b.n	80018b6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e2:	4b41      	ldr	r3, [pc, #260]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	493d      	ldr	r1, [pc, #244]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f6:	e040      	b.n	800157a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d023      	beq.n	8001548 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001500:	4b39      	ldr	r3, [pc, #228]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a38      	ldr	r2, [pc, #224]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fb1e 	bl	8000b4c <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001514:	f7ff fb1a 	bl	8000b4c <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e1c7      	b.n	80018b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001526:	4b30      	ldr	r3, [pc, #192]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001532:	4b2d      	ldr	r3, [pc, #180]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4929      	ldr	r1, [pc, #164]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]
 8001546:	e018      	b.n	800157a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001548:	4b27      	ldr	r3, [pc, #156]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a26      	ldr	r2, [pc, #152]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fafa 	bl	8000b4c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff faf6 	bl	8000b4c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e1a3      	b.n	80018b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d038      	beq.n	80015f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d019      	beq.n	80015c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158e:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 8001590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001592:	4a15      	ldr	r2, [pc, #84]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159a:	f7ff fad7 	bl	8000b4c <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff fad3 	bl	8000b4c <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e180      	b.n	80018b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80015b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x23a>
 80015c0:	e01a      	b.n	80015f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80015c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015c6:	4a08      	ldr	r2, [pc, #32]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ce:	f7ff fabd 	bl	8000b4c <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d4:	e00a      	b.n	80015ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff fab9 	bl	8000b4c <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d903      	bls.n	80015ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e166      	b.n	80018b6 <HAL_RCC_OscConfig+0x54e>
 80015e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ec:	4b92      	ldr	r3, [pc, #584]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 80015ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1ee      	bne.n	80015d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80a4 	beq.w	800174e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001606:	4b8c      	ldr	r3, [pc, #560]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10d      	bne.n	800162e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	4b89      	ldr	r3, [pc, #548]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	4a88      	ldr	r2, [pc, #544]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800161c:	6413      	str	r3, [r2, #64]	@ 0x40
 800161e:	4b86      	ldr	r3, [pc, #536]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162a:	2301      	movs	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162e:	4b83      	ldr	r3, [pc, #524]	@ (800183c <HAL_RCC_OscConfig+0x4d4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d118      	bne.n	800166c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800163a:	4b80      	ldr	r3, [pc, #512]	@ (800183c <HAL_RCC_OscConfig+0x4d4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a7f      	ldr	r2, [pc, #508]	@ (800183c <HAL_RCC_OscConfig+0x4d4>)
 8001640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001646:	f7ff fa81 	bl	8000b4c <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164e:	f7ff fa7d 	bl	8000b4c <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b64      	cmp	r3, #100	@ 0x64
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e12a      	b.n	80018b6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001660:	4b76      	ldr	r3, [pc, #472]	@ (800183c <HAL_RCC_OscConfig+0x4d4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x31a>
 8001674:	4b70      	ldr	r3, [pc, #448]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 8001676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001678:	4a6f      	ldr	r2, [pc, #444]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001680:	e02d      	b.n	80016de <HAL_RCC_OscConfig+0x376>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x33c>
 800168a:	4b6b      	ldr	r3, [pc, #428]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800168e:	4a6a      	ldr	r2, [pc, #424]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6713      	str	r3, [r2, #112]	@ 0x70
 8001696:	4b68      	ldr	r3, [pc, #416]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800169a:	4a67      	ldr	r2, [pc, #412]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 800169c:	f023 0304 	bic.w	r3, r3, #4
 80016a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a2:	e01c      	b.n	80016de <HAL_RCC_OscConfig+0x376>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d10c      	bne.n	80016c6 <HAL_RCC_OscConfig+0x35e>
 80016ac:	4b62      	ldr	r3, [pc, #392]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b0:	4a61      	ldr	r2, [pc, #388]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016bc:	4a5e      	ldr	r2, [pc, #376]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c4:	e00b      	b.n	80016de <HAL_RCC_OscConfig+0x376>
 80016c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 80016c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d2:	4b59      	ldr	r3, [pc, #356]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d6:	4a58      	ldr	r2, [pc, #352]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 80016d8:	f023 0304 	bic.w	r3, r3, #4
 80016dc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d015      	beq.n	8001712 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e6:	f7ff fa31 	bl	8000b4c <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff fa2d 	bl	8000b4c <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e0d8      	b.n	80018b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001704:	4b4c      	ldr	r3, [pc, #304]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0ee      	beq.n	80016ee <HAL_RCC_OscConfig+0x386>
 8001710:	e014      	b.n	800173c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001712:	f7ff fa1b 	bl	8000b4c <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171a:	f7ff fa17 	bl	8000b4c <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e0c2      	b.n	80018b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	4b41      	ldr	r3, [pc, #260]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1ee      	bne.n	800171a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d105      	bne.n	800174e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001742:	4b3d      	ldr	r3, [pc, #244]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	4a3c      	ldr	r2, [pc, #240]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 8001748:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800174c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 80ae 	beq.w	80018b4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001758:	4b37      	ldr	r3, [pc, #220]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b08      	cmp	r3, #8
 8001762:	d06d      	beq.n	8001840 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d14b      	bne.n	8001804 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176c:	4b32      	ldr	r3, [pc, #200]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a31      	ldr	r2, [pc, #196]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 8001772:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff f9e8 	bl	8000b4c <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff f9e4 	bl	8000b4c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e091      	b.n	80018b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001792:	4b29      	ldr	r3, [pc, #164]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69da      	ldr	r2, [r3, #28]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	019b      	lsls	r3, r3, #6
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	3b01      	subs	r3, #1
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c0:	061b      	lsls	r3, r3, #24
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c8:	071b      	lsls	r3, r3, #28
 80017ca:	491b      	ldr	r1, [pc, #108]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a18      	ldr	r2, [pc, #96]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 80017d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017dc:	f7ff f9b6 	bl	8000b4c <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff f9b2 	bl	8000b4c <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e05f      	b.n	80018b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x47c>
 8001802:	e057      	b.n	80018b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0b      	ldr	r2, [pc, #44]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 800180a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800180e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7ff f99c 	bl	8000b4c <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff f998 	bl	8000b4c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e045      	b.n	80018b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182a:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <HAL_RCC_OscConfig+0x4d0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x4b0>
 8001836:	e03d      	b.n	80018b4 <HAL_RCC_OscConfig+0x54c>
 8001838:	40023800 	.word	0x40023800
 800183c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001840:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <HAL_RCC_OscConfig+0x558>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d030      	beq.n	80018b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d129      	bne.n	80018b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001866:	429a      	cmp	r2, r3
 8001868:	d122      	bne.n	80018b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001870:	4013      	ands	r3, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001876:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001878:	4293      	cmp	r3, r2
 800187a:	d119      	bne.n	80018b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001886:	085b      	lsrs	r3, r3, #1
 8001888:	3b01      	subs	r3, #1
 800188a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d10f      	bne.n	80018b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d107      	bne.n	80018b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800

080018c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0d0      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 030f 	and.w	r3, r3, #15
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d910      	bls.n	800190c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b67      	ldr	r3, [pc, #412]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 020f 	bic.w	r2, r3, #15
 80018f2:	4965      	ldr	r1, [pc, #404]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fa:	4b63      	ldr	r3, [pc, #396]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0b8      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d020      	beq.n	800195a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001924:	4b59      	ldr	r3, [pc, #356]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4a58      	ldr	r2, [pc, #352]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 800192a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800192e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800193c:	4b53      	ldr	r3, [pc, #332]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a52      	ldr	r2, [pc, #328]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001942:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001946:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001948:	4b50      	ldr	r3, [pc, #320]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	494d      	ldr	r1, [pc, #308]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d040      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b47      	ldr	r3, [pc, #284]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d115      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e07f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001986:	4b41      	ldr	r3, [pc, #260]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e073      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001996:	4b3d      	ldr	r3, [pc, #244]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e06b      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019a6:	4b39      	ldr	r3, [pc, #228]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f023 0203 	bic.w	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4936      	ldr	r1, [pc, #216]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b8:	f7ff f8c8 	bl	8000b4c <HAL_GetTick>
 80019bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c0:	f7ff f8c4 	bl	8000b4c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e053      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 020c 	and.w	r2, r3, #12
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d1eb      	bne.n	80019c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e8:	4b27      	ldr	r3, [pc, #156]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d210      	bcs.n	8001a18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b24      	ldr	r3, [pc, #144]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 020f 	bic.w	r2, r3, #15
 80019fe:	4922      	ldr	r1, [pc, #136]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b20      	ldr	r3, [pc, #128]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e032      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d008      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a24:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4916      	ldr	r1, [pc, #88]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d009      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a42:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	490e      	ldr	r1, [pc, #56]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a56:	f000 f821 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	490a      	ldr	r1, [pc, #40]	@ (8001a90 <HAL_RCC_ClockConfig+0x1cc>)
 8001a68:	5ccb      	ldrb	r3, [r1, r3]
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	4a09      	ldr	r2, [pc, #36]	@ (8001a94 <HAL_RCC_ClockConfig+0x1d0>)
 8001a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a72:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <HAL_RCC_ClockConfig+0x1d4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f824 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023c00 	.word	0x40023c00
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	08003010 	.word	0x08003010
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000004 	.word	0x20000004

08001a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aa0:	b090      	sub	sp, #64	@ 0x40
 8001aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001aac:	2300      	movs	r3, #0
 8001aae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab4:	4b59      	ldr	r3, [pc, #356]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d00d      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x40>
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	f200 80a1 	bhi.w	8001c08 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d003      	beq.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ace:	e09b      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ad0:	4b53      	ldr	r3, [pc, #332]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ad4:	e09b      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ad6:	4b53      	ldr	r3, [pc, #332]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ada:	e098      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001adc:	4b4f      	ldr	r3, [pc, #316]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ae4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ae6:	4b4d      	ldr	r3, [pc, #308]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d028      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af2:	4b4a      	ldr	r3, [pc, #296]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	099b      	lsrs	r3, r3, #6
 8001af8:	2200      	movs	r2, #0
 8001afa:	623b      	str	r3, [r7, #32]
 8001afc:	627a      	str	r2, [r7, #36]	@ 0x24
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b04:	2100      	movs	r1, #0
 8001b06:	4b47      	ldr	r3, [pc, #284]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b08:	fb03 f201 	mul.w	r2, r3, r1
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	fb00 f303 	mul.w	r3, r0, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	4a43      	ldr	r2, [pc, #268]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b16:	fba0 1202 	umull	r1, r2, r0, r2
 8001b1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b1c:	460a      	mov	r2, r1
 8001b1e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b22:	4413      	add	r3, r2
 8001b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b28:	2200      	movs	r2, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	61fa      	str	r2, [r7, #28]
 8001b2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b36:	f7fe fb7f 	bl	8000238 <__aeabi_uldivmod>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4613      	mov	r3, r2
 8001b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b42:	e053      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b44:	4b35      	ldr	r3, [pc, #212]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	099b      	lsrs	r3, r3, #6
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	617a      	str	r2, [r7, #20]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b56:	f04f 0b00 	mov.w	fp, #0
 8001b5a:	4652      	mov	r2, sl
 8001b5c:	465b      	mov	r3, fp
 8001b5e:	f04f 0000 	mov.w	r0, #0
 8001b62:	f04f 0100 	mov.w	r1, #0
 8001b66:	0159      	lsls	r1, r3, #5
 8001b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b6c:	0150      	lsls	r0, r2, #5
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	ebb2 080a 	subs.w	r8, r2, sl
 8001b76:	eb63 090b 	sbc.w	r9, r3, fp
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b8e:	ebb2 0408 	subs.w	r4, r2, r8
 8001b92:	eb63 0509 	sbc.w	r5, r3, r9
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	00eb      	lsls	r3, r5, #3
 8001ba0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ba4:	00e2      	lsls	r2, r4, #3
 8001ba6:	4614      	mov	r4, r2
 8001ba8:	461d      	mov	r5, r3
 8001baa:	eb14 030a 	adds.w	r3, r4, sl
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	eb45 030b 	adc.w	r3, r5, fp
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	028b      	lsls	r3, r1, #10
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bcc:	4621      	mov	r1, r4
 8001bce:	028a      	lsls	r2, r1, #10
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	60fa      	str	r2, [r7, #12]
 8001bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001be0:	f7fe fb2a 	bl	8000238 <__aeabi_uldivmod>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4613      	mov	r3, r2
 8001bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001bec:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001bfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c06:	e002      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c08:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3740      	adds	r7, #64	@ 0x40
 8001c14:	46bd      	mov	sp, r7
 8001c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	00f42400 	.word	0x00f42400
 8001c24:	017d7840 	.word	0x017d7840

08001c28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000000 	.word	0x20000000

08001c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c44:	f7ff fff0 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	0a9b      	lsrs	r3, r3, #10
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4903      	ldr	r1, [pc, #12]	@ (8001c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	08003020 	.word	0x08003020

08001c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c6c:	f7ff ffdc 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	0b5b      	lsrs	r3, r3, #13
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	4903      	ldr	r1, [pc, #12]	@ (8001c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c7e:	5ccb      	ldrb	r3, [r1, r3]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	08003020 	.word	0x08003020

08001c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d012      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001cb8:	4b69      	ldr	r3, [pc, #420]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	4a68      	ldr	r2, [pc, #416]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cbe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001cc2:	6093      	str	r3, [r2, #8]
 8001cc4:	4b66      	ldr	r3, [pc, #408]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ccc:	4964      	ldr	r1, [pc, #400]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d017      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cea:	4b5d      	ldr	r3, [pc, #372]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cf0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf8:	4959      	ldr	r1, [pc, #356]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d08:	d101      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d16:	2301      	movs	r3, #1
 8001d18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d017      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d26:	4b4e      	ldr	r3, [pc, #312]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d2c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	494a      	ldr	r1, [pc, #296]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d44:	d101      	bne.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d62:	2301      	movs	r3, #1
 8001d64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 808b 	beq.w	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	4b3a      	ldr	r3, [pc, #232]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	4a39      	ldr	r2, [pc, #228]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d80:	4b37      	ldr	r3, [pc, #220]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d8c:	4b35      	ldr	r3, [pc, #212]	@ (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a34      	ldr	r2, [pc, #208]	@ (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d98:	f7fe fed8 	bl	8000b4c <HAL_GetTick>
 8001d9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da0:	f7fe fed4 	bl	8000b4c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	@ 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e38f      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001db2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dbe:	4b28      	ldr	r3, [pc, #160]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dc6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d035      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d02e      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ddc:	4b20      	ldr	r3, [pc, #128]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001de4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001de6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dea:	4a1d      	ldr	r2, [pc, #116]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001df2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df6:	4a1a      	ldr	r2, [pc, #104]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dfc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001dfe:	4a18      	ldr	r2, [pc, #96]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e04:	4b16      	ldr	r3, [pc, #88]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d114      	bne.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7fe fe9c 	bl	8000b4c <HAL_GetTick>
 8001e14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e16:	e00a      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e18:	f7fe fe98 	bl	8000b4c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e351      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0ee      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e46:	d111      	bne.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e48:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e54:	4b04      	ldr	r3, [pc, #16]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e56:	400b      	ands	r3, r1
 8001e58:	4901      	ldr	r1, [pc, #4]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
 8001e5e:	e00b      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40007000 	.word	0x40007000
 8001e68:	0ffffcff 	.word	0x0ffffcff
 8001e6c:	4bac      	ldr	r3, [pc, #688]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4aab      	ldr	r2, [pc, #684]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e72:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001e76:	6093      	str	r3, [r2, #8]
 8001e78:	4ba9      	ldr	r3, [pc, #676]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e84:	49a6      	ldr	r1, [pc, #664]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d010      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e96:	4ba2      	ldr	r3, [pc, #648]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e9c:	4aa0      	ldr	r2, [pc, #640]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ea2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ea6:	4b9e      	ldr	r3, [pc, #632]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb0:	499b      	ldr	r1, [pc, #620]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00a      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ec4:	4b96      	ldr	r3, [pc, #600]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ed2:	4993      	ldr	r1, [pc, #588]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ee6:	4b8e      	ldr	r3, [pc, #568]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ef4:	498a      	ldr	r1, [pc, #552]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f08:	4b85      	ldr	r3, [pc, #532]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f16:	4982      	ldr	r1, [pc, #520]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00a      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f2a:	4b7d      	ldr	r3, [pc, #500]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f30:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f38:	4979      	ldr	r1, [pc, #484]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00a      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f4c:	4b74      	ldr	r3, [pc, #464]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f52:	f023 0203 	bic.w	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5a:	4971      	ldr	r1, [pc, #452]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f6e:	4b6c      	ldr	r3, [pc, #432]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f74:	f023 020c 	bic.w	r2, r3, #12
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f7c:	4968      	ldr	r1, [pc, #416]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00a      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f90:	4b63      	ldr	r3, [pc, #396]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f96:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9e:	4960      	ldr	r1, [pc, #384]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fb2:	4b5b      	ldr	r3, [pc, #364]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fc0:	4957      	ldr	r1, [pc, #348]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fd4:	4b52      	ldr	r3, [pc, #328]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fda:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe2:	494f      	ldr	r1, [pc, #316]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00a      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002004:	4946      	ldr	r1, [pc, #280]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002018:	4b41      	ldr	r3, [pc, #260]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002026:	493e      	ldr	r1, [pc, #248]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800203a:	4b39      	ldr	r3, [pc, #228]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002040:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002048:	4935      	ldr	r1, [pc, #212]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800205c:	4b30      	ldr	r3, [pc, #192]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002062:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800206a:	492d      	ldr	r1, [pc, #180]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d011      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800207e:	4b28      	ldr	r3, [pc, #160]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002084:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800208c:	4924      	ldr	r1, [pc, #144]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800209c:	d101      	bne.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800209e:	2301      	movs	r3, #1
 80020a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80020ae:	2301      	movs	r3, #1
 80020b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020be:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020cc:	4914      	ldr	r1, [pc, #80]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00b      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020f0:	490b      	ldr	r1, [pc, #44]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00f      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002114:	4902      	ldr	r1, [pc, #8]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800211c:	e002      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002130:	4b8a      	ldr	r3, [pc, #552]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002132:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002136:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002140:	4986      	ldr	r1, [pc, #536]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00b      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002154:	4b81      	ldr	r3, [pc, #516]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002156:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800215a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002164:	497d      	ldr	r1, [pc, #500]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d006      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80d6 	beq.w	800232c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002180:	4b76      	ldr	r3, [pc, #472]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a75      	ldr	r2, [pc, #468]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002186:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800218a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800218c:	f7fe fcde 	bl	8000b4c <HAL_GetTick>
 8002190:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002194:	f7fe fcda 	bl	8000b4c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	@ 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e195      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021a6:	4b6d      	ldr	r3, [pc, #436]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d021      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d11d      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021c6:	4b65      	ldr	r3, [pc, #404]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021cc:	0c1b      	lsrs	r3, r3, #16
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021d4:	4b61      	ldr	r3, [pc, #388]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021da:	0e1b      	lsrs	r3, r3, #24
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	019a      	lsls	r2, r3, #6
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	041b      	lsls	r3, r3, #16
 80021ec:	431a      	orrs	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	061b      	lsls	r3, r3, #24
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	071b      	lsls	r3, r3, #28
 80021fa:	4958      	ldr	r1, [pc, #352]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d004      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002216:	d00a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002220:	2b00      	cmp	r3, #0
 8002222:	d02e      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800222c:	d129      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800222e:	4b4b      	ldr	r3, [pc, #300]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800223c:	4b47      	ldr	r3, [pc, #284]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800223e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002242:	0f1b      	lsrs	r3, r3, #28
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	019a      	lsls	r2, r3, #6
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	061b      	lsls	r3, r3, #24
 800225c:	431a      	orrs	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	071b      	lsls	r3, r3, #28
 8002262:	493e      	ldr	r1, [pc, #248]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800226a:	4b3c      	ldr	r3, [pc, #240]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800226c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002270:	f023 021f 	bic.w	r2, r3, #31
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	3b01      	subs	r3, #1
 800227a:	4938      	ldr	r1, [pc, #224]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d01d      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800228e:	4b33      	ldr	r3, [pc, #204]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002290:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002294:	0e1b      	lsrs	r3, r3, #24
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800229c:	4b2f      	ldr	r3, [pc, #188]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800229e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022a2:	0f1b      	lsrs	r3, r3, #28
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	019a      	lsls	r2, r3, #6
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	431a      	orrs	r2, r3
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	061b      	lsls	r3, r3, #24
 80022bc:	431a      	orrs	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	071b      	lsls	r3, r3, #28
 80022c2:	4926      	ldr	r1, [pc, #152]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d011      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	019a      	lsls	r2, r3, #6
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	041b      	lsls	r3, r3, #16
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	061b      	lsls	r3, r3, #24
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	071b      	lsls	r3, r3, #28
 80022f2:	491a      	ldr	r1, [pc, #104]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022fa:	4b18      	ldr	r3, [pc, #96]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a17      	ldr	r2, [pc, #92]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002300:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002306:	f7fe fc21 	bl	8000b4c <HAL_GetTick>
 800230a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800230c:	e008      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800230e:	f7fe fc1d 	bl	8000b4c <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b64      	cmp	r3, #100	@ 0x64
 800231a:	d901      	bls.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0d8      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002320:	4b0e      	ldr	r3, [pc, #56]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2b01      	cmp	r3, #1
 8002330:	f040 80ce 	bne.w	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002334:	4b09      	ldr	r3, [pc, #36]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a08      	ldr	r2, [pc, #32]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800233a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800233e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002340:	f7fe fc04 	bl	8000b4c <HAL_GetTick>
 8002344:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002346:	e00b      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002348:	f7fe fc00 	bl	8000b4c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	@ 0x64
 8002354:	d904      	bls.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e0bb      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002360:	4b5e      	ldr	r3, [pc, #376]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800236c:	d0ec      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800238a:	2b00      	cmp	r3, #0
 800238c:	d02e      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	2b00      	cmp	r3, #0
 8002394:	d12a      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002396:	4b51      	ldr	r3, [pc, #324]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239c:	0c1b      	lsrs	r3, r3, #16
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023a4:	4b4d      	ldr	r3, [pc, #308]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023aa:	0f1b      	lsrs	r3, r3, #28
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	019a      	lsls	r2, r3, #6
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	041b      	lsls	r3, r3, #16
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	061b      	lsls	r3, r3, #24
 80023c4:	431a      	orrs	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	071b      	lsls	r3, r3, #28
 80023ca:	4944      	ldr	r1, [pc, #272]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023d2:	4b42      	ldr	r3, [pc, #264]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	3b01      	subs	r3, #1
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	493d      	ldr	r1, [pc, #244]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d022      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002400:	d11d      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002402:	4b36      	ldr	r3, [pc, #216]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002408:	0e1b      	lsrs	r3, r3, #24
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002410:	4b32      	ldr	r3, [pc, #200]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002416:	0f1b      	lsrs	r3, r3, #28
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	019a      	lsls	r2, r3, #6
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	041b      	lsls	r3, r3, #16
 800242a:	431a      	orrs	r2, r3
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	061b      	lsls	r3, r3, #24
 8002430:	431a      	orrs	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	071b      	lsls	r3, r3, #28
 8002436:	4929      	ldr	r1, [pc, #164]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d028      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800244a:	4b24      	ldr	r3, [pc, #144]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002450:	0e1b      	lsrs	r3, r3, #24
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002458:	4b20      	ldr	r3, [pc, #128]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245e:	0c1b      	lsrs	r3, r3, #16
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	019a      	lsls	r2, r3, #6
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	041b      	lsls	r3, r3, #16
 8002470:	431a      	orrs	r2, r3
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	061b      	lsls	r3, r3, #24
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	071b      	lsls	r3, r3, #28
 800247e:	4917      	ldr	r1, [pc, #92]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002486:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800248c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	4911      	ldr	r1, [pc, #68]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800249c:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0e      	ldr	r2, [pc, #56]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a8:	f7fe fb50 	bl	8000b4c <HAL_GetTick>
 80024ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024b0:	f7fe fb4c 	bl	8000b4c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	@ 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e007      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024ce:	d1ef      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800

080024e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e040      	b.n	8002574 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d106      	bne.n	8002508 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7fe fa48 	bl	8000998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2224      	movs	r2, #36	@ 0x24
 800250c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0201 	bic.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fb16 	bl	8002b58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f8af 	bl	8002690 <UART_SetConfig>
 8002532:	4603      	mov	r3, r0
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e01b      	b.n	8002574 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800254a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800255a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fb95 	bl	8002c9c <UART_CheckIdleState>
 8002572:	4603      	mov	r3, r0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	@ 0x28
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	4613      	mov	r3, r2
 800258a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002590:	2b20      	cmp	r3, #32
 8002592:	d177      	bne.n	8002684 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_UART_Transmit+0x24>
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e070      	b.n	8002686 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2221      	movs	r2, #33	@ 0x21
 80025b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025b2:	f7fe facb 	bl	8000b4c <HAL_GetTick>
 80025b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	88fa      	ldrh	r2, [r7, #6]
 80025bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	88fa      	ldrh	r2, [r7, #6]
 80025c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025d0:	d108      	bne.n	80025e4 <HAL_UART_Transmit+0x68>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d104      	bne.n	80025e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	e003      	b.n	80025ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025ec:	e02f      	b.n	800264e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2200      	movs	r2, #0
 80025f6:	2180      	movs	r1, #128	@ 0x80
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 fbf7 	bl	8002dec <UART_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d004      	beq.n	800260e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e03b      	b.n	8002686 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002622:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	3302      	adds	r3, #2
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	e007      	b.n	800263c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	781a      	ldrb	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3301      	adds	r3, #1
 800263a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1c9      	bne.n	80025ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2200      	movs	r2, #0
 8002662:	2140      	movs	r1, #64	@ 0x40
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fbc1 	bl	8002dec <UART_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d004      	beq.n	800267a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e005      	b.n	8002686 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002684:	2302      	movs	r3, #2
  }
}
 8002686:	4618      	mov	r0, r3
 8002688:	3720      	adds	r7, #32
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4ba6      	ldr	r3, [pc, #664]	@ (8002954 <UART_SetConfig+0x2c4>)
 80026bc:	4013      	ands	r3, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	6979      	ldr	r1, [r7, #20]
 80026c4:	430b      	orrs	r3, r1
 80026c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	430a      	orrs	r2, r1
 8002700:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a94      	ldr	r2, [pc, #592]	@ (8002958 <UART_SetConfig+0x2c8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d120      	bne.n	800274e <UART_SetConfig+0xbe>
 800270c:	4b93      	ldr	r3, [pc, #588]	@ (800295c <UART_SetConfig+0x2cc>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b03      	cmp	r3, #3
 8002718:	d816      	bhi.n	8002748 <UART_SetConfig+0xb8>
 800271a:	a201      	add	r2, pc, #4	@ (adr r2, 8002720 <UART_SetConfig+0x90>)
 800271c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002720:	08002731 	.word	0x08002731
 8002724:	0800273d 	.word	0x0800273d
 8002728:	08002737 	.word	0x08002737
 800272c:	08002743 	.word	0x08002743
 8002730:	2301      	movs	r3, #1
 8002732:	77fb      	strb	r3, [r7, #31]
 8002734:	e150      	b.n	80029d8 <UART_SetConfig+0x348>
 8002736:	2302      	movs	r3, #2
 8002738:	77fb      	strb	r3, [r7, #31]
 800273a:	e14d      	b.n	80029d8 <UART_SetConfig+0x348>
 800273c:	2304      	movs	r3, #4
 800273e:	77fb      	strb	r3, [r7, #31]
 8002740:	e14a      	b.n	80029d8 <UART_SetConfig+0x348>
 8002742:	2308      	movs	r3, #8
 8002744:	77fb      	strb	r3, [r7, #31]
 8002746:	e147      	b.n	80029d8 <UART_SetConfig+0x348>
 8002748:	2310      	movs	r3, #16
 800274a:	77fb      	strb	r3, [r7, #31]
 800274c:	e144      	b.n	80029d8 <UART_SetConfig+0x348>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a83      	ldr	r2, [pc, #524]	@ (8002960 <UART_SetConfig+0x2d0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d132      	bne.n	80027be <UART_SetConfig+0x12e>
 8002758:	4b80      	ldr	r3, [pc, #512]	@ (800295c <UART_SetConfig+0x2cc>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d828      	bhi.n	80027b8 <UART_SetConfig+0x128>
 8002766:	a201      	add	r2, pc, #4	@ (adr r2, 800276c <UART_SetConfig+0xdc>)
 8002768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276c:	080027a1 	.word	0x080027a1
 8002770:	080027b9 	.word	0x080027b9
 8002774:	080027b9 	.word	0x080027b9
 8002778:	080027b9 	.word	0x080027b9
 800277c:	080027ad 	.word	0x080027ad
 8002780:	080027b9 	.word	0x080027b9
 8002784:	080027b9 	.word	0x080027b9
 8002788:	080027b9 	.word	0x080027b9
 800278c:	080027a7 	.word	0x080027a7
 8002790:	080027b9 	.word	0x080027b9
 8002794:	080027b9 	.word	0x080027b9
 8002798:	080027b9 	.word	0x080027b9
 800279c:	080027b3 	.word	0x080027b3
 80027a0:	2300      	movs	r3, #0
 80027a2:	77fb      	strb	r3, [r7, #31]
 80027a4:	e118      	b.n	80029d8 <UART_SetConfig+0x348>
 80027a6:	2302      	movs	r3, #2
 80027a8:	77fb      	strb	r3, [r7, #31]
 80027aa:	e115      	b.n	80029d8 <UART_SetConfig+0x348>
 80027ac:	2304      	movs	r3, #4
 80027ae:	77fb      	strb	r3, [r7, #31]
 80027b0:	e112      	b.n	80029d8 <UART_SetConfig+0x348>
 80027b2:	2308      	movs	r3, #8
 80027b4:	77fb      	strb	r3, [r7, #31]
 80027b6:	e10f      	b.n	80029d8 <UART_SetConfig+0x348>
 80027b8:	2310      	movs	r3, #16
 80027ba:	77fb      	strb	r3, [r7, #31]
 80027bc:	e10c      	b.n	80029d8 <UART_SetConfig+0x348>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a68      	ldr	r2, [pc, #416]	@ (8002964 <UART_SetConfig+0x2d4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d120      	bne.n	800280a <UART_SetConfig+0x17a>
 80027c8:	4b64      	ldr	r3, [pc, #400]	@ (800295c <UART_SetConfig+0x2cc>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80027d2:	2b30      	cmp	r3, #48	@ 0x30
 80027d4:	d013      	beq.n	80027fe <UART_SetConfig+0x16e>
 80027d6:	2b30      	cmp	r3, #48	@ 0x30
 80027d8:	d814      	bhi.n	8002804 <UART_SetConfig+0x174>
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d009      	beq.n	80027f2 <UART_SetConfig+0x162>
 80027de:	2b20      	cmp	r3, #32
 80027e0:	d810      	bhi.n	8002804 <UART_SetConfig+0x174>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <UART_SetConfig+0x15c>
 80027e6:	2b10      	cmp	r3, #16
 80027e8:	d006      	beq.n	80027f8 <UART_SetConfig+0x168>
 80027ea:	e00b      	b.n	8002804 <UART_SetConfig+0x174>
 80027ec:	2300      	movs	r3, #0
 80027ee:	77fb      	strb	r3, [r7, #31]
 80027f0:	e0f2      	b.n	80029d8 <UART_SetConfig+0x348>
 80027f2:	2302      	movs	r3, #2
 80027f4:	77fb      	strb	r3, [r7, #31]
 80027f6:	e0ef      	b.n	80029d8 <UART_SetConfig+0x348>
 80027f8:	2304      	movs	r3, #4
 80027fa:	77fb      	strb	r3, [r7, #31]
 80027fc:	e0ec      	b.n	80029d8 <UART_SetConfig+0x348>
 80027fe:	2308      	movs	r3, #8
 8002800:	77fb      	strb	r3, [r7, #31]
 8002802:	e0e9      	b.n	80029d8 <UART_SetConfig+0x348>
 8002804:	2310      	movs	r3, #16
 8002806:	77fb      	strb	r3, [r7, #31]
 8002808:	e0e6      	b.n	80029d8 <UART_SetConfig+0x348>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a56      	ldr	r2, [pc, #344]	@ (8002968 <UART_SetConfig+0x2d8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d120      	bne.n	8002856 <UART_SetConfig+0x1c6>
 8002814:	4b51      	ldr	r3, [pc, #324]	@ (800295c <UART_SetConfig+0x2cc>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800281e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002820:	d013      	beq.n	800284a <UART_SetConfig+0x1ba>
 8002822:	2bc0      	cmp	r3, #192	@ 0xc0
 8002824:	d814      	bhi.n	8002850 <UART_SetConfig+0x1c0>
 8002826:	2b80      	cmp	r3, #128	@ 0x80
 8002828:	d009      	beq.n	800283e <UART_SetConfig+0x1ae>
 800282a:	2b80      	cmp	r3, #128	@ 0x80
 800282c:	d810      	bhi.n	8002850 <UART_SetConfig+0x1c0>
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <UART_SetConfig+0x1a8>
 8002832:	2b40      	cmp	r3, #64	@ 0x40
 8002834:	d006      	beq.n	8002844 <UART_SetConfig+0x1b4>
 8002836:	e00b      	b.n	8002850 <UART_SetConfig+0x1c0>
 8002838:	2300      	movs	r3, #0
 800283a:	77fb      	strb	r3, [r7, #31]
 800283c:	e0cc      	b.n	80029d8 <UART_SetConfig+0x348>
 800283e:	2302      	movs	r3, #2
 8002840:	77fb      	strb	r3, [r7, #31]
 8002842:	e0c9      	b.n	80029d8 <UART_SetConfig+0x348>
 8002844:	2304      	movs	r3, #4
 8002846:	77fb      	strb	r3, [r7, #31]
 8002848:	e0c6      	b.n	80029d8 <UART_SetConfig+0x348>
 800284a:	2308      	movs	r3, #8
 800284c:	77fb      	strb	r3, [r7, #31]
 800284e:	e0c3      	b.n	80029d8 <UART_SetConfig+0x348>
 8002850:	2310      	movs	r3, #16
 8002852:	77fb      	strb	r3, [r7, #31]
 8002854:	e0c0      	b.n	80029d8 <UART_SetConfig+0x348>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a44      	ldr	r2, [pc, #272]	@ (800296c <UART_SetConfig+0x2dc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d125      	bne.n	80028ac <UART_SetConfig+0x21c>
 8002860:	4b3e      	ldr	r3, [pc, #248]	@ (800295c <UART_SetConfig+0x2cc>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800286a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800286e:	d017      	beq.n	80028a0 <UART_SetConfig+0x210>
 8002870:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002874:	d817      	bhi.n	80028a6 <UART_SetConfig+0x216>
 8002876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800287a:	d00b      	beq.n	8002894 <UART_SetConfig+0x204>
 800287c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002880:	d811      	bhi.n	80028a6 <UART_SetConfig+0x216>
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <UART_SetConfig+0x1fe>
 8002886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800288a:	d006      	beq.n	800289a <UART_SetConfig+0x20a>
 800288c:	e00b      	b.n	80028a6 <UART_SetConfig+0x216>
 800288e:	2300      	movs	r3, #0
 8002890:	77fb      	strb	r3, [r7, #31]
 8002892:	e0a1      	b.n	80029d8 <UART_SetConfig+0x348>
 8002894:	2302      	movs	r3, #2
 8002896:	77fb      	strb	r3, [r7, #31]
 8002898:	e09e      	b.n	80029d8 <UART_SetConfig+0x348>
 800289a:	2304      	movs	r3, #4
 800289c:	77fb      	strb	r3, [r7, #31]
 800289e:	e09b      	b.n	80029d8 <UART_SetConfig+0x348>
 80028a0:	2308      	movs	r3, #8
 80028a2:	77fb      	strb	r3, [r7, #31]
 80028a4:	e098      	b.n	80029d8 <UART_SetConfig+0x348>
 80028a6:	2310      	movs	r3, #16
 80028a8:	77fb      	strb	r3, [r7, #31]
 80028aa:	e095      	b.n	80029d8 <UART_SetConfig+0x348>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002970 <UART_SetConfig+0x2e0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d125      	bne.n	8002902 <UART_SetConfig+0x272>
 80028b6:	4b29      	ldr	r3, [pc, #164]	@ (800295c <UART_SetConfig+0x2cc>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80028c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80028c4:	d017      	beq.n	80028f6 <UART_SetConfig+0x266>
 80028c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80028ca:	d817      	bhi.n	80028fc <UART_SetConfig+0x26c>
 80028cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028d0:	d00b      	beq.n	80028ea <UART_SetConfig+0x25a>
 80028d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028d6:	d811      	bhi.n	80028fc <UART_SetConfig+0x26c>
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <UART_SetConfig+0x254>
 80028dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028e0:	d006      	beq.n	80028f0 <UART_SetConfig+0x260>
 80028e2:	e00b      	b.n	80028fc <UART_SetConfig+0x26c>
 80028e4:	2301      	movs	r3, #1
 80028e6:	77fb      	strb	r3, [r7, #31]
 80028e8:	e076      	b.n	80029d8 <UART_SetConfig+0x348>
 80028ea:	2302      	movs	r3, #2
 80028ec:	77fb      	strb	r3, [r7, #31]
 80028ee:	e073      	b.n	80029d8 <UART_SetConfig+0x348>
 80028f0:	2304      	movs	r3, #4
 80028f2:	77fb      	strb	r3, [r7, #31]
 80028f4:	e070      	b.n	80029d8 <UART_SetConfig+0x348>
 80028f6:	2308      	movs	r3, #8
 80028f8:	77fb      	strb	r3, [r7, #31]
 80028fa:	e06d      	b.n	80029d8 <UART_SetConfig+0x348>
 80028fc:	2310      	movs	r3, #16
 80028fe:	77fb      	strb	r3, [r7, #31]
 8002900:	e06a      	b.n	80029d8 <UART_SetConfig+0x348>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1b      	ldr	r2, [pc, #108]	@ (8002974 <UART_SetConfig+0x2e4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d138      	bne.n	800297e <UART_SetConfig+0x2ee>
 800290c:	4b13      	ldr	r3, [pc, #76]	@ (800295c <UART_SetConfig+0x2cc>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002912:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002916:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800291a:	d017      	beq.n	800294c <UART_SetConfig+0x2bc>
 800291c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002920:	d82a      	bhi.n	8002978 <UART_SetConfig+0x2e8>
 8002922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002926:	d00b      	beq.n	8002940 <UART_SetConfig+0x2b0>
 8002928:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800292c:	d824      	bhi.n	8002978 <UART_SetConfig+0x2e8>
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <UART_SetConfig+0x2aa>
 8002932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002936:	d006      	beq.n	8002946 <UART_SetConfig+0x2b6>
 8002938:	e01e      	b.n	8002978 <UART_SetConfig+0x2e8>
 800293a:	2300      	movs	r3, #0
 800293c:	77fb      	strb	r3, [r7, #31]
 800293e:	e04b      	b.n	80029d8 <UART_SetConfig+0x348>
 8002940:	2302      	movs	r3, #2
 8002942:	77fb      	strb	r3, [r7, #31]
 8002944:	e048      	b.n	80029d8 <UART_SetConfig+0x348>
 8002946:	2304      	movs	r3, #4
 8002948:	77fb      	strb	r3, [r7, #31]
 800294a:	e045      	b.n	80029d8 <UART_SetConfig+0x348>
 800294c:	2308      	movs	r3, #8
 800294e:	77fb      	strb	r3, [r7, #31]
 8002950:	e042      	b.n	80029d8 <UART_SetConfig+0x348>
 8002952:	bf00      	nop
 8002954:	efff69f3 	.word	0xefff69f3
 8002958:	40011000 	.word	0x40011000
 800295c:	40023800 	.word	0x40023800
 8002960:	40004400 	.word	0x40004400
 8002964:	40004800 	.word	0x40004800
 8002968:	40004c00 	.word	0x40004c00
 800296c:	40005000 	.word	0x40005000
 8002970:	40011400 	.word	0x40011400
 8002974:	40007800 	.word	0x40007800
 8002978:	2310      	movs	r3, #16
 800297a:	77fb      	strb	r3, [r7, #31]
 800297c:	e02c      	b.n	80029d8 <UART_SetConfig+0x348>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a72      	ldr	r2, [pc, #456]	@ (8002b4c <UART_SetConfig+0x4bc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d125      	bne.n	80029d4 <UART_SetConfig+0x344>
 8002988:	4b71      	ldr	r3, [pc, #452]	@ (8002b50 <UART_SetConfig+0x4c0>)
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002992:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002996:	d017      	beq.n	80029c8 <UART_SetConfig+0x338>
 8002998:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800299c:	d817      	bhi.n	80029ce <UART_SetConfig+0x33e>
 800299e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029a2:	d00b      	beq.n	80029bc <UART_SetConfig+0x32c>
 80029a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029a8:	d811      	bhi.n	80029ce <UART_SetConfig+0x33e>
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <UART_SetConfig+0x326>
 80029ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029b2:	d006      	beq.n	80029c2 <UART_SetConfig+0x332>
 80029b4:	e00b      	b.n	80029ce <UART_SetConfig+0x33e>
 80029b6:	2300      	movs	r3, #0
 80029b8:	77fb      	strb	r3, [r7, #31]
 80029ba:	e00d      	b.n	80029d8 <UART_SetConfig+0x348>
 80029bc:	2302      	movs	r3, #2
 80029be:	77fb      	strb	r3, [r7, #31]
 80029c0:	e00a      	b.n	80029d8 <UART_SetConfig+0x348>
 80029c2:	2304      	movs	r3, #4
 80029c4:	77fb      	strb	r3, [r7, #31]
 80029c6:	e007      	b.n	80029d8 <UART_SetConfig+0x348>
 80029c8:	2308      	movs	r3, #8
 80029ca:	77fb      	strb	r3, [r7, #31]
 80029cc:	e004      	b.n	80029d8 <UART_SetConfig+0x348>
 80029ce:	2310      	movs	r3, #16
 80029d0:	77fb      	strb	r3, [r7, #31]
 80029d2:	e001      	b.n	80029d8 <UART_SetConfig+0x348>
 80029d4:	2310      	movs	r3, #16
 80029d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029e0:	d15b      	bne.n	8002a9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80029e2:	7ffb      	ldrb	r3, [r7, #31]
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d828      	bhi.n	8002a3a <UART_SetConfig+0x3aa>
 80029e8:	a201      	add	r2, pc, #4	@ (adr r2, 80029f0 <UART_SetConfig+0x360>)
 80029ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ee:	bf00      	nop
 80029f0:	08002a15 	.word	0x08002a15
 80029f4:	08002a1d 	.word	0x08002a1d
 80029f8:	08002a25 	.word	0x08002a25
 80029fc:	08002a3b 	.word	0x08002a3b
 8002a00:	08002a2b 	.word	0x08002a2b
 8002a04:	08002a3b 	.word	0x08002a3b
 8002a08:	08002a3b 	.word	0x08002a3b
 8002a0c:	08002a3b 	.word	0x08002a3b
 8002a10:	08002a33 	.word	0x08002a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a14:	f7ff f914 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 8002a18:	61b8      	str	r0, [r7, #24]
        break;
 8002a1a:	e013      	b.n	8002a44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a1c:	f7ff f924 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 8002a20:	61b8      	str	r0, [r7, #24]
        break;
 8002a22:	e00f      	b.n	8002a44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a24:	4b4b      	ldr	r3, [pc, #300]	@ (8002b54 <UART_SetConfig+0x4c4>)
 8002a26:	61bb      	str	r3, [r7, #24]
        break;
 8002a28:	e00c      	b.n	8002a44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a2a:	f7ff f837 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8002a2e:	61b8      	str	r0, [r7, #24]
        break;
 8002a30:	e008      	b.n	8002a44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a36:	61bb      	str	r3, [r7, #24]
        break;
 8002a38:	e004      	b.n	8002a44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	77bb      	strb	r3, [r7, #30]
        break;
 8002a42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d074      	beq.n	8002b34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	005a      	lsls	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	441a      	add	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2b0f      	cmp	r3, #15
 8002a64:	d916      	bls.n	8002a94 <UART_SetConfig+0x404>
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a6c:	d212      	bcs.n	8002a94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	f023 030f 	bic.w	r3, r3, #15
 8002a76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	89fb      	ldrh	r3, [r7, #14]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	89fa      	ldrh	r2, [r7, #14]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	e04f      	b.n	8002b34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	77bb      	strb	r3, [r7, #30]
 8002a98:	e04c      	b.n	8002b34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a9a:	7ffb      	ldrb	r3, [r7, #31]
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d828      	bhi.n	8002af2 <UART_SetConfig+0x462>
 8002aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa8 <UART_SetConfig+0x418>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002acd 	.word	0x08002acd
 8002aac:	08002ad5 	.word	0x08002ad5
 8002ab0:	08002add 	.word	0x08002add
 8002ab4:	08002af3 	.word	0x08002af3
 8002ab8:	08002ae3 	.word	0x08002ae3
 8002abc:	08002af3 	.word	0x08002af3
 8002ac0:	08002af3 	.word	0x08002af3
 8002ac4:	08002af3 	.word	0x08002af3
 8002ac8:	08002aeb 	.word	0x08002aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002acc:	f7ff f8b8 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 8002ad0:	61b8      	str	r0, [r7, #24]
        break;
 8002ad2:	e013      	b.n	8002afc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ad4:	f7ff f8c8 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 8002ad8:	61b8      	str	r0, [r7, #24]
        break;
 8002ada:	e00f      	b.n	8002afc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002adc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <UART_SetConfig+0x4c4>)
 8002ade:	61bb      	str	r3, [r7, #24]
        break;
 8002ae0:	e00c      	b.n	8002afc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ae2:	f7fe ffdb 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8002ae6:	61b8      	str	r0, [r7, #24]
        break;
 8002ae8:	e008      	b.n	8002afc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aee:	61bb      	str	r3, [r7, #24]
        break;
 8002af0:	e004      	b.n	8002afc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	77bb      	strb	r3, [r7, #30]
        break;
 8002afa:	bf00      	nop
    }

    if (pclk != 0U)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d018      	beq.n	8002b34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	085a      	lsrs	r2, r3, #1
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	441a      	add	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b0f      	cmp	r3, #15
 8002b1a:	d909      	bls.n	8002b30 <UART_SetConfig+0x4a0>
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b22:	d205      	bcs.n	8002b30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	e001      	b.n	8002b34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002b40:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3720      	adds	r7, #32
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40007c00 	.word	0x40007c00
 8002b50:	40023800 	.word	0x40023800
 8002b54:	00f42400 	.word	0x00f42400

08002b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00a      	beq.n	8002b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01a      	beq.n	8002c6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c56:	d10a      	bne.n	8002c6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	605a      	str	r2, [r3, #4]
  }
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b098      	sub	sp, #96	@ 0x60
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cac:	f7fd ff4e 	bl	8000b4c <HAL_GetTick>
 8002cb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d12e      	bne.n	8002d1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f88c 	bl	8002dec <UART_WaitOnFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d021      	beq.n	8002d1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce2:	e853 3f00 	ldrex	r3, [r3]
 8002ce6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cee:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cfa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002cfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d00:	e841 2300 	strex	r3, r2, [r1]
 8002d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1e6      	bne.n	8002cda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e062      	b.n	8002de4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d149      	bne.n	8002dc0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d34:	2200      	movs	r2, #0
 8002d36:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f856 	bl	8002dec <UART_WaitOnFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d03c      	beq.n	8002dc0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	e853 3f00 	ldrex	r3, [r3]
 8002d52:	623b      	str	r3, [r7, #32]
   return(result);
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d6c:	e841 2300 	strex	r3, r2, [r1]
 8002d70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e6      	bne.n	8002d46 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3308      	adds	r3, #8
 8002d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3308      	adds	r3, #8
 8002d96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d98:	61fa      	str	r2, [r7, #28]
 8002d9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9c:	69b9      	ldr	r1, [r7, #24]
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	e841 2300 	strex	r3, r2, [r1]
 8002da4:	617b      	str	r3, [r7, #20]
   return(result);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e5      	bne.n	8002d78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e011      	b.n	8002de4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3758      	adds	r7, #88	@ 0x58
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfc:	e04f      	b.n	8002e9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d04b      	beq.n	8002e9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e06:	f7fd fea1 	bl	8000b4c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d302      	bcc.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e04e      	b.n	8002ebe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d037      	beq.n	8002e9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b80      	cmp	r3, #128	@ 0x80
 8002e32:	d034      	beq.n	8002e9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b40      	cmp	r3, #64	@ 0x40
 8002e38:	d031      	beq.n	8002e9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d110      	bne.n	8002e6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f838 	bl	8002ec6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2208      	movs	r2, #8
 8002e5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e029      	b.n	8002ebe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e78:	d111      	bne.n	8002e9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f81e 	bl	8002ec6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e00f      	b.n	8002ebe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	bf0c      	ite	eq
 8002eae:	2301      	moveq	r3, #1
 8002eb0:	2300      	movne	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d0a0      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b095      	sub	sp, #84	@ 0x54
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed6:	e853 3f00 	ldrex	r3, [r3]
 8002eda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ede:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002eec:	643b      	str	r3, [r7, #64]	@ 0x40
 8002eee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ef2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ef4:	e841 2300 	strex	r3, r2, [r1]
 8002ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e6      	bne.n	8002ece <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3308      	adds	r3, #8
 8002f06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	e853 3f00 	ldrex	r3, [r3]
 8002f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f28:	e841 2300 	strex	r3, r2, [r1]
 8002f2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e5      	bne.n	8002f00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d118      	bne.n	8002f6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	e853 3f00 	ldrex	r3, [r3]
 8002f48:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f023 0310 	bic.w	r3, r3, #16
 8002f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f5a:	61bb      	str	r3, [r7, #24]
 8002f5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5e:	6979      	ldr	r1, [r7, #20]
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	e841 2300 	strex	r3, r2, [r1]
 8002f66:	613b      	str	r3, [r7, #16]
   return(result);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1e6      	bne.n	8002f3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002f82:	bf00      	nop
 8002f84:	3754      	adds	r7, #84	@ 0x54
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <memset>:
 8002f8e:	4402      	add	r2, r0
 8002f90:	4603      	mov	r3, r0
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d100      	bne.n	8002f98 <memset+0xa>
 8002f96:	4770      	bx	lr
 8002f98:	f803 1b01 	strb.w	r1, [r3], #1
 8002f9c:	e7f9      	b.n	8002f92 <memset+0x4>
	...

08002fa0 <__libc_init_array>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	4d0d      	ldr	r5, [pc, #52]	@ (8002fd8 <__libc_init_array+0x38>)
 8002fa4:	4c0d      	ldr	r4, [pc, #52]	@ (8002fdc <__libc_init_array+0x3c>)
 8002fa6:	1b64      	subs	r4, r4, r5
 8002fa8:	10a4      	asrs	r4, r4, #2
 8002faa:	2600      	movs	r6, #0
 8002fac:	42a6      	cmp	r6, r4
 8002fae:	d109      	bne.n	8002fc4 <__libc_init_array+0x24>
 8002fb0:	4d0b      	ldr	r5, [pc, #44]	@ (8002fe0 <__libc_init_array+0x40>)
 8002fb2:	4c0c      	ldr	r4, [pc, #48]	@ (8002fe4 <__libc_init_array+0x44>)
 8002fb4:	f000 f818 	bl	8002fe8 <_init>
 8002fb8:	1b64      	subs	r4, r4, r5
 8002fba:	10a4      	asrs	r4, r4, #2
 8002fbc:	2600      	movs	r6, #0
 8002fbe:	42a6      	cmp	r6, r4
 8002fc0:	d105      	bne.n	8002fce <__libc_init_array+0x2e>
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc8:	4798      	blx	r3
 8002fca:	3601      	adds	r6, #1
 8002fcc:	e7ee      	b.n	8002fac <__libc_init_array+0xc>
 8002fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd2:	4798      	blx	r3
 8002fd4:	3601      	adds	r6, #1
 8002fd6:	e7f2      	b.n	8002fbe <__libc_init_array+0x1e>
 8002fd8:	08003030 	.word	0x08003030
 8002fdc:	08003030 	.word	0x08003030
 8002fe0:	08003030 	.word	0x08003030
 8002fe4:	08003034 	.word	0x08003034

08002fe8 <_init>:
 8002fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fea:	bf00      	nop
 8002fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fee:	bc08      	pop	{r3}
 8002ff0:	469e      	mov	lr, r3
 8002ff2:	4770      	bx	lr

08002ff4 <_fini>:
 8002ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff6:	bf00      	nop
 8002ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffa:	bc08      	pop	{r3}
 8002ffc:	469e      	mov	lr, r3
 8002ffe:	4770      	bx	lr
